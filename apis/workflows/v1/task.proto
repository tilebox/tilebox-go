// The internal API a task runner uses to communicate with a workflows-service.

syntax = "proto3";

package workflows.v1;

import "google/protobuf/duration.proto";
import "workflows/v1/core.proto";

// NextTaskRequest is the request for requesting the next task to run and marking a task as computed.
message NextTaskRequest {
  optional ComputedTask computed_task = 1; // The task that has been computed. If not set, the next task will
  // The capabilities of the task runner, and therefore the potential tasks that can be run by that task runner.
  optional NextTaskToRun next_task_to_run = 2;
}

// NextTaskToRun is a message specifying the capabilities of the task runner, and therefore the potential
// tasks that can be run by that task runner.
message NextTaskToRun {
  string cluster_slug = 1; // The cluster that this task runner is running on.
  repeated TaskIdentifier identifiers = 2; // The task identifiers that this task runner can run.
}

// ComputedTask is a message specifying a task that has been computed by the task runner.
message ComputedTask {
  UUID id = 1; // The id of the task that has been computed.
  // A display name for the task that has been computed for visualization purposes.
  // If not set, the display message specified upon task submission will be kept.
  string display = 2;
  repeated TaskSubmission sub_tasks = 3; // A list of sub-tasks that the just computed task spawned.
}

// NextTaskResponse is the response to the NextTask request.
// Right now it only contains the next task to run. Wrapped in a message to allow adding more fields later if needed.
message NextTaskResponse {
  Task next_task = 1;
}

// TaskFailedRequest is the request for marking a task as failed.
message TaskFailedRequest {
  UUID task_id = 1;
  string display = 2;
  bool cancel_job = 3;
}

// TaskStateResponse is the response to the TaskFailed request,
// indicating the current state of the task marked as failed.
message TaskStateResponse {
  TaskState state = 1;
}

// TaskLease is a message specifying the new lease expiration time of a task.
message TaskLeaseRequest {
  UUID task_id = 1;
  optional google.protobuf.Duration requested_lease = 2;
}

// A service for task runners to communicate with the workflows service.
service TaskService {
  // NextTask marks a task as computed and asks for the next task to run.
  // If no task marked as computed is sent, it is assumed that the task runner just started up or was idling so
  // the task server will send a task to run using a work-stealing algorithm.
  // If a task marked as computed is sent, the task server will send a next task to run using a depth first execution
  // algorithm, and only fall back to work-stealing if otherwise no tasks are available.
  // If the next_task_to_run field of the request is not set, a next task will never be returned, but a task
  // can still be marked as computed this way.
  rpc NextTask(NextTaskRequest) returns (NextTaskResponse);

  // TaskFailed tells the task server that we have failed to compute a task.
  // The task server will then mark the task as queued or failed, depending on the retry policy,
  // and possibly cancel the job.
  // If a task runner wants to continue executing tasks, it should afterwards fetch a new one using GetTaskToRun.
  rpc TaskFailed(TaskFailedRequest) returns (TaskStateResponse);

  // ExtendTaskLease is called by the task runner to extend the lease on a task.
  // On success, the response will contain the new lease expiration time.
  // If the task does not need to be extended, the response will be empty.
  rpc ExtendTaskLease(TaskLeaseRequest) returns (TaskLease);
}
