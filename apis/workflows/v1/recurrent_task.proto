// The external API for managing recurrent tasks in the Workflows service.

syntax = "proto3";

package workflows.v1;

import "workflows/v1/core.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// BucketType specifies a kind of storage bucket that we support.
enum BucketType {
  BUCKET_TYPE_UNSPECIFIED = 0;
  BUCKET_TYPE_GCS = 1;  // Google Cloud Storage
  BUCKET_TYPE_S3 = 2;  // Amazon Web Services S3
  BUCKET_TYPE_FS = 3;  // Local filesystem
}

// Bucket is a storage bucket that can be used as a trigger source.
message Bucket {
  UUID id = 1;  // Unique identifier for the bucket
  string slug = 2; // The unique identifier for the bucket in the storage system
  string name = 3;  // The human-readable name of the bucket
  BucketType type = 4;  // The type of the bucket, e.g. GCS, S3
}

// Buckets is a list of storage buckets
message Buckets {
  repeated Bucket buckets = 1;
}

// RecurrentTask is a task prototype that can result in many submitted tasks. Task submissions are triggered by
// NRT triggers, such as bucket triggers or cron triggers.
message RecurrentTask {
  UUID id = 1;  // Unique identifier for the trigger
  string name = 2;  // A human-readable name for the trigger
  TaskSubmission prototype = 3;  // The task submission to trigger

  repeated BucketTrigger bucket_triggers = 4;  // The bucket triggers that will trigger the task
  repeated CronTrigger cron_triggers = 5;  // The cron triggers that will trigger the task
}

// RecurrentTasks is a list of recurrent tasks
message RecurrentTasks {
  repeated RecurrentTask tasks = 1;
}

// BucketTrigger is a trigger that will trigger a task submission when an object matching the glob pattern is uploaded
// to a bucket.
message BucketTrigger {
  UUID id = 1;  // Unique identifier for the trigger
  Bucket bucket = 2;  // The bucket to watch
  string glob_pattern = 3;  // A glob pattern to match objects in the bucket
}

// BucketTask is a task that was triggered by a bucket trigger.
message BucketTask {
  UUID bucket_id = 1;  // The bucket that triggered the task
  string object = 2;  // The object that triggered the task
  bytes args = 3;  // Additional arguments for the task, to be deserialized by the task
}

// CronTrigger is a trigger that will trigger a task submission on a schedule.
message CronTrigger {
  UUID id = 1;  // Unique identifier for the trigger
  string schedule = 2;  // A cron schedule for the trigger, e.g. "0 0 * * *" (every day at midnight)
}

// CronTask is a task that was triggered by a cron trigger.
message CronTask {
  google.protobuf.Timestamp trigger_time = 1;  // The time the cron trigger fired
  bytes args = 2;  // Additional arguments for the task, to be deserialized by the task
}

// RecurrentTaskService is a service for managing recurrent tasks. Currently, we support two types of triggers for
// recurrent tasks:
// - Bucket triggers, which triggers tasks when an object is uploaded to a storage bucket that matches a glob pattern
// - Cron triggers, which triggers tasks on a schedule
service RecurrentTaskService {
  // ListBuckets lists all the storage buckets that are available for use as bucket triggers.
  rpc ListBuckets(google.protobuf.Empty) returns (Buckets);

  // ListRecurrentTasks lists all the recurrent tasks that are currently registered in a namespace.
  rpc ListRecurrentTasks(google.protobuf.Empty) returns (RecurrentTasks);
  // GetRecurrentTask gets a recurrent task by its ID.
  rpc GetRecurrentTask(UUID) returns (RecurrentTask);
  // CreateRecurrentTask creates a new recurrent task in a namespace.
  rpc CreateRecurrentTask(RecurrentTask) returns (RecurrentTask);
  // UpdateRecurrentTask updates a recurrent task in a namespace.
  rpc UpdateRecurrentTask(RecurrentTask) returns (RecurrentTask);
  // DeleteRecurrentTask deletes a recurrent task from a namespace.
  rpc DeleteRecurrentTask(UUID) returns (google.protobuf.Empty);
}
