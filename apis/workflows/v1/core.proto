// Core types for workflows.

syntax = "proto3";

package workflows.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// A cluster is a grouping of tasks that are related.
message Cluster {
  // 1 is reserved for a potential id field in the future.
  string slug = 2; // The unique slug of the cluster within the namespace.
  string display_name = 3; // The display name of the cluster.
}

// A job is a logical grouping of tasks that are related.
message Job {
  UUID id = 1;
  string name = 2;
  string trace_parent = 3;
  bool completed = 4; // deprecated: use state instead
  bool canceled = 5; // Whether the job has been canceled.
  JobState state = 6; // The current state of the job.
  google.protobuf.Timestamp submitted_at = 7; // The time the job was submitted.
  google.protobuf.Timestamp started_at = 8; // The time the job started running.
  repeated TaskSummary task_summaries = 9; // The task' summaries of the job.
}

// The state of a job.
enum JobState {
  JOB_STATE_UNSPECIFIED = 0;
  // The job is queued and waiting to be run.
  JOB_STATE_QUEUED = 1;
  // At least one task of the job has been started.
  JOB_STATE_STARTED = 2;
  // All tasks of the job have been completed.
  JOB_STATE_COMPLETED = 3;
}

// A summary of a task. Mainly used in the Console.
message TaskSummary {
  UUID id = 1;
  string display = 2;
  TaskState state = 3;
  UUID parent_id = 4;
  repeated UUID depends_on = 5;
  google.protobuf.Timestamp started_at = 6;
  google.protobuf.Timestamp stopped_at = 7;
}

// A task is a single unit of work.
message Task {
  UUID id = 1;  // The id of the task instance. Contains the submission timestamp as the time part of the ULID.
  // Unique identifier for the task. Used by runners to match tasks to specific functions.
  TaskIdentifier identifier = 2;
  TaskState state = 3;  // The current state of the task.
  optional bytes input = 4; // The serialized input parameters for the task in the format that this task expects.
  // Display is a human readable representation of the Task used for printing or visualizations
  optional string display = 5;
  Job job = 6;  // The job that this task belongs to.
  UUID parent_id = 7;  // The id of the parent task.
  repeated UUID depends_on = 8;  // The ids of the tasks that this task depends on.
  TaskLease lease = 9; // The lease of the task.
  int64 retry_count = 10; // The number of times this task has been retried.
}

// The state of a task.
enum TaskState {
  TASK_STATE_UNSPECIFIED = 0;
  // The task is queued and waiting to be run.
  TASK_STATE_QUEUED = 1;
  // The task is currently running on some task runner.
  TASK_STATE_RUNNING = 2;
  // The task has been computed and the output is available.
  // If the task also has no more outstanding children, it is considered COMPLETED.
  TASK_STATE_COMPUTED = 3;
  // The task has failed.
  TASK_STATE_FAILED = 4;
  // The task has been cancelled due to user request.
  TASK_STATE_CANCELLED = 5;
}

// An identifier for a task.
message TaskIdentifier {
  string name = 1;  // A unique name of a task (unique within a namespace).
  string version = 2;  // Version of the task.
}

// A list of tasks.
message Tasks {
  repeated Task tasks = 1;
}

// TaskSubmission is a message of a task that is just about to be submitted, either by submitting a job or as a subtask.
message TaskSubmission {
  string cluster_slug = 1; // The cluster that this task should be run on
  TaskIdentifier identifier = 2; // The task identifier
  bytes input = 3; // The serialized task instance
  string display = 4; // A human-readable description of the task
  // A list of indices, corresponding to tasks in the list of sub_tasks that this SubTask is part of.
  repeated int64 dependencies = 5;
  int64 max_retries = 6; // The maximum number of retries for this task.
}

// Bytes field (in message)
message UUID {
  bytes uuid = 1;
}

// A lease for a task.
message TaskLease {
  google.protobuf.Duration lease = 1;
  google.protobuf.Duration recommended_wait_until_next_extension = 2;
}

// An ID interval
message IDInterval {
  string start_id = 1; // The id of the first data point in the interval.
  string end_id = 2; // The id of the last data point in the interval.

  // We use exclusive for start and inclusive for end, because that way when both are false
  // we have a half-open interval [start, end) which is the default behaviour we want to achieve.
  // Flag indicating whether the start id is exclusive.
  // If true, the datapoint with the given start id is not included in the interval.
  bool start_exclusive = 3;
  // Flag indicating whether the end id is inclusive.
  // If true, the datapoint with the given end id is included in the interval.
  bool end_inclusive = 4;
}

// Pagination information for paginated queries
message Pagination {
  // The maximum number of entries to return.
  optional int64 limit = 1;
  // Return entries starting after this entry.
  // This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
  optional string starting_after = 2;
}
