// Proto messages and service definition for the APIs related to ingesting and deleting datapoints.

syntax = "proto3";

package datasets.v1;

import "datasets/v1/core.proto";

// Legacy ingest request
// IngestDatapointsRequest is used to ingest one or multiple datapoints into a collection.
message IngestDatapointsRequest {
  ID collection_id = 1;  // The collection to insert the datapoints into.

  Datapoints datapoints = 2;

  // Whether to allow existing datapoints as part of the request. If true, datapoints that already exist will be
  // ignored, and the number of such existing datapoints will be returned in the response. If false, any datapoints
  // that already exist will result in an error. Setting this to true is useful for achieving idempotency (e.g.
  // allowing re-ingestion of datapoints that have already been ingested in the past).
  bool allow_existing = 3;
}

// IngestRequest is used to ingest one or multiple datapoints into a collection.
message IngestRequest {
  ID collection_id = 1;  // The collection to insert the datapoints into.

  // The datapoints to insert. The values here are encoded protobuf messages. The type of the message is determined
  // by the type of the dataset that the specified collection belongs to.
  repeated bytes values = 2;

  // Whether to allow existing datapoints as part of the request. If true, datapoints that already exist will be
  // ignored, and the number of such existing datapoints will be returned in the response. If false, any datapoints
  // that already exist will result in an error. Setting this to true is useful for achieving idempotency (e.g.
  // allowing re-ingestion of datapoints that have already been ingested in the past).
  bool allow_existing = 3;
}

// IngestResponse is the response to a IngestRequest, indicating the number of datapoints that were
// ingested as well as the generated ids for those datapoints.
message IngestResponse {
  int64 num_created = 1; // The number of datapoints that were created.
  int64 num_existing = 2; // The number of datapoints that were ignored because they already existed.
  repeated ID datapoint_ids = 3; // The ids of the datapoints in the same order as the datapoints in the request.
}

// DeleteRequest is used to delete multiple datapoints from a collection.
message DeleteRequest {
  ID collection_id = 1;
  repeated ID datapoint_ids = 2;
}

// DeleteResponse is used to indicate that multiple datapoints were deleted.
message DeleteResponse {
  int64 num_deleted = 1; // The number of datapoints that were deleted.
}


// DataIngestionService provides data ingestion and deletion capabilities for Tilebox datasets.
service DataIngestionService {
  // legacy ingest endpoint, that separates datapoints into meta and data. Will be removed in the future.
  rpc IngestDatapoints(IngestDatapointsRequest) returns (IngestResponse) {}

  rpc Ingest(IngestRequest) returns (IngestResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}
