// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: datasets/v1/core.proto

package datasetsv1

import (
	v1 "github.com/tilebox/tilebox-go/protogen/tilebox/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DatasetPermission is a permission a user (as part of an org) can have on a dataset
type DatasetPermission int32

const (
	DatasetPermission_DATASET_PERMISSION_UNSPECIFIED DatasetPermission = 0
	DatasetPermission_DATASET_PERMISSION_ACCESS_DATA DatasetPermission = 1
	DatasetPermission_DATASET_PERMISSION_WRITE_DATA  DatasetPermission = 2
	DatasetPermission_DATASET_PERMISSION_EDIT        DatasetPermission = 3
)

// Enum value maps for DatasetPermission.
var (
	DatasetPermission_name = map[int32]string{
		0: "DATASET_PERMISSION_UNSPECIFIED",
		1: "DATASET_PERMISSION_ACCESS_DATA",
		2: "DATASET_PERMISSION_WRITE_DATA",
		3: "DATASET_PERMISSION_EDIT",
	}
	DatasetPermission_value = map[string]int32{
		"DATASET_PERMISSION_UNSPECIFIED": 0,
		"DATASET_PERMISSION_ACCESS_DATA": 1,
		"DATASET_PERMISSION_WRITE_DATA":  2,
		"DATASET_PERMISSION_EDIT":        3,
	}
)

func (x DatasetPermission) Enum() *DatasetPermission {
	p := new(DatasetPermission)
	*p = x
	return p
}

func (x DatasetPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_core_proto_enumTypes[0].Descriptor()
}

func (DatasetPermission) Type() protoreflect.EnumType {
	return &file_datasets_v1_core_proto_enumTypes[0]
}

func (x DatasetPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Visibility is a visibility a user (as part of an org) can have on a dataset
type Visibility int32

const (
	Visibility_VISIBILITY_UNSPECIFIED    Visibility = 0
	Visibility_VISIBILITY_PRIVATE        Visibility = 1
	Visibility_VISIBILITY_SHARED_WITH_ME Visibility = 2
	Visibility_VISIBILITY_PUBLIC         Visibility = 3
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		0: "VISIBILITY_UNSPECIFIED",
		1: "VISIBILITY_PRIVATE",
		2: "VISIBILITY_SHARED_WITH_ME",
		3: "VISIBILITY_PUBLIC",
	}
	Visibility_value = map[string]int32{
		"VISIBILITY_UNSPECIFIED":    0,
		"VISIBILITY_PRIVATE":        1,
		"VISIBILITY_SHARED_WITH_ME": 2,
		"VISIBILITY_PUBLIC":         3,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_core_proto_enumTypes[1].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_datasets_v1_core_proto_enumTypes[1]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// LegacyPagination - used for backwards compatibility, will be removed as soon as all datasets are migrated
type LegacyPagination struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Limit         int64                  `protobuf:"varint,1,opt,name=limit"`
	xxx_hidden_StartingAfter *string                `protobuf:"bytes,2,opt,name=starting_after,json=startingAfter"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *LegacyPagination) Reset() {
	*x = LegacyPagination{}
	mi := &file_datasets_v1_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyPagination) ProtoMessage() {}

func (x *LegacyPagination) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LegacyPagination) GetLimit() int64 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *LegacyPagination) GetStartingAfter() string {
	if x != nil {
		if x.xxx_hidden_StartingAfter != nil {
			return *x.xxx_hidden_StartingAfter
		}
		return ""
	}
	return ""
}

func (x *LegacyPagination) SetLimit(v int64) {
	x.xxx_hidden_Limit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *LegacyPagination) SetStartingAfter(v string) {
	x.xxx_hidden_StartingAfter = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *LegacyPagination) HasLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *LegacyPagination) HasStartingAfter() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *LegacyPagination) ClearLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Limit = 0
}

func (x *LegacyPagination) ClearStartingAfter() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_StartingAfter = nil
}

type LegacyPagination_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The maximum number of entries to return.
	Limit *int64
	// Return entries starting after this entry.
	// This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
	StartingAfter *string
}

func (b0 LegacyPagination_builder) Build() *LegacyPagination {
	m0 := &LegacyPagination{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Limit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Limit = *b.Limit
	}
	if b.StartingAfter != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_StartingAfter = b.StartingAfter
	}
	return m0
}

// Any is a message that can hold any other message as bytes.
// We don't use google.protobuf.Any because we want the JSON representation of the value field to be bytes.
type Any struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TypeUrl string                 `protobuf:"bytes,1,opt,name=type_url,json=typeUrl"`
	xxx_hidden_Value   []byte                 `protobuf:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Any) Reset() {
	*x = Any{}
	mi := &file_datasets_v1_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Any) GetTypeUrl() string {
	if x != nil {
		return x.xxx_hidden_TypeUrl
	}
	return ""
}

func (x *Any) GetValue() []byte {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *Any) SetTypeUrl(v string) {
	x.xxx_hidden_TypeUrl = v
}

func (x *Any) SetValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Value = v
}

type Any_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TypeUrl string
	// Must be a valid serialized protocol buffer of the above specified type.
	Value []byte
}

func (b0 Any_builder) Build() *Any {
	m0 := &Any{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TypeUrl = b.TypeUrl
	x.xxx_hidden_Value = b.Value
	return m0
}

// RepeatedAny is a message holding a list of messages, that all share the same variable message type.
// It is preferable over a repeated Any field because it avoids repeating the type_url for every single element.
type RepeatedAny struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TypeUrl string                 `protobuf:"bytes,1,opt,name=type_url,json=typeUrl"`
	xxx_hidden_Value   [][]byte               `protobuf:"bytes,2,rep,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RepeatedAny) Reset() {
	*x = RepeatedAny{}
	mi := &file_datasets_v1_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedAny) ProtoMessage() {}

func (x *RepeatedAny) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RepeatedAny) GetTypeUrl() string {
	if x != nil {
		return x.xxx_hidden_TypeUrl
	}
	return ""
}

func (x *RepeatedAny) GetValue() [][]byte {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *RepeatedAny) SetTypeUrl(v string) {
	x.xxx_hidden_TypeUrl = v
}

func (x *RepeatedAny) SetValue(v [][]byte) {
	x.xxx_hidden_Value = v
}

type RepeatedAny_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TypeUrl string
	// Must be a valid serialized protocol buffer of the above specified type.
	Value [][]byte
}

func (b0 RepeatedAny_builder) Build() *RepeatedAny {
	m0 := &RepeatedAny{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TypeUrl = b.TypeUrl
	x.xxx_hidden_Value = b.Value
	return m0
}

// DatapointMetadata contains the metadata for a single data point.
// legacy, only relevant for old endpoints
type DatapointMetadata struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EventTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_time,json=eventTime"`
	xxx_hidden_IngestionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ingestion_time,json=ingestionTime"`
	xxx_hidden_Id            *string                `protobuf:"bytes,3,opt,name=id"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DatapointMetadata) Reset() {
	*x = DatapointMetadata{}
	mi := &file_datasets_v1_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatapointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatapointMetadata) ProtoMessage() {}

func (x *DatapointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DatapointMetadata) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EventTime
	}
	return nil
}

func (x *DatapointMetadata) GetIngestionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_IngestionTime
	}
	return nil
}

func (x *DatapointMetadata) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *DatapointMetadata) SetEventTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EventTime = v
}

func (x *DatapointMetadata) SetIngestionTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_IngestionTime = v
}

func (x *DatapointMetadata) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *DatapointMetadata) HasEventTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EventTime != nil
}

func (x *DatapointMetadata) HasIngestionTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_IngestionTime != nil
}

func (x *DatapointMetadata) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DatapointMetadata) ClearEventTime() {
	x.xxx_hidden_EventTime = nil
}

func (x *DatapointMetadata) ClearIngestionTime() {
	x.xxx_hidden_IngestionTime = nil
}

func (x *DatapointMetadata) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Id = nil
}

type DatapointMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The time the message was received by the on-board computer.
	EventTime *timestamppb.Timestamp
	// The time the message was ingested by Tilebox.
	IngestionTime *timestamppb.Timestamp
	// The external id of the datapoint.
	Id *string
}

func (b0 DatapointMetadata_builder) Build() *DatapointMetadata {
	m0 := &DatapointMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EventTime = b.EventTime
	x.xxx_hidden_IngestionTime = b.IngestionTime
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Id = b.Id
	}
	return m0
}

// DatapointPage is a single page of data points of a Tilebox dataset, such as it is returned by a ForInterval query
type DatapointPage struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Meta     *[]*DatapointMetadata  `protobuf:"bytes,1,rep,name=meta"`
	xxx_hidden_Data     *RepeatedAny           `protobuf:"bytes,2,opt,name=data"`
	xxx_hidden_NextPage *LegacyPagination      `protobuf:"bytes,3,opt,name=next_page,json=nextPage"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DatapointPage) Reset() {
	*x = DatapointPage{}
	mi := &file_datasets_v1_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatapointPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatapointPage) ProtoMessage() {}

func (x *DatapointPage) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DatapointPage) GetMeta() []*DatapointMetadata {
	if x != nil {
		if x.xxx_hidden_Meta != nil {
			return *x.xxx_hidden_Meta
		}
	}
	return nil
}

func (x *DatapointPage) GetData() *RepeatedAny {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *DatapointPage) GetNextPage() *LegacyPagination {
	if x != nil {
		return x.xxx_hidden_NextPage
	}
	return nil
}

func (x *DatapointPage) SetMeta(v []*DatapointMetadata) {
	x.xxx_hidden_Meta = &v
}

func (x *DatapointPage) SetData(v *RepeatedAny) {
	x.xxx_hidden_Data = v
}

func (x *DatapointPage) SetNextPage(v *LegacyPagination) {
	x.xxx_hidden_NextPage = v
}

func (x *DatapointPage) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *DatapointPage) HasNextPage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextPage != nil
}

func (x *DatapointPage) ClearData() {
	x.xxx_hidden_Data = nil
}

func (x *DatapointPage) ClearNextPage() {
	x.xxx_hidden_NextPage = nil
}

type DatapointPage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A metadata for a datapoint.
	Meta []*DatapointMetadata
	// The datapoints.
	Data *RepeatedAny
	// The pagination parameters for the next page.
	NextPage *LegacyPagination
}

func (b0 DatapointPage_builder) Build() *DatapointPage {
	m0 := &DatapointPage{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Meta = &b.Meta
	x.xxx_hidden_Data = b.Data
	x.xxx_hidden_NextPage = b.NextPage
	return m0
}

// Datapoint is a single datapoint in a Tilebox Dataset
type Datapoint struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Meta *DatapointMetadata     `protobuf:"bytes,1,opt,name=meta"`
	xxx_hidden_Data *Any                   `protobuf:"bytes,2,opt,name=data"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Datapoint) Reset() {
	*x = Datapoint{}
	mi := &file_datasets_v1_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datapoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datapoint) ProtoMessage() {}

func (x *Datapoint) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Datapoint) GetMeta() *DatapointMetadata {
	if x != nil {
		return x.xxx_hidden_Meta
	}
	return nil
}

func (x *Datapoint) GetData() *Any {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *Datapoint) SetMeta(v *DatapointMetadata) {
	x.xxx_hidden_Meta = v
}

func (x *Datapoint) SetData(v *Any) {
	x.xxx_hidden_Data = v
}

func (x *Datapoint) HasMeta() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Meta != nil
}

func (x *Datapoint) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *Datapoint) ClearMeta() {
	x.xxx_hidden_Meta = nil
}

func (x *Datapoint) ClearData() {
	x.xxx_hidden_Data = nil
}

type Datapoint_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A metadata for a datapoint.
	Meta *DatapointMetadata
	// The data.
	Data *Any
}

func (b0 Datapoint_builder) Build() *Datapoint {
	m0 := &Datapoint{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Meta = b.Meta
	x.xxx_hidden_Data = b.Data
	return m0
}

// Collection contains basic information about a dataset collection
type Collection struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LegacyId string                 `protobuf:"bytes,1,opt,name=legacy_id,json=legacyId"`
	xxx_hidden_Name     string                 `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Id       *v1.ID                 `protobuf:"bytes,3,opt,name=id"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Collection) Reset() {
	*x = Collection{}
	mi := &file_datasets_v1_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Collection) GetLegacyId() string {
	if x != nil {
		return x.xxx_hidden_LegacyId
	}
	return ""
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Collection) GetId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *Collection) SetLegacyId(v string) {
	x.xxx_hidden_LegacyId = v
}

func (x *Collection) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Collection) SetId(v *v1.ID) {
	x.xxx_hidden_Id = v
}

func (x *Collection) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *Collection) ClearId() {
	x.xxx_hidden_Id = nil
}

type Collection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Here for backwards compatibility, to be removed in the future.
	LegacyId string
	Name     string
	Id       *v1.ID
}

func (b0 Collection_builder) Build() *Collection {
	m0 := &Collection{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LegacyId = b.LegacyId
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Id = b.Id
	return m0
}

// CollectionInfo contains information about the data available in a dataset collection
type CollectionInfo struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Collection   *Collection            `protobuf:"bytes,1,opt,name=collection"`
	xxx_hidden_Availability *v1.TimeInterval       `protobuf:"bytes,2,opt,name=availability"`
	xxx_hidden_Count        uint64                 `protobuf:"varint,3,opt,name=count"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	mi := &file_datasets_v1_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CollectionInfo) GetCollection() *Collection {
	if x != nil {
		return x.xxx_hidden_Collection
	}
	return nil
}

func (x *CollectionInfo) GetAvailability() *v1.TimeInterval {
	if x != nil {
		return x.xxx_hidden_Availability
	}
	return nil
}

func (x *CollectionInfo) GetCount() uint64 {
	if x != nil {
		return x.xxx_hidden_Count
	}
	return 0
}

func (x *CollectionInfo) SetCollection(v *Collection) {
	x.xxx_hidden_Collection = v
}

func (x *CollectionInfo) SetAvailability(v *v1.TimeInterval) {
	x.xxx_hidden_Availability = v
}

func (x *CollectionInfo) SetCount(v uint64) {
	x.xxx_hidden_Count = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *CollectionInfo) HasCollection() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Collection != nil
}

func (x *CollectionInfo) HasAvailability() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Availability != nil
}

func (x *CollectionInfo) HasCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CollectionInfo) ClearCollection() {
	x.xxx_hidden_Collection = nil
}

func (x *CollectionInfo) ClearAvailability() {
	x.xxx_hidden_Availability = nil
}

func (x *CollectionInfo) ClearCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Count = 0
}

type CollectionInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Collection *Collection
	// The time interval for which data is available.
	Availability *v1.TimeInterval
	// Number of entries in the dataset.
	Count *uint64
}

func (b0 CollectionInfo_builder) Build() *CollectionInfo {
	m0 := &CollectionInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Collection = b.Collection
	x.xxx_hidden_Availability = b.Availability
	if b.Count != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Count = *b.Count
	}
	return m0
}

// CollectionInfos contains a list of CollectionInfo messages.
type CollectionInfos struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data *[]*CollectionInfo     `protobuf:"bytes,1,rep,name=data"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CollectionInfos) Reset() {
	*x = CollectionInfos{}
	mi := &file_datasets_v1_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfos) ProtoMessage() {}

func (x *CollectionInfos) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CollectionInfos) GetData() []*CollectionInfo {
	if x != nil {
		if x.xxx_hidden_Data != nil {
			return *x.xxx_hidden_Data
		}
	}
	return nil
}

func (x *CollectionInfos) SetData(v []*CollectionInfo) {
	x.xxx_hidden_Data = &v
}

type CollectionInfos_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data []*CollectionInfo
}

func (b0 CollectionInfos_builder) Build() *CollectionInfos {
	m0 := &CollectionInfos{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = &b.Data
	return m0
}

// Dataset contains information about a single dataset
type Dataset struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id           *v1.ID                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_GroupId      *v1.ID                 `protobuf:"bytes,2,opt,name=group_id,json=groupId"`
	xxx_hidden_Type         *AnnotatedType         `protobuf:"bytes,3,opt,name=type"`
	xxx_hidden_CodeName     string                 `protobuf:"bytes,4,opt,name=code_name,json=codeName"`
	xxx_hidden_Name         string                 `protobuf:"bytes,5,opt,name=name"`
	xxx_hidden_Summary      string                 `protobuf:"bytes,6,opt,name=summary"`
	xxx_hidden_Icon         string                 `protobuf:"bytes,7,opt,name=icon"`
	xxx_hidden_Description  string                 `protobuf:"bytes,8,opt,name=description"`
	xxx_hidden_Permissions  []DatasetPermission    `protobuf:"varint,10,rep,packed,name=permissions,enum=datasets.v1.DatasetPermission"`
	xxx_hidden_Visibility   Visibility             `protobuf:"varint,11,opt,name=visibility,enum=datasets.v1.Visibility"`
	xxx_hidden_Slug         string                 `protobuf:"bytes,12,opt,name=slug"`
	xxx_hidden_TypeEditable bool                   `protobuf:"varint,13,opt,name=type_editable,json=typeEditable"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_datasets_v1_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Dataset) GetId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *Dataset) GetGroupId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_GroupId
	}
	return nil
}

func (x *Dataset) GetType() *AnnotatedType {
	if x != nil {
		return x.xxx_hidden_Type
	}
	return nil
}

func (x *Dataset) GetCodeName() string {
	if x != nil {
		return x.xxx_hidden_CodeName
	}
	return ""
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Dataset) GetSummary() string {
	if x != nil {
		return x.xxx_hidden_Summary
	}
	return ""
}

func (x *Dataset) GetIcon() string {
	if x != nil {
		return x.xxx_hidden_Icon
	}
	return ""
}

func (x *Dataset) GetDescription() string {
	if x != nil {
		return x.xxx_hidden_Description
	}
	return ""
}

func (x *Dataset) GetPermissions() []DatasetPermission {
	if x != nil {
		return x.xxx_hidden_Permissions
	}
	return nil
}

func (x *Dataset) GetVisibility() Visibility {
	if x != nil {
		return x.xxx_hidden_Visibility
	}
	return Visibility_VISIBILITY_UNSPECIFIED
}

func (x *Dataset) GetSlug() string {
	if x != nil {
		return x.xxx_hidden_Slug
	}
	return ""
}

func (x *Dataset) GetTypeEditable() bool {
	if x != nil {
		return x.xxx_hidden_TypeEditable
	}
	return false
}

func (x *Dataset) SetId(v *v1.ID) {
	x.xxx_hidden_Id = v
}

func (x *Dataset) SetGroupId(v *v1.ID) {
	x.xxx_hidden_GroupId = v
}

func (x *Dataset) SetType(v *AnnotatedType) {
	x.xxx_hidden_Type = v
}

func (x *Dataset) SetCodeName(v string) {
	x.xxx_hidden_CodeName = v
}

func (x *Dataset) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Dataset) SetSummary(v string) {
	x.xxx_hidden_Summary = v
}

func (x *Dataset) SetIcon(v string) {
	x.xxx_hidden_Icon = v
}

func (x *Dataset) SetDescription(v string) {
	x.xxx_hidden_Description = v
}

func (x *Dataset) SetPermissions(v []DatasetPermission) {
	x.xxx_hidden_Permissions = v
}

func (x *Dataset) SetVisibility(v Visibility) {
	x.xxx_hidden_Visibility = v
}

func (x *Dataset) SetSlug(v string) {
	x.xxx_hidden_Slug = v
}

func (x *Dataset) SetTypeEditable(v bool) {
	x.xxx_hidden_TypeEditable = v
}

func (x *Dataset) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *Dataset) HasGroupId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GroupId != nil
}

func (x *Dataset) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *Dataset) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *Dataset) ClearGroupId() {
	x.xxx_hidden_GroupId = nil
}

func (x *Dataset) ClearType() {
	x.xxx_hidden_Type = nil
}

type Dataset_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// dataset id
	Id *v1.ID
	// the dataset group to which this dataset belongs
	GroupId *v1.ID
	// the type of the dataset
	Type *AnnotatedType
	// normalized snake case name of the dataset, which can be used as a valid code identifier
	CodeName string
	// display name of the dataset
	Name string
	// summary of the dataset
	Summary string
	// optional icon of the dataset
	Icon string
	// description of the dataset, in markdown format
	Description string
	// permissions of the requesting user on the dataset
	Permissions []DatasetPermission
	// visibility of the requesting user on the dataset
	Visibility Visibility
	// complete slug of the dataset
	Slug string
	// true if the dataset type is editable
	TypeEditable bool
}

func (b0 Dataset_builder) Build() *Dataset {
	m0 := &Dataset{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_GroupId = b.GroupId
	x.xxx_hidden_Type = b.Type
	x.xxx_hidden_CodeName = b.CodeName
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Summary = b.Summary
	x.xxx_hidden_Icon = b.Icon
	x.xxx_hidden_Description = b.Description
	x.xxx_hidden_Permissions = b.Permissions
	x.xxx_hidden_Visibility = b.Visibility
	x.xxx_hidden_Slug = b.Slug
	x.xxx_hidden_TypeEditable = b.TypeEditable
	return m0
}

// DatasetGroup represent a dataset group
type DatasetGroup struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id       *v1.ID                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_ParentId *v1.ID                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId"`
	xxx_hidden_CodeName string                 `protobuf:"bytes,3,opt,name=code_name,json=codeName"`
	xxx_hidden_Name     string                 `protobuf:"bytes,4,opt,name=name"`
	xxx_hidden_Icon     string                 `protobuf:"bytes,5,opt,name=icon"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DatasetGroup) Reset() {
	*x = DatasetGroup{}
	mi := &file_datasets_v1_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetGroup) ProtoMessage() {}

func (x *DatasetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DatasetGroup) GetId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *DatasetGroup) GetParentId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_ParentId
	}
	return nil
}

func (x *DatasetGroup) GetCodeName() string {
	if x != nil {
		return x.xxx_hidden_CodeName
	}
	return ""
}

func (x *DatasetGroup) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *DatasetGroup) GetIcon() string {
	if x != nil {
		return x.xxx_hidden_Icon
	}
	return ""
}

func (x *DatasetGroup) SetId(v *v1.ID) {
	x.xxx_hidden_Id = v
}

func (x *DatasetGroup) SetParentId(v *v1.ID) {
	x.xxx_hidden_ParentId = v
}

func (x *DatasetGroup) SetCodeName(v string) {
	x.xxx_hidden_CodeName = v
}

func (x *DatasetGroup) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *DatasetGroup) SetIcon(v string) {
	x.xxx_hidden_Icon = v
}

func (x *DatasetGroup) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *DatasetGroup) HasParentId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ParentId != nil
}

func (x *DatasetGroup) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *DatasetGroup) ClearParentId() {
	x.xxx_hidden_ParentId = nil
}

type DatasetGroup_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// group id
	Id *v1.ID
	// optional parent group id
	ParentId *v1.ID
	// normalized snake case name of the dataset group, which can be used as a valid code identifier
	CodeName string
	// display name of the group
	Name string
	// optional icon of the group
	Icon string
}

func (b0 DatasetGroup_builder) Build() *DatasetGroup {
	m0 := &DatasetGroup{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_ParentId = b.ParentId
	x.xxx_hidden_CodeName = b.CodeName
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Icon = b.Icon
	return m0
}

var File_datasets_v1_core_proto protoreflect.FileDescriptor

const file_datasets_v1_core_proto_rawDesc = "" +
	"\n" +
	"\x16datasets/v1/core.proto\x12\vdatasets.v1\x1a\x1edatasets/v1/dataset_type.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x13tilebox/v1/id.proto\x1a\x16tilebox/v1/query.proto\"]\n" +
	"\x10LegacyPagination\x12\x1b\n" +
	"\x05limit\x18\x01 \x01(\x03B\x05\xaa\x01\x02\b\x01R\x05limit\x12,\n" +
	"\x0estarting_after\x18\x02 \x01(\tB\x05\xaa\x01\x02\b\x01R\rstartingAfter\"6\n" +
	"\x03Any\x12\x19\n" +
	"\btype_url\x18\x01 \x01(\tR\atypeUrl\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\">\n" +
	"\vRepeatedAny\x12\x19\n" +
	"\btype_url\x18\x01 \x01(\tR\atypeUrl\x12\x14\n" +
	"\x05value\x18\x02 \x03(\fR\x05value\"\xa8\x01\n" +
	"\x11DatapointMetadata\x129\n" +
	"\n" +
	"event_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x12A\n" +
	"\x0eingestion_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ringestionTime\x12\x15\n" +
	"\x02id\x18\x03 \x01(\tB\x05\xaa\x01\x02\b\x01R\x02id\"\xb4\x01\n" +
	"\rDatapointPage\x122\n" +
	"\x04meta\x18\x01 \x03(\v2\x1e.datasets.v1.DatapointMetadataR\x04meta\x12,\n" +
	"\x04data\x18\x02 \x01(\v2\x18.datasets.v1.RepeatedAnyR\x04data\x12A\n" +
	"\tnext_page\x18\x03 \x01(\v2\x1d.datasets.v1.LegacyPaginationB\x05\xaa\x01\x02\b\x01R\bnextPage\"e\n" +
	"\tDatapoint\x122\n" +
	"\x04meta\x18\x01 \x01(\v2\x1e.datasets.v1.DatapointMetadataR\x04meta\x12$\n" +
	"\x04data\x18\x02 \x01(\v2\x10.datasets.v1.AnyR\x04data\"]\n" +
	"\n" +
	"Collection\x12\x1b\n" +
	"\tlegacy_id\x18\x01 \x01(\tR\blegacyId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1e\n" +
	"\x02id\x18\x03 \x01(\v2\x0e.tilebox.v1.IDR\x02id\"\xab\x01\n" +
	"\x0eCollectionInfo\x127\n" +
	"\n" +
	"collection\x18\x01 \x01(\v2\x17.datasets.v1.CollectionR\n" +
	"collection\x12C\n" +
	"\favailability\x18\x02 \x01(\v2\x18.tilebox.v1.TimeIntervalB\x05\xaa\x01\x02\b\x01R\favailability\x12\x1b\n" +
	"\x05count\x18\x03 \x01(\x04B\x05\xaa\x01\x02\b\x01R\x05count\"B\n" +
	"\x0fCollectionInfos\x12/\n" +
	"\x04data\x18\x01 \x03(\v2\x1b.datasets.v1.CollectionInfoR\x04data\"\xb9\x03\n" +
	"\aDataset\x12\x1e\n" +
	"\x02id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x02id\x12)\n" +
	"\bgroup_id\x18\x02 \x01(\v2\x0e.tilebox.v1.IDR\agroupId\x12.\n" +
	"\x04type\x18\x03 \x01(\v2\x1a.datasets.v1.AnnotatedTypeR\x04type\x12\x1b\n" +
	"\tcode_name\x18\x04 \x01(\tR\bcodeName\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x18\n" +
	"\asummary\x18\x06 \x01(\tR\asummary\x12\x12\n" +
	"\x04icon\x18\a \x01(\tR\x04icon\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\x12@\n" +
	"\vpermissions\x18\n" +
	" \x03(\x0e2\x1e.datasets.v1.DatasetPermissionR\vpermissions\x127\n" +
	"\n" +
	"visibility\x18\v \x01(\x0e2\x17.datasets.v1.VisibilityR\n" +
	"visibility\x12\x12\n" +
	"\x04slug\x18\f \x01(\tR\x04slug\x12#\n" +
	"\rtype_editable\x18\r \x01(\bR\ftypeEditable\"\xa0\x01\n" +
	"\fDatasetGroup\x12\x1e\n" +
	"\x02id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x02id\x12+\n" +
	"\tparent_id\x18\x02 \x01(\v2\x0e.tilebox.v1.IDR\bparentId\x12\x1b\n" +
	"\tcode_name\x18\x03 \x01(\tR\bcodeName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x05 \x01(\tR\x04icon*\x9b\x01\n" +
	"\x11DatasetPermission\x12\"\n" +
	"\x1eDATASET_PERMISSION_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eDATASET_PERMISSION_ACCESS_DATA\x10\x01\x12!\n" +
	"\x1dDATASET_PERMISSION_WRITE_DATA\x10\x02\x12\x1b\n" +
	"\x17DATASET_PERMISSION_EDIT\x10\x03*v\n" +
	"\n" +
	"Visibility\x12\x1a\n" +
	"\x16VISIBILITY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12VISIBILITY_PRIVATE\x10\x01\x12\x1d\n" +
	"\x19VISIBILITY_SHARED_WITH_ME\x10\x02\x12\x15\n" +
	"\x11VISIBILITY_PUBLIC\x10\x03B\xad\x01\n" +
	"\x0fcom.datasets.v1B\tCoreProtoP\x01Z=github.com/tilebox/tilebox-go/protogen/datasets/v1;datasetsv1\xa2\x02\x03DXX\xaa\x02\vDatasets.V1\xca\x02\vDatasets\\V1\xe2\x02\x17Datasets\\V1\\GPBMetadata\xea\x02\fDatasets::V1\x92\x03\x02\b\x02b\beditionsp\xe8\a"

var file_datasets_v1_core_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_datasets_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_datasets_v1_core_proto_goTypes = []any{
	(DatasetPermission)(0),        // 0: datasets.v1.DatasetPermission
	(Visibility)(0),               // 1: datasets.v1.Visibility
	(*LegacyPagination)(nil),      // 2: datasets.v1.LegacyPagination
	(*Any)(nil),                   // 3: datasets.v1.Any
	(*RepeatedAny)(nil),           // 4: datasets.v1.RepeatedAny
	(*DatapointMetadata)(nil),     // 5: datasets.v1.DatapointMetadata
	(*DatapointPage)(nil),         // 6: datasets.v1.DatapointPage
	(*Datapoint)(nil),             // 7: datasets.v1.Datapoint
	(*Collection)(nil),            // 8: datasets.v1.Collection
	(*CollectionInfo)(nil),        // 9: datasets.v1.CollectionInfo
	(*CollectionInfos)(nil),       // 10: datasets.v1.CollectionInfos
	(*Dataset)(nil),               // 11: datasets.v1.Dataset
	(*DatasetGroup)(nil),          // 12: datasets.v1.DatasetGroup
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*v1.ID)(nil),                 // 14: tilebox.v1.ID
	(*v1.TimeInterval)(nil),       // 15: tilebox.v1.TimeInterval
	(*AnnotatedType)(nil),         // 16: datasets.v1.AnnotatedType
}
var file_datasets_v1_core_proto_depIdxs = []int32{
	13, // 0: datasets.v1.DatapointMetadata.event_time:type_name -> google.protobuf.Timestamp
	13, // 1: datasets.v1.DatapointMetadata.ingestion_time:type_name -> google.protobuf.Timestamp
	5,  // 2: datasets.v1.DatapointPage.meta:type_name -> datasets.v1.DatapointMetadata
	4,  // 3: datasets.v1.DatapointPage.data:type_name -> datasets.v1.RepeatedAny
	2,  // 4: datasets.v1.DatapointPage.next_page:type_name -> datasets.v1.LegacyPagination
	5,  // 5: datasets.v1.Datapoint.meta:type_name -> datasets.v1.DatapointMetadata
	3,  // 6: datasets.v1.Datapoint.data:type_name -> datasets.v1.Any
	14, // 7: datasets.v1.Collection.id:type_name -> tilebox.v1.ID
	8,  // 8: datasets.v1.CollectionInfo.collection:type_name -> datasets.v1.Collection
	15, // 9: datasets.v1.CollectionInfo.availability:type_name -> tilebox.v1.TimeInterval
	9,  // 10: datasets.v1.CollectionInfos.data:type_name -> datasets.v1.CollectionInfo
	14, // 11: datasets.v1.Dataset.id:type_name -> tilebox.v1.ID
	14, // 12: datasets.v1.Dataset.group_id:type_name -> tilebox.v1.ID
	16, // 13: datasets.v1.Dataset.type:type_name -> datasets.v1.AnnotatedType
	0,  // 14: datasets.v1.Dataset.permissions:type_name -> datasets.v1.DatasetPermission
	1,  // 15: datasets.v1.Dataset.visibility:type_name -> datasets.v1.Visibility
	14, // 16: datasets.v1.DatasetGroup.id:type_name -> tilebox.v1.ID
	14, // 17: datasets.v1.DatasetGroup.parent_id:type_name -> tilebox.v1.ID
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_datasets_v1_core_proto_init() }
func file_datasets_v1_core_proto_init() {
	if File_datasets_v1_core_proto != nil {
		return
	}
	file_datasets_v1_dataset_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datasets_v1_core_proto_rawDesc), len(file_datasets_v1_core_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datasets_v1_core_proto_goTypes,
		DependencyIndexes: file_datasets_v1_core_proto_depIdxs,
		EnumInfos:         file_datasets_v1_core_proto_enumTypes,
		MessageInfos:      file_datasets_v1_core_proto_msgTypes,
	}.Build()
	File_datasets_v1_core_proto = out.File
	file_datasets_v1_core_proto_goTypes = nil
	file_datasets_v1_core_proto_depIdxs = nil
}
