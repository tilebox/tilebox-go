// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: datasets/v1/datasets.proto

package datasetsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/protogen/datasets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatasetServiceName is the fully-qualified name of the DatasetService service.
	DatasetServiceName = "datasets.v1.DatasetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatasetServiceCreateDatasetProcedure is the fully-qualified name of the DatasetService's
	// CreateDataset RPC.
	DatasetServiceCreateDatasetProcedure = "/datasets.v1.DatasetService/CreateDataset"
	// DatasetServiceGetDatasetProcedure is the fully-qualified name of the DatasetService's GetDataset
	// RPC.
	DatasetServiceGetDatasetProcedure = "/datasets.v1.DatasetService/GetDataset"
	// DatasetServiceUpdateDatasetProcedure is the fully-qualified name of the DatasetService's
	// UpdateDataset RPC.
	DatasetServiceUpdateDatasetProcedure = "/datasets.v1.DatasetService/UpdateDataset"
	// DatasetServiceUpdateDatasetDescriptionProcedure is the fully-qualified name of the
	// DatasetService's UpdateDatasetDescription RPC.
	DatasetServiceUpdateDatasetDescriptionProcedure = "/datasets.v1.DatasetService/UpdateDatasetDescription"
	// DatasetServiceDeleteDatasetProcedure is the fully-qualified name of the DatasetService's
	// DeleteDataset RPC.
	DatasetServiceDeleteDatasetProcedure = "/datasets.v1.DatasetService/DeleteDataset"
	// DatasetServiceListDatasetsProcedure is the fully-qualified name of the DatasetService's
	// ListDatasets RPC.
	DatasetServiceListDatasetsProcedure = "/datasets.v1.DatasetService/ListDatasets"
)

// DatasetServiceClient is a client for the datasets.v1.DatasetService service.
type DatasetServiceClient interface {
	CreateDataset(context.Context, *connect.Request[v1.CreateDatasetRequest]) (*connect.Response[v1.Dataset], error)
	GetDataset(context.Context, *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.Dataset], error)
	UpdateDataset(context.Context, *connect.Request[v1.UpdateDatasetRequest]) (*connect.Response[v1.Dataset], error)
	UpdateDatasetDescription(context.Context, *connect.Request[v1.UpdateDatasetDescriptionRequest]) (*connect.Response[v1.Dataset], error)
	DeleteDataset(context.Context, *connect.Request[v1.DeleteDatasetRequest]) (*connect.Response[v1.DeleteDatasetResponse], error)
	ListDatasets(context.Context, *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error)
}

// NewDatasetServiceClient constructs a client for the datasets.v1.DatasetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatasetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatasetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	datasetServiceMethods := v1.File_datasets_v1_datasets_proto.Services().ByName("DatasetService").Methods()
	return &datasetServiceClient{
		createDataset: connect.NewClient[v1.CreateDatasetRequest, v1.Dataset](
			httpClient,
			baseURL+DatasetServiceCreateDatasetProcedure,
			connect.WithSchema(datasetServiceMethods.ByName("CreateDataset")),
			connect.WithClientOptions(opts...),
		),
		getDataset: connect.NewClient[v1.GetDatasetRequest, v1.Dataset](
			httpClient,
			baseURL+DatasetServiceGetDatasetProcedure,
			connect.WithSchema(datasetServiceMethods.ByName("GetDataset")),
			connect.WithClientOptions(opts...),
		),
		updateDataset: connect.NewClient[v1.UpdateDatasetRequest, v1.Dataset](
			httpClient,
			baseURL+DatasetServiceUpdateDatasetProcedure,
			connect.WithSchema(datasetServiceMethods.ByName("UpdateDataset")),
			connect.WithClientOptions(opts...),
		),
		updateDatasetDescription: connect.NewClient[v1.UpdateDatasetDescriptionRequest, v1.Dataset](
			httpClient,
			baseURL+DatasetServiceUpdateDatasetDescriptionProcedure,
			connect.WithSchema(datasetServiceMethods.ByName("UpdateDatasetDescription")),
			connect.WithClientOptions(opts...),
		),
		deleteDataset: connect.NewClient[v1.DeleteDatasetRequest, v1.DeleteDatasetResponse](
			httpClient,
			baseURL+DatasetServiceDeleteDatasetProcedure,
			connect.WithSchema(datasetServiceMethods.ByName("DeleteDataset")),
			connect.WithClientOptions(opts...),
		),
		listDatasets: connect.NewClient[v1.ListDatasetsRequest, v1.ListDatasetsResponse](
			httpClient,
			baseURL+DatasetServiceListDatasetsProcedure,
			connect.WithSchema(datasetServiceMethods.ByName("ListDatasets")),
			connect.WithClientOptions(opts...),
		),
	}
}

// datasetServiceClient implements DatasetServiceClient.
type datasetServiceClient struct {
	createDataset            *connect.Client[v1.CreateDatasetRequest, v1.Dataset]
	getDataset               *connect.Client[v1.GetDatasetRequest, v1.Dataset]
	updateDataset            *connect.Client[v1.UpdateDatasetRequest, v1.Dataset]
	updateDatasetDescription *connect.Client[v1.UpdateDatasetDescriptionRequest, v1.Dataset]
	deleteDataset            *connect.Client[v1.DeleteDatasetRequest, v1.DeleteDatasetResponse]
	listDatasets             *connect.Client[v1.ListDatasetsRequest, v1.ListDatasetsResponse]
}

// CreateDataset calls datasets.v1.DatasetService.CreateDataset.
func (c *datasetServiceClient) CreateDataset(ctx context.Context, req *connect.Request[v1.CreateDatasetRequest]) (*connect.Response[v1.Dataset], error) {
	return c.createDataset.CallUnary(ctx, req)
}

// GetDataset calls datasets.v1.DatasetService.GetDataset.
func (c *datasetServiceClient) GetDataset(ctx context.Context, req *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.Dataset], error) {
	return c.getDataset.CallUnary(ctx, req)
}

// UpdateDataset calls datasets.v1.DatasetService.UpdateDataset.
func (c *datasetServiceClient) UpdateDataset(ctx context.Context, req *connect.Request[v1.UpdateDatasetRequest]) (*connect.Response[v1.Dataset], error) {
	return c.updateDataset.CallUnary(ctx, req)
}

// UpdateDatasetDescription calls datasets.v1.DatasetService.UpdateDatasetDescription.
func (c *datasetServiceClient) UpdateDatasetDescription(ctx context.Context, req *connect.Request[v1.UpdateDatasetDescriptionRequest]) (*connect.Response[v1.Dataset], error) {
	return c.updateDatasetDescription.CallUnary(ctx, req)
}

// DeleteDataset calls datasets.v1.DatasetService.DeleteDataset.
func (c *datasetServiceClient) DeleteDataset(ctx context.Context, req *connect.Request[v1.DeleteDatasetRequest]) (*connect.Response[v1.DeleteDatasetResponse], error) {
	return c.deleteDataset.CallUnary(ctx, req)
}

// ListDatasets calls datasets.v1.DatasetService.ListDatasets.
func (c *datasetServiceClient) ListDatasets(ctx context.Context, req *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error) {
	return c.listDatasets.CallUnary(ctx, req)
}

// DatasetServiceHandler is an implementation of the datasets.v1.DatasetService service.
type DatasetServiceHandler interface {
	CreateDataset(context.Context, *connect.Request[v1.CreateDatasetRequest]) (*connect.Response[v1.Dataset], error)
	GetDataset(context.Context, *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.Dataset], error)
	UpdateDataset(context.Context, *connect.Request[v1.UpdateDatasetRequest]) (*connect.Response[v1.Dataset], error)
	UpdateDatasetDescription(context.Context, *connect.Request[v1.UpdateDatasetDescriptionRequest]) (*connect.Response[v1.Dataset], error)
	DeleteDataset(context.Context, *connect.Request[v1.DeleteDatasetRequest]) (*connect.Response[v1.DeleteDatasetResponse], error)
	ListDatasets(context.Context, *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error)
}

// NewDatasetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatasetServiceHandler(svc DatasetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	datasetServiceMethods := v1.File_datasets_v1_datasets_proto.Services().ByName("DatasetService").Methods()
	datasetServiceCreateDatasetHandler := connect.NewUnaryHandler(
		DatasetServiceCreateDatasetProcedure,
		svc.CreateDataset,
		connect.WithSchema(datasetServiceMethods.ByName("CreateDataset")),
		connect.WithHandlerOptions(opts...),
	)
	datasetServiceGetDatasetHandler := connect.NewUnaryHandler(
		DatasetServiceGetDatasetProcedure,
		svc.GetDataset,
		connect.WithSchema(datasetServiceMethods.ByName("GetDataset")),
		connect.WithHandlerOptions(opts...),
	)
	datasetServiceUpdateDatasetHandler := connect.NewUnaryHandler(
		DatasetServiceUpdateDatasetProcedure,
		svc.UpdateDataset,
		connect.WithSchema(datasetServiceMethods.ByName("UpdateDataset")),
		connect.WithHandlerOptions(opts...),
	)
	datasetServiceUpdateDatasetDescriptionHandler := connect.NewUnaryHandler(
		DatasetServiceUpdateDatasetDescriptionProcedure,
		svc.UpdateDatasetDescription,
		connect.WithSchema(datasetServiceMethods.ByName("UpdateDatasetDescription")),
		connect.WithHandlerOptions(opts...),
	)
	datasetServiceDeleteDatasetHandler := connect.NewUnaryHandler(
		DatasetServiceDeleteDatasetProcedure,
		svc.DeleteDataset,
		connect.WithSchema(datasetServiceMethods.ByName("DeleteDataset")),
		connect.WithHandlerOptions(opts...),
	)
	datasetServiceListDatasetsHandler := connect.NewUnaryHandler(
		DatasetServiceListDatasetsProcedure,
		svc.ListDatasets,
		connect.WithSchema(datasetServiceMethods.ByName("ListDatasets")),
		connect.WithHandlerOptions(opts...),
	)
	return "/datasets.v1.DatasetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatasetServiceCreateDatasetProcedure:
			datasetServiceCreateDatasetHandler.ServeHTTP(w, r)
		case DatasetServiceGetDatasetProcedure:
			datasetServiceGetDatasetHandler.ServeHTTP(w, r)
		case DatasetServiceUpdateDatasetProcedure:
			datasetServiceUpdateDatasetHandler.ServeHTTP(w, r)
		case DatasetServiceUpdateDatasetDescriptionProcedure:
			datasetServiceUpdateDatasetDescriptionHandler.ServeHTTP(w, r)
		case DatasetServiceDeleteDatasetProcedure:
			datasetServiceDeleteDatasetHandler.ServeHTTP(w, r)
		case DatasetServiceListDatasetsProcedure:
			datasetServiceListDatasetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatasetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatasetServiceHandler struct{}

func (UnimplementedDatasetServiceHandler) CreateDataset(context.Context, *connect.Request[v1.CreateDatasetRequest]) (*connect.Response[v1.Dataset], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DatasetService.CreateDataset is not implemented"))
}

func (UnimplementedDatasetServiceHandler) GetDataset(context.Context, *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.Dataset], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DatasetService.GetDataset is not implemented"))
}

func (UnimplementedDatasetServiceHandler) UpdateDataset(context.Context, *connect.Request[v1.UpdateDatasetRequest]) (*connect.Response[v1.Dataset], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DatasetService.UpdateDataset is not implemented"))
}

func (UnimplementedDatasetServiceHandler) UpdateDatasetDescription(context.Context, *connect.Request[v1.UpdateDatasetDescriptionRequest]) (*connect.Response[v1.Dataset], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DatasetService.UpdateDatasetDescription is not implemented"))
}

func (UnimplementedDatasetServiceHandler) DeleteDataset(context.Context, *connect.Request[v1.DeleteDatasetRequest]) (*connect.Response[v1.DeleteDatasetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DatasetService.DeleteDataset is not implemented"))
}

func (UnimplementedDatasetServiceHandler) ListDatasets(context.Context, *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DatasetService.ListDatasets is not implemented"))
}
