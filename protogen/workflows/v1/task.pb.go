// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: workflows/v1/task.proto

package workflowsv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/tilebox/tilebox-go/protogen/tilebox/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NextTaskRequest is the request for requesting the next task to run and marking a task as computed.
type NextTaskRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ComputedTask  *ComputedTask          `protobuf:"bytes,1,opt,name=computed_task,json=computedTask"`
	xxx_hidden_NextTaskToRun *NextTaskToRun         `protobuf:"bytes,2,opt,name=next_task_to_run,json=nextTaskToRun"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NextTaskRequest) Reset() {
	*x = NextTaskRequest{}
	mi := &file_workflows_v1_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTaskRequest) ProtoMessage() {}

func (x *NextTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NextTaskRequest) GetComputedTask() *ComputedTask {
	if x != nil {
		return x.xxx_hidden_ComputedTask
	}
	return nil
}

func (x *NextTaskRequest) GetNextTaskToRun() *NextTaskToRun {
	if x != nil {
		return x.xxx_hidden_NextTaskToRun
	}
	return nil
}

func (x *NextTaskRequest) SetComputedTask(v *ComputedTask) {
	x.xxx_hidden_ComputedTask = v
}

func (x *NextTaskRequest) SetNextTaskToRun(v *NextTaskToRun) {
	x.xxx_hidden_NextTaskToRun = v
}

func (x *NextTaskRequest) HasComputedTask() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ComputedTask != nil
}

func (x *NextTaskRequest) HasNextTaskToRun() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextTaskToRun != nil
}

func (x *NextTaskRequest) ClearComputedTask() {
	x.xxx_hidden_ComputedTask = nil
}

func (x *NextTaskRequest) ClearNextTaskToRun() {
	x.xxx_hidden_NextTaskToRun = nil
}

type NextTaskRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The task that has been computed. If not set, the next task will
	ComputedTask *ComputedTask
	// The capabilities of the task runner, and therefore the potential tasks that can be run by that task runner.
	NextTaskToRun *NextTaskToRun
}

func (b0 NextTaskRequest_builder) Build() *NextTaskRequest {
	m0 := &NextTaskRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ComputedTask = b.ComputedTask
	x.xxx_hidden_NextTaskToRun = b.NextTaskToRun
	return m0
}

// NextTaskToRun is a message specifying the capabilities of the task runner, and therefore the potential
// tasks that can be run by that task runner.
type NextTaskToRun struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ClusterSlug string                 `protobuf:"bytes,1,opt,name=cluster_slug,json=clusterSlug"`
	xxx_hidden_Identifiers *[]*TaskIdentifier     `protobuf:"bytes,2,rep,name=identifiers"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NextTaskToRun) Reset() {
	*x = NextTaskToRun{}
	mi := &file_workflows_v1_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextTaskToRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTaskToRun) ProtoMessage() {}

func (x *NextTaskToRun) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NextTaskToRun) GetClusterSlug() string {
	if x != nil {
		return x.xxx_hidden_ClusterSlug
	}
	return ""
}

func (x *NextTaskToRun) GetIdentifiers() []*TaskIdentifier {
	if x != nil {
		if x.xxx_hidden_Identifiers != nil {
			return *x.xxx_hidden_Identifiers
		}
	}
	return nil
}

func (x *NextTaskToRun) SetClusterSlug(v string) {
	x.xxx_hidden_ClusterSlug = v
}

func (x *NextTaskToRun) SetIdentifiers(v []*TaskIdentifier) {
	x.xxx_hidden_Identifiers = &v
}

type NextTaskToRun_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The cluster that this task runner is running on.
	ClusterSlug string
	// The task identifiers that this task runner can run.
	Identifiers []*TaskIdentifier
}

func (b0 NextTaskToRun_builder) Build() *NextTaskToRun {
	m0 := &NextTaskToRun{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ClusterSlug = b.ClusterSlug
	x.xxx_hidden_Identifiers = &b.Identifiers
	return m0
}

// ComputedTask is a message specifying a task that has been computed by the task runner.
type ComputedTask struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id              *v1.ID                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Display         string                 `protobuf:"bytes,2,opt,name=display"`
	xxx_hidden_SubTasks        *[]*TaskSubmission     `protobuf:"bytes,3,rep,name=sub_tasks,json=subTasks"`
	xxx_hidden_ProgressUpdates *[]*Progress           `protobuf:"bytes,4,rep,name=progress_updates,json=progressUpdates"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ComputedTask) Reset() {
	*x = ComputedTask{}
	mi := &file_workflows_v1_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComputedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedTask) ProtoMessage() {}

func (x *ComputedTask) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ComputedTask) GetId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *ComputedTask) GetDisplay() string {
	if x != nil {
		return x.xxx_hidden_Display
	}
	return ""
}

func (x *ComputedTask) GetSubTasks() []*TaskSubmission {
	if x != nil {
		if x.xxx_hidden_SubTasks != nil {
			return *x.xxx_hidden_SubTasks
		}
	}
	return nil
}

func (x *ComputedTask) GetProgressUpdates() []*Progress {
	if x != nil {
		if x.xxx_hidden_ProgressUpdates != nil {
			return *x.xxx_hidden_ProgressUpdates
		}
	}
	return nil
}

func (x *ComputedTask) SetId(v *v1.ID) {
	x.xxx_hidden_Id = v
}

func (x *ComputedTask) SetDisplay(v string) {
	x.xxx_hidden_Display = v
}

func (x *ComputedTask) SetSubTasks(v []*TaskSubmission) {
	x.xxx_hidden_SubTasks = &v
}

func (x *ComputedTask) SetProgressUpdates(v []*Progress) {
	x.xxx_hidden_ProgressUpdates = &v
}

func (x *ComputedTask) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *ComputedTask) ClearId() {
	x.xxx_hidden_Id = nil
}

type ComputedTask_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The id of the task that has been computed.
	Id *v1.ID
	// A display name for the task that has been computed for visualization purposes.
	// If not set, the display message specified upon task submission will be kept.
	Display string
	// A list of sub-tasks that the just computed task spawned.
	SubTasks []*TaskSubmission
	// A list of progress updates that the computed task wants to report.
	ProgressUpdates []*Progress
}

func (b0 ComputedTask_builder) Build() *ComputedTask {
	m0 := &ComputedTask{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Display = b.Display
	x.xxx_hidden_SubTasks = &b.SubTasks
	x.xxx_hidden_ProgressUpdates = &b.ProgressUpdates
	return m0
}

// IdlingResponse is set in the response of a NextTaskRequest if no task was returned, indicating that the requesting
// task runner should idle.
type IdlingResponse struct {
	state                              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SuggestedIdlingDuration *durationpb.Duration   `protobuf:"bytes,1,opt,name=suggested_idling_duration,json=suggestedIdlingDuration"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *IdlingResponse) Reset() {
	*x = IdlingResponse{}
	mi := &file_workflows_v1_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdlingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdlingResponse) ProtoMessage() {}

func (x *IdlingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IdlingResponse) GetSuggestedIdlingDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_SuggestedIdlingDuration
	}
	return nil
}

func (x *IdlingResponse) SetSuggestedIdlingDuration(v *durationpb.Duration) {
	x.xxx_hidden_SuggestedIdlingDuration = v
}

func (x *IdlingResponse) HasSuggestedIdlingDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SuggestedIdlingDuration != nil
}

func (x *IdlingResponse) ClearSuggestedIdlingDuration() {
	x.xxx_hidden_SuggestedIdlingDuration = nil
}

type IdlingResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The suggested duration the task runner should idle for before sending another request for a task.
	SuggestedIdlingDuration *durationpb.Duration
}

func (b0 IdlingResponse_builder) Build() *IdlingResponse {
	m0 := &IdlingResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SuggestedIdlingDuration = b.SuggestedIdlingDuration
	return m0
}

// NextTaskResponse is the response to the NextTask request.
// If the NextTask request contained a request for a task, the response will either contain a next_task, or an idling
// response, but not both.
// If the NextTask request did not contain a request for a next task (indicating the the runner is about to shut down),
// the response will be empty.
type NextTaskResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NextTask *Task                  `protobuf:"bytes,1,opt,name=next_task,json=nextTask"`
	xxx_hidden_Idling   *IdlingResponse        `protobuf:"bytes,2,opt,name=idling"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NextTaskResponse) Reset() {
	*x = NextTaskResponse{}
	mi := &file_workflows_v1_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTaskResponse) ProtoMessage() {}

func (x *NextTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NextTaskResponse) GetNextTask() *Task {
	if x != nil {
		return x.xxx_hidden_NextTask
	}
	return nil
}

func (x *NextTaskResponse) GetIdling() *IdlingResponse {
	if x != nil {
		return x.xxx_hidden_Idling
	}
	return nil
}

func (x *NextTaskResponse) SetNextTask(v *Task) {
	x.xxx_hidden_NextTask = v
}

func (x *NextTaskResponse) SetIdling(v *IdlingResponse) {
	x.xxx_hidden_Idling = v
}

func (x *NextTaskResponse) HasNextTask() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextTask != nil
}

func (x *NextTaskResponse) HasIdling() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Idling != nil
}

func (x *NextTaskResponse) ClearNextTask() {
	x.xxx_hidden_NextTask = nil
}

func (x *NextTaskResponse) ClearIdling() {
	x.xxx_hidden_Idling = nil
}

type NextTaskResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NextTask *Task
	Idling   *IdlingResponse
}

func (b0 NextTaskResponse_builder) Build() *NextTaskResponse {
	m0 := &NextTaskResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NextTask = b.NextTask
	x.xxx_hidden_Idling = b.Idling
	return m0
}

// TaskFailedRequest is the request for marking a task as failed.
type TaskFailedRequest struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TaskId          *v1.ID                 `protobuf:"bytes,1,opt,name=task_id,json=taskId"`
	xxx_hidden_Display         string                 `protobuf:"bytes,2,opt,name=display"`
	xxx_hidden_CancelJob       bool                   `protobuf:"varint,3,opt,name=cancel_job,json=cancelJob"`
	xxx_hidden_ProgressUpdates *[]*Progress           `protobuf:"bytes,4,rep,name=progress_updates,json=progressUpdates"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *TaskFailedRequest) Reset() {
	*x = TaskFailedRequest{}
	mi := &file_workflows_v1_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedRequest) ProtoMessage() {}

func (x *TaskFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskFailedRequest) GetTaskId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return nil
}

func (x *TaskFailedRequest) GetDisplay() string {
	if x != nil {
		return x.xxx_hidden_Display
	}
	return ""
}

func (x *TaskFailedRequest) GetCancelJob() bool {
	if x != nil {
		return x.xxx_hidden_CancelJob
	}
	return false
}

func (x *TaskFailedRequest) GetProgressUpdates() []*Progress {
	if x != nil {
		if x.xxx_hidden_ProgressUpdates != nil {
			return *x.xxx_hidden_ProgressUpdates
		}
	}
	return nil
}

func (x *TaskFailedRequest) SetTaskId(v *v1.ID) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskFailedRequest) SetDisplay(v string) {
	x.xxx_hidden_Display = v
}

func (x *TaskFailedRequest) SetCancelJob(v bool) {
	x.xxx_hidden_CancelJob = v
}

func (x *TaskFailedRequest) SetProgressUpdates(v []*Progress) {
	x.xxx_hidden_ProgressUpdates = &v
}

func (x *TaskFailedRequest) HasTaskId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TaskId != nil
}

func (x *TaskFailedRequest) ClearTaskId() {
	x.xxx_hidden_TaskId = nil
}

type TaskFailedRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The id of the task that has failed.
	TaskId *v1.ID
	// A display name for the task that has failed for visualization purposes.
	Display string
	// Whether to cancel the job that the task belongs to.
	CancelJob bool
	// A list of progress updates that the failed task wants to report. Even if a task fails, it could
	// still have made some progress before failing, and we want to reflect that progress.
	// Since progress updates are idempotent, retrying the task and getting the same progress update again
	// is not an issue.
	ProgressUpdates []*Progress
}

func (b0 TaskFailedRequest_builder) Build() *TaskFailedRequest {
	m0 := &TaskFailedRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_Display = b.Display
	x.xxx_hidden_CancelJob = b.CancelJob
	x.xxx_hidden_ProgressUpdates = &b.ProgressUpdates
	return m0
}

// TaskStateResponse is the response to the TaskFailed request,
// indicating the current state of the task marked as failed.
type TaskStateResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_State TaskState              `protobuf:"varint,1,opt,name=state,enum=workflows.v1.TaskState"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskStateResponse) Reset() {
	*x = TaskStateResponse{}
	mi := &file_workflows_v1_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStateResponse) ProtoMessage() {}

func (x *TaskStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskStateResponse) GetState() TaskState {
	if x != nil {
		return x.xxx_hidden_State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *TaskStateResponse) SetState(v TaskState) {
	x.xxx_hidden_State = v
}

type TaskStateResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	State TaskState
}

func (b0 TaskStateResponse_builder) Build() *TaskStateResponse {
	m0 := &TaskStateResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_State = b.State
	return m0
}

// TaskLease is a message specifying the new lease expiration time of a task.
type TaskLeaseRequest struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TaskId         *v1.ID                 `protobuf:"bytes,1,opt,name=task_id,json=taskId"`
	xxx_hidden_RequestedLease *durationpb.Duration   `protobuf:"bytes,2,opt,name=requested_lease,json=requestedLease"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TaskLeaseRequest) Reset() {
	*x = TaskLeaseRequest{}
	mi := &file_workflows_v1_task_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLeaseRequest) ProtoMessage() {}

func (x *TaskLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskLeaseRequest) GetTaskId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_TaskId
	}
	return nil
}

func (x *TaskLeaseRequest) GetRequestedLease() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_RequestedLease
	}
	return nil
}

func (x *TaskLeaseRequest) SetTaskId(v *v1.ID) {
	x.xxx_hidden_TaskId = v
}

func (x *TaskLeaseRequest) SetRequestedLease(v *durationpb.Duration) {
	x.xxx_hidden_RequestedLease = v
}

func (x *TaskLeaseRequest) HasTaskId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TaskId != nil
}

func (x *TaskLeaseRequest) HasRequestedLease() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RequestedLease != nil
}

func (x *TaskLeaseRequest) ClearTaskId() {
	x.xxx_hidden_TaskId = nil
}

func (x *TaskLeaseRequest) ClearRequestedLease() {
	x.xxx_hidden_RequestedLease = nil
}

type TaskLeaseRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TaskId         *v1.ID
	RequestedLease *durationpb.Duration
}

func (b0 TaskLeaseRequest_builder) Build() *TaskLeaseRequest {
	m0 := &TaskLeaseRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TaskId = b.TaskId
	x.xxx_hidden_RequestedLease = b.RequestedLease
	return m0
}

var File_workflows_v1_task_proto protoreflect.FileDescriptor

const file_workflows_v1_task_proto_rawDesc = "" +
	"\n" +
	"\x17workflows/v1/task.proto\x12\fworkflows.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x13tilebox/v1/id.proto\x1a\x17workflows/v1/core.proto\"\xa6\x01\n" +
	"\x0fNextTaskRequest\x12F\n" +
	"\rcomputed_task\x18\x01 \x01(\v2\x1a.workflows.v1.ComputedTaskB\x05\xaa\x01\x02\b\x01R\fcomputedTask\x12K\n" +
	"\x10next_task_to_run\x18\x02 \x01(\v2\x1b.workflows.v1.NextTaskToRunB\x05\xaa\x01\x02\b\x01R\rnextTaskToRun\"{\n" +
	"\rNextTaskToRun\x12*\n" +
	"\fcluster_slug\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vclusterSlug\x12>\n" +
	"\videntifiers\x18\x02 \x03(\v2\x1c.workflows.v1.TaskIdentifierR\videntifiers\"\xd8\x01\n" +
	"\fComputedTask\x12&\n" +
	"\x02id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x18\n" +
	"\adisplay\x18\x02 \x01(\tR\adisplay\x12C\n" +
	"\tsub_tasks\x18\x03 \x03(\v2\x1c.workflows.v1.TaskSubmissionB\b\xbaH\x05\x92\x01\x02\x10@R\bsubTasks\x12A\n" +
	"\x10progress_updates\x18\x04 \x03(\v2\x16.workflows.v1.ProgressR\x0fprogressUpdates\"g\n" +
	"\x0eIdlingResponse\x12U\n" +
	"\x19suggested_idling_duration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x17suggestedIdlingDuration\"\x93\x01\n" +
	"\x10NextTaskResponse\x12/\n" +
	"\tnext_task\x18\x01 \x01(\v2\x12.workflows.v1.TaskR\bnextTask\x124\n" +
	"\x06idling\x18\x02 \x01(\v2\x1c.workflows.v1.IdlingResponseR\x06idling:\x18\xbaH\x15\"\x13\n" +
	"\tnext_task\n" +
	"\x06idling\"\xc0\x01\n" +
	"\x11TaskFailedRequest\x12/\n" +
	"\atask_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDB\x06\xbaH\x03\xc8\x01\x01R\x06taskId\x12\x18\n" +
	"\adisplay\x18\x02 \x01(\tR\adisplay\x12\x1d\n" +
	"\n" +
	"cancel_job\x18\x03 \x01(\bR\tcancelJob\x12A\n" +
	"\x10progress_updates\x18\x04 \x03(\v2\x16.workflows.v1.ProgressR\x0fprogressUpdates\"B\n" +
	"\x11TaskStateResponse\x12-\n" +
	"\x05state\x18\x01 \x01(\x0e2\x17.workflows.v1.TaskStateR\x05state\"\x87\x01\n" +
	"\x10TaskLeaseRequest\x12/\n" +
	"\atask_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDB\x06\xbaH\x03\xc8\x01\x01R\x06taskId\x12B\n" +
	"\x0frequested_lease\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x0erequestedLease2\xf4\x01\n" +
	"\vTaskService\x12I\n" +
	"\bNextTask\x12\x1d.workflows.v1.NextTaskRequest\x1a\x1e.workflows.v1.NextTaskResponse\x12N\n" +
	"\n" +
	"TaskFailed\x12\x1f.workflows.v1.TaskFailedRequest\x1a\x1f.workflows.v1.TaskStateResponse\x12J\n" +
	"\x0fExtendTaskLease\x12\x1e.workflows.v1.TaskLeaseRequest\x1a\x17.workflows.v1.TaskLeaseB\xb4\x01\n" +
	"\x10com.workflows.v1B\tTaskProtoP\x01Z?github.com/tilebox/tilebox-go/protogen/workflows/v1;workflowsv1\xa2\x02\x03WXX\xaa\x02\fWorkflows.V1\xca\x02\fWorkflows\\V1\xe2\x02\x18Workflows\\V1\\GPBMetadata\xea\x02\rWorkflows::V1\x92\x03\x02\b\x02b\beditionsp\xe8\a"

var file_workflows_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_workflows_v1_task_proto_goTypes = []any{
	(*NextTaskRequest)(nil),     // 0: workflows.v1.NextTaskRequest
	(*NextTaskToRun)(nil),       // 1: workflows.v1.NextTaskToRun
	(*ComputedTask)(nil),        // 2: workflows.v1.ComputedTask
	(*IdlingResponse)(nil),      // 3: workflows.v1.IdlingResponse
	(*NextTaskResponse)(nil),    // 4: workflows.v1.NextTaskResponse
	(*TaskFailedRequest)(nil),   // 5: workflows.v1.TaskFailedRequest
	(*TaskStateResponse)(nil),   // 6: workflows.v1.TaskStateResponse
	(*TaskLeaseRequest)(nil),    // 7: workflows.v1.TaskLeaseRequest
	(*TaskIdentifier)(nil),      // 8: workflows.v1.TaskIdentifier
	(*v1.ID)(nil),               // 9: tilebox.v1.ID
	(*TaskSubmission)(nil),      // 10: workflows.v1.TaskSubmission
	(*Progress)(nil),            // 11: workflows.v1.Progress
	(*durationpb.Duration)(nil), // 12: google.protobuf.Duration
	(*Task)(nil),                // 13: workflows.v1.Task
	(TaskState)(0),              // 14: workflows.v1.TaskState
	(*TaskLease)(nil),           // 15: workflows.v1.TaskLease
}
var file_workflows_v1_task_proto_depIdxs = []int32{
	2,  // 0: workflows.v1.NextTaskRequest.computed_task:type_name -> workflows.v1.ComputedTask
	1,  // 1: workflows.v1.NextTaskRequest.next_task_to_run:type_name -> workflows.v1.NextTaskToRun
	8,  // 2: workflows.v1.NextTaskToRun.identifiers:type_name -> workflows.v1.TaskIdentifier
	9,  // 3: workflows.v1.ComputedTask.id:type_name -> tilebox.v1.ID
	10, // 4: workflows.v1.ComputedTask.sub_tasks:type_name -> workflows.v1.TaskSubmission
	11, // 5: workflows.v1.ComputedTask.progress_updates:type_name -> workflows.v1.Progress
	12, // 6: workflows.v1.IdlingResponse.suggested_idling_duration:type_name -> google.protobuf.Duration
	13, // 7: workflows.v1.NextTaskResponse.next_task:type_name -> workflows.v1.Task
	3,  // 8: workflows.v1.NextTaskResponse.idling:type_name -> workflows.v1.IdlingResponse
	9,  // 9: workflows.v1.TaskFailedRequest.task_id:type_name -> tilebox.v1.ID
	11, // 10: workflows.v1.TaskFailedRequest.progress_updates:type_name -> workflows.v1.Progress
	14, // 11: workflows.v1.TaskStateResponse.state:type_name -> workflows.v1.TaskState
	9,  // 12: workflows.v1.TaskLeaseRequest.task_id:type_name -> tilebox.v1.ID
	12, // 13: workflows.v1.TaskLeaseRequest.requested_lease:type_name -> google.protobuf.Duration
	0,  // 14: workflows.v1.TaskService.NextTask:input_type -> workflows.v1.NextTaskRequest
	5,  // 15: workflows.v1.TaskService.TaskFailed:input_type -> workflows.v1.TaskFailedRequest
	7,  // 16: workflows.v1.TaskService.ExtendTaskLease:input_type -> workflows.v1.TaskLeaseRequest
	4,  // 17: workflows.v1.TaskService.NextTask:output_type -> workflows.v1.NextTaskResponse
	6,  // 18: workflows.v1.TaskService.TaskFailed:output_type -> workflows.v1.TaskStateResponse
	15, // 19: workflows.v1.TaskService.ExtendTaskLease:output_type -> workflows.v1.TaskLease
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_workflows_v1_task_proto_init() }
func file_workflows_v1_task_proto_init() {
	if File_workflows_v1_task_proto != nil {
		return
	}
	file_workflows_v1_core_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_v1_task_proto_rawDesc), len(file_workflows_v1_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_v1_task_proto_goTypes,
		DependencyIndexes: file_workflows_v1_task_proto_depIdxs,
		MessageInfos:      file_workflows_v1_task_proto_msgTypes,
	}.Build()
	File_workflows_v1_task_proto = out.File
	file_workflows_v1_task_proto_goTypes = nil
	file_workflows_v1_task_proto_depIdxs = nil
}
