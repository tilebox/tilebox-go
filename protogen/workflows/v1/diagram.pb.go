// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: workflows/v1/diagram.proto

package workflowsv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to render a diagram
type RenderDiagramRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Diagram       string                 `protobuf:"bytes,1,opt,name=diagram"`
	xxx_hidden_RenderOptions *RenderOptions         `protobuf:"bytes,2,opt,name=render_options,json=renderOptions"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RenderDiagramRequest) Reset() {
	*x = RenderDiagramRequest{}
	mi := &file_workflows_v1_diagram_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderDiagramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderDiagramRequest) ProtoMessage() {}

func (x *RenderDiagramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_diagram_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RenderDiagramRequest) GetDiagram() string {
	if x != nil {
		return x.xxx_hidden_Diagram
	}
	return ""
}

func (x *RenderDiagramRequest) GetRenderOptions() *RenderOptions {
	if x != nil {
		return x.xxx_hidden_RenderOptions
	}
	return nil
}

func (x *RenderDiagramRequest) SetDiagram(v string) {
	x.xxx_hidden_Diagram = v
}

func (x *RenderDiagramRequest) SetRenderOptions(v *RenderOptions) {
	x.xxx_hidden_RenderOptions = v
}

func (x *RenderDiagramRequest) HasRenderOptions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RenderOptions != nil
}

func (x *RenderDiagramRequest) ClearRenderOptions() {
	x.xxx_hidden_RenderOptions = nil
}

type RenderDiagramRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The diagram graph in the D2 syntax
	Diagram string
	// The options for rendering the diagram
	RenderOptions *RenderOptions
}

func (b0 RenderDiagramRequest_builder) Build() *RenderDiagramRequest {
	m0 := &RenderDiagramRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Diagram = b.Diagram
	x.xxx_hidden_RenderOptions = b.RenderOptions
	return m0
}

// Options for rendering the diagram
type RenderOptions struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Layout      string                 `protobuf:"bytes,1,opt,name=layout"`
	xxx_hidden_ThemeId     int64                  `protobuf:"varint,2,opt,name=theme_id,json=themeId"`
	xxx_hidden_Sketchy     bool                   `protobuf:"varint,3,opt,name=sketchy"`
	xxx_hidden_Padding     int64                  `protobuf:"varint,4,opt,name=padding"`
	xxx_hidden_Direction   string                 `protobuf:"bytes,5,opt,name=direction"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RenderOptions) Reset() {
	*x = RenderOptions{}
	mi := &file_workflows_v1_diagram_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderOptions) ProtoMessage() {}

func (x *RenderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_diagram_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RenderOptions) GetLayout() string {
	if x != nil {
		return x.xxx_hidden_Layout
	}
	return ""
}

func (x *RenderOptions) GetThemeId() int64 {
	if x != nil {
		return x.xxx_hidden_ThemeId
	}
	return 0
}

func (x *RenderOptions) GetSketchy() bool {
	if x != nil {
		return x.xxx_hidden_Sketchy
	}
	return false
}

func (x *RenderOptions) GetPadding() int64 {
	if x != nil {
		return x.xxx_hidden_Padding
	}
	return 0
}

func (x *RenderOptions) GetDirection() string {
	if x != nil {
		return x.xxx_hidden_Direction
	}
	return ""
}

func (x *RenderOptions) SetLayout(v string) {
	x.xxx_hidden_Layout = v
}

func (x *RenderOptions) SetThemeId(v int64) {
	x.xxx_hidden_ThemeId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *RenderOptions) SetSketchy(v bool) {
	x.xxx_hidden_Sketchy = v
}

func (x *RenderOptions) SetPadding(v int64) {
	x.xxx_hidden_Padding = v
}

func (x *RenderOptions) SetDirection(v string) {
	x.xxx_hidden_Direction = v
}

func (x *RenderOptions) HasThemeId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RenderOptions) ClearThemeId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ThemeId = 0
}

type RenderOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The layout to use for rendering the diagram: https://d2lang.com/tour/layouts/.
	// "dagre" or "elk". Defaults to "dagre"
	Layout string
	// The D2 theme to use when rendering the diagram: https://d2lang.com/tour/themes/
	ThemeId *int64
	// Whether to render the diagram in a sketchy (hand-drawn) style
	Sketchy bool
	// The padding around the diagram
	Padding int64
	// Set explicitly the direction of the diagram: https://d2lang.com/tour/layouts/#direction.
	Direction string
}

func (b0 RenderOptions_builder) Build() *RenderOptions {
	m0 := &RenderOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Layout = b.Layout
	if b.ThemeId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_ThemeId = *b.ThemeId
	}
	x.xxx_hidden_Sketchy = b.Sketchy
	x.xxx_hidden_Padding = b.Padding
	x.xxx_hidden_Direction = b.Direction
	return m0
}

// A rendered diagram
type Diagram struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Svg []byte                 `protobuf:"bytes,1,opt,name=svg"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Diagram) Reset() {
	*x = Diagram{}
	mi := &file_workflows_v1_diagram_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagram) ProtoMessage() {}

func (x *Diagram) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_diagram_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Diagram) GetSvg() []byte {
	if x != nil {
		return x.xxx_hidden_Svg
	}
	return nil
}

func (x *Diagram) SetSvg(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Svg = v
}

type Diagram_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Svg []byte
}

func (b0 Diagram_builder) Build() *Diagram {
	m0 := &Diagram{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Svg = b.Svg
	return m0
}

var File_workflows_v1_diagram_proto protoreflect.FileDescriptor

const file_workflows_v1_diagram_proto_rawDesc = "" +
	"\n" +
	"\x1aworkflows/v1/diagram.proto\x12\fworkflows.v1\x1a\x1bbuf/validate/validate.proto\"t\n" +
	"\x14RenderDiagramRequest\x12\x18\n" +
	"\adiagram\x18\x01 \x01(\tR\adiagram\x12B\n" +
	"\x0erender_options\x18\x02 \x01(\v2\x1b.workflows.v1.RenderOptionsR\rrenderOptions\"\xcc\x01\n" +
	"\rRenderOptions\x12)\n" +
	"\x06layout\x18\x01 \x01(\tB\x11\xbaH\x0er\fR\x05dagreR\x03elkR\x06layout\x12 \n" +
	"\btheme_id\x18\x02 \x01(\x03B\x05\xaa\x01\x02\b\x01R\athemeId\x12\x18\n" +
	"\asketchy\x18\x03 \x01(\bR\asketchy\x12\x18\n" +
	"\apadding\x18\x04 \x01(\x03R\apadding\x12:\n" +
	"\tdirection\x18\x05 \x01(\tB\x1c\xbaH\x19r\x17R\x02upR\x04downR\x05rightR\x04leftR\tdirection\"\x1b\n" +
	"\aDiagram\x12\x10\n" +
	"\x03svg\x18\x01 \x01(\fR\x03svg2U\n" +
	"\x0eDiagramService\x12C\n" +
	"\x06Render\x12\".workflows.v1.RenderDiagramRequest\x1a\x15.workflows.v1.DiagramB\xb7\x01\n" +
	"\x10com.workflows.v1B\fDiagramProtoP\x01Z?github.com/tilebox/tilebox-go/protogen/workflows/v1;workflowsv1\xa2\x02\x03WXX\xaa\x02\fWorkflows.V1\xca\x02\fWorkflows\\V1\xe2\x02\x18Workflows\\V1\\GPBMetadata\xea\x02\rWorkflows::V1\x92\x03\x02\b\x02b\beditionsp\xe8\a"

var file_workflows_v1_diagram_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_workflows_v1_diagram_proto_goTypes = []any{
	(*RenderDiagramRequest)(nil), // 0: workflows.v1.RenderDiagramRequest
	(*RenderOptions)(nil),        // 1: workflows.v1.RenderOptions
	(*Diagram)(nil),              // 2: workflows.v1.Diagram
}
var file_workflows_v1_diagram_proto_depIdxs = []int32{
	1, // 0: workflows.v1.RenderDiagramRequest.render_options:type_name -> workflows.v1.RenderOptions
	0, // 1: workflows.v1.DiagramService.Render:input_type -> workflows.v1.RenderDiagramRequest
	2, // 2: workflows.v1.DiagramService.Render:output_type -> workflows.v1.Diagram
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_workflows_v1_diagram_proto_init() }
func file_workflows_v1_diagram_proto_init() {
	if File_workflows_v1_diagram_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_v1_diagram_proto_rawDesc), len(file_workflows_v1_diagram_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_v1_diagram_proto_goTypes,
		DependencyIndexes: file_workflows_v1_diagram_proto_depIdxs,
		MessageInfos:      file_workflows_v1_diagram_proto_msgTypes,
	}.Build()
	File_workflows_v1_diagram_proto = out.File
	file_workflows_v1_diagram_proto_goTypes = nil
	file_workflows_v1_diagram_proto_depIdxs = nil
}
