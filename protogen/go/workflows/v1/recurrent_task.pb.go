// The external API for managing recurrent tasks in the Workflows service.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: workflows/v1/recurrent_task.proto

package workflowsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StorageType specifies a kind of storage bucket that we support.
type StorageType int32

const (
	StorageType_STORAGE_TYPE_UNSPECIFIED StorageType = 0
	StorageType_STORAGE_TYPE_GCS         StorageType = 1 // Google Cloud Storage
	StorageType_STORAGE_TYPE_S3          StorageType = 2 // Amazon Web Services S3
	StorageType_STORAGE_TYPE_FS          StorageType = 3 // Local filesystem
)

// Enum value maps for StorageType.
var (
	StorageType_name = map[int32]string{
		0: "STORAGE_TYPE_UNSPECIFIED",
		1: "STORAGE_TYPE_GCS",
		2: "STORAGE_TYPE_S3",
		3: "STORAGE_TYPE_FS",
	}
	StorageType_value = map[string]int32{
		"STORAGE_TYPE_UNSPECIFIED": 0,
		"STORAGE_TYPE_GCS":         1,
		"STORAGE_TYPE_S3":          2,
		"STORAGE_TYPE_FS":          3,
	}
)

func (x StorageType) Enum() *StorageType {
	p := new(StorageType)
	*p = x
	return p
}

func (x StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_recurrent_task_proto_enumTypes[0].Descriptor()
}

func (StorageType) Type() protoreflect.EnumType {
	return &file_workflows_v1_recurrent_task_proto_enumTypes[0]
}

func (x StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageType.Descriptor instead.
func (StorageType) EnumDescriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{0}
}

// StorageEventType specifies the type of event that triggered the task.
type StorageEventType int32

const (
	StorageEventType_STORAGE_EVENT_TYPE_UNSPECIFIED StorageEventType = 0
	StorageEventType_STORAGE_EVENT_TYPE_CREATED     StorageEventType = 1
)

// Enum value maps for StorageEventType.
var (
	StorageEventType_name = map[int32]string{
		0: "STORAGE_EVENT_TYPE_UNSPECIFIED",
		1: "STORAGE_EVENT_TYPE_CREATED",
	}
	StorageEventType_value = map[string]int32{
		"STORAGE_EVENT_TYPE_UNSPECIFIED": 0,
		"STORAGE_EVENT_TYPE_CREATED":     1,
	}
)

func (x StorageEventType) Enum() *StorageEventType {
	p := new(StorageEventType)
	*p = x
	return p
}

func (x StorageEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_recurrent_task_proto_enumTypes[1].Descriptor()
}

func (StorageEventType) Type() protoreflect.EnumType {
	return &file_workflows_v1_recurrent_task_proto_enumTypes[1]
}

func (x StorageEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageEventType.Descriptor instead.
func (StorageEventType) EnumDescriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{1}
}

// Storage location is some kind of storage that can contain data files or objects and be used as a trigger source.
type StorageLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *UUID       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // Unique identifier for the storage location
	Location string      `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`                        // A unique identifier for the storage location in the storage system
	Type     StorageType `protobuf:"varint,3,opt,name=type,proto3,enum=workflows.v1.StorageType" json:"type,omitempty"` // The type of the storage location, e.g. GCS, S3, FS
}

func (x *StorageLocation) Reset() {
	*x = StorageLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLocation) ProtoMessage() {}

func (x *StorageLocation) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLocation.ProtoReflect.Descriptor instead.
func (*StorageLocation) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{0}
}

func (x *StorageLocation) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StorageLocation) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *StorageLocation) GetType() StorageType {
	if x != nil {
		return x.Type
	}
	return StorageType_STORAGE_TYPE_UNSPECIFIED
}

// Buckets is a list of storage buckets
type StorageLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*StorageLocation `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *StorageLocations) Reset() {
	*x = StorageLocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLocations) ProtoMessage() {}

func (x *StorageLocations) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLocations.ProtoReflect.Descriptor instead.
func (*StorageLocations) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{1}
}

func (x *StorageLocations) GetLocations() []*StorageLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

// RecurrentTaskPrototype is a task prototype that can result in many submitted tasks. Task submissions are triggered by
// NRT triggers, such as bucket triggers or cron triggers.
type RecurrentTaskPrototype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *UUID                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // Unique identifier for the trigger
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                               // A human-readable name for the trigger
	Prototype            *TaskSubmission        `protobuf:"bytes,3,opt,name=prototype,proto3" json:"prototype,omitempty"`                                                     // The task submission to trigger
	StorageEventTriggers []*StorageEventTrigger `protobuf:"bytes,4,rep,name=storage_event_triggers,json=storageEventTriggers,proto3" json:"storage_event_triggers,omitempty"` // The storage event triggers that will trigger the task
	CronTriggers         []*CronTrigger         `protobuf:"bytes,5,rep,name=cron_triggers,json=cronTriggers,proto3" json:"cron_triggers,omitempty"`                           // The cron triggers that will trigger the task
}

func (x *RecurrentTaskPrototype) Reset() {
	*x = RecurrentTaskPrototype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurrentTaskPrototype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurrentTaskPrototype) ProtoMessage() {}

func (x *RecurrentTaskPrototype) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurrentTaskPrototype.ProtoReflect.Descriptor instead.
func (*RecurrentTaskPrototype) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{2}
}

func (x *RecurrentTaskPrototype) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RecurrentTaskPrototype) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecurrentTaskPrototype) GetPrototype() *TaskSubmission {
	if x != nil {
		return x.Prototype
	}
	return nil
}

func (x *RecurrentTaskPrototype) GetStorageEventTriggers() []*StorageEventTrigger {
	if x != nil {
		return x.StorageEventTriggers
	}
	return nil
}

func (x *RecurrentTaskPrototype) GetCronTriggers() []*CronTrigger {
	if x != nil {
		return x.CronTriggers
	}
	return nil
}

// RecurrentTasks is a list of recurrent tasks
type RecurrentTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*RecurrentTaskPrototype `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *RecurrentTasks) Reset() {
	*x = RecurrentTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurrentTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurrentTasks) ProtoMessage() {}

func (x *RecurrentTasks) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurrentTasks.ProtoReflect.Descriptor instead.
func (*RecurrentTasks) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{3}
}

func (x *RecurrentTasks) GetTasks() []*RecurrentTaskPrototype {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// StorageEventTrigger is a trigger that will trigger a task submission when an object matching the glob pattern is
// created in a storage location.
type StorageEventTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *UUID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // Unique identifier for the trigger
	StorageLocation *StorageLocation `protobuf:"bytes,2,opt,name=storage_location,json=storageLocation,proto3" json:"storage_location,omitempty"` // The storage location to watch for events
	GlobPattern     string           `protobuf:"bytes,3,opt,name=glob_pattern,json=globPattern,proto3" json:"glob_pattern,omitempty"`             // A glob pattern to match objects/files in the storage location
}

func (x *StorageEventTrigger) Reset() {
	*x = StorageEventTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageEventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageEventTrigger) ProtoMessage() {}

func (x *StorageEventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageEventTrigger.ProtoReflect.Descriptor instead.
func (*StorageEventTrigger) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{4}
}

func (x *StorageEventTrigger) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StorageEventTrigger) GetStorageLocation() *StorageLocation {
	if x != nil {
		return x.StorageLocation
	}
	return nil
}

func (x *StorageEventTrigger) GetGlobPattern() string {
	if x != nil {
		return x.GlobPattern
	}
	return ""
}

// CronTrigger is a trigger that will trigger a task submission on a schedule.
type CronTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *UUID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // Unique identifier for the trigger
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"` // A cron schedule for the trigger, e.g. "0 0 * * *" (every day at midnight)
}

func (x *CronTrigger) Reset() {
	*x = CronTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTrigger) ProtoMessage() {}

func (x *CronTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTrigger.ProtoReflect.Descriptor instead.
func (*CronTrigger) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{5}
}

func (x *CronTrigger) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CronTrigger) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

// RecurrentTask is an actual submitted task that was triggered by a recurrent task prototype.
// It contains the trigger arguments of the event that triggered the task, and the custom, user-defined task arguments.
type RecurrentTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the event that triggered the task. This is a serialized protobuf message. The type of the message
	// depends on the type of the trigger, either StorageEventTriggerEvent or CronTriggerEvent.
	TriggerEvent []byte `protobuf:"bytes,1,opt,name=trigger_event,json=triggerEvent,proto3" json:"trigger_event,omitempty"`
	Args         []byte `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"` // Additional, user-defined arguments for the task, to be deserialized by the task itself
}

func (x *RecurrentTask) Reset() {
	*x = RecurrentTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurrentTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurrentTask) ProtoMessage() {}

func (x *RecurrentTask) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurrentTask.ProtoReflect.Descriptor instead.
func (*RecurrentTask) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{6}
}

func (x *RecurrentTask) GetTriggerEvent() []byte {
	if x != nil {
		return x.TriggerEvent
	}
	return nil
}

func (x *RecurrentTask) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// TriggeredStorageEvent contains the details of the concrete event that triggered a storage event trigger.
type TriggeredStorageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageLocationId *UUID            `protobuf:"bytes,1,opt,name=storage_location_id,json=storageLocationId,proto3" json:"storage_location_id,omitempty"` // The storage location that triggered the task
	Type              StorageEventType `protobuf:"varint,2,opt,name=type,proto3,enum=workflows.v1.StorageEventType" json:"type,omitempty"`                  // The type of the storage event, e.g. created
	// The object that triggered the task, e.g. a file name in a directory or object name in a bucket
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TriggeredStorageEvent) Reset() {
	*x = TriggeredStorageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredStorageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredStorageEvent) ProtoMessage() {}

func (x *TriggeredStorageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredStorageEvent.ProtoReflect.Descriptor instead.
func (*TriggeredStorageEvent) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{7}
}

func (x *TriggeredStorageEvent) GetStorageLocationId() *UUID {
	if x != nil {
		return x.StorageLocationId
	}
	return nil
}

func (x *TriggeredStorageEvent) GetType() StorageEventType {
	if x != nil {
		return x.Type
	}
	return StorageEventType_STORAGE_EVENT_TYPE_UNSPECIFIED
}

func (x *TriggeredStorageEvent) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// TriggeredCronEvent contains the details of a concrete event that triggered a cron trigger.
type TriggeredCronEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"` // The time the cron trigger fired
}

func (x *TriggeredCronEvent) Reset() {
	*x = TriggeredCronEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_recurrent_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredCronEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredCronEvent) ProtoMessage() {}

func (x *TriggeredCronEvent) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_recurrent_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredCronEvent.ProtoReflect.Descriptor instead.
func (*TriggeredCronEvent) Descriptor() ([]byte, []int) {
	return file_workflows_v1_recurrent_task_proto_rawDescGZIP(), []int{8}
}

func (x *TriggeredCronEvent) GetTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerTime
	}
	return nil
}

var File_workflows_v1_recurrent_task_proto protoreflect.FileDescriptor

var file_workflows_v1_recurrent_task_proto_rawDesc = []byte{
	0x0a, 0x21, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa5, 0x02, 0x0a,
	0x16, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x14,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48,
	0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x4d, 0x0a, 0x0b, 0x43,
	0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x0d, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x43,
	0x72, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x6b, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x33, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x53, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x32, 0xee, 0x05, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a,
	0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x24,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0xbb, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x42, 0x12, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f, 0x78, 0x2f, 0x74, 0x69, 0x6c,
	0x65, 0x62, 0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x57,
	0x58, 0x58, 0xaa, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_workflows_v1_recurrent_task_proto_rawDescOnce sync.Once
	file_workflows_v1_recurrent_task_proto_rawDescData = file_workflows_v1_recurrent_task_proto_rawDesc
)

func file_workflows_v1_recurrent_task_proto_rawDescGZIP() []byte {
	file_workflows_v1_recurrent_task_proto_rawDescOnce.Do(func() {
		file_workflows_v1_recurrent_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflows_v1_recurrent_task_proto_rawDescData)
	})
	return file_workflows_v1_recurrent_task_proto_rawDescData
}

var file_workflows_v1_recurrent_task_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_workflows_v1_recurrent_task_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_workflows_v1_recurrent_task_proto_goTypes = []any{
	(StorageType)(0),               // 0: workflows.v1.StorageType
	(StorageEventType)(0),          // 1: workflows.v1.StorageEventType
	(*StorageLocation)(nil),        // 2: workflows.v1.StorageLocation
	(*StorageLocations)(nil),       // 3: workflows.v1.StorageLocations
	(*RecurrentTaskPrototype)(nil), // 4: workflows.v1.RecurrentTaskPrototype
	(*RecurrentTasks)(nil),         // 5: workflows.v1.RecurrentTasks
	(*StorageEventTrigger)(nil),    // 6: workflows.v1.StorageEventTrigger
	(*CronTrigger)(nil),            // 7: workflows.v1.CronTrigger
	(*RecurrentTask)(nil),          // 8: workflows.v1.RecurrentTask
	(*TriggeredStorageEvent)(nil),  // 9: workflows.v1.TriggeredStorageEvent
	(*TriggeredCronEvent)(nil),     // 10: workflows.v1.TriggeredCronEvent
	(*UUID)(nil),                   // 11: workflows.v1.UUID
	(*TaskSubmission)(nil),         // 12: workflows.v1.TaskSubmission
	(*timestamppb.Timestamp)(nil),  // 13: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 14: google.protobuf.Empty
}
var file_workflows_v1_recurrent_task_proto_depIdxs = []int32{
	11, // 0: workflows.v1.StorageLocation.id:type_name -> workflows.v1.UUID
	0,  // 1: workflows.v1.StorageLocation.type:type_name -> workflows.v1.StorageType
	2,  // 2: workflows.v1.StorageLocations.locations:type_name -> workflows.v1.StorageLocation
	11, // 3: workflows.v1.RecurrentTaskPrototype.id:type_name -> workflows.v1.UUID
	12, // 4: workflows.v1.RecurrentTaskPrototype.prototype:type_name -> workflows.v1.TaskSubmission
	6,  // 5: workflows.v1.RecurrentTaskPrototype.storage_event_triggers:type_name -> workflows.v1.StorageEventTrigger
	7,  // 6: workflows.v1.RecurrentTaskPrototype.cron_triggers:type_name -> workflows.v1.CronTrigger
	4,  // 7: workflows.v1.RecurrentTasks.tasks:type_name -> workflows.v1.RecurrentTaskPrototype
	11, // 8: workflows.v1.StorageEventTrigger.id:type_name -> workflows.v1.UUID
	2,  // 9: workflows.v1.StorageEventTrigger.storage_location:type_name -> workflows.v1.StorageLocation
	11, // 10: workflows.v1.CronTrigger.id:type_name -> workflows.v1.UUID
	11, // 11: workflows.v1.TriggeredStorageEvent.storage_location_id:type_name -> workflows.v1.UUID
	1,  // 12: workflows.v1.TriggeredStorageEvent.type:type_name -> workflows.v1.StorageEventType
	13, // 13: workflows.v1.TriggeredCronEvent.trigger_time:type_name -> google.protobuf.Timestamp
	14, // 14: workflows.v1.RecurrentTaskService.ListStorageLocations:input_type -> google.protobuf.Empty
	11, // 15: workflows.v1.RecurrentTaskService.GetStorageLocation:input_type -> workflows.v1.UUID
	2,  // 16: workflows.v1.RecurrentTaskService.CreateStorageLocation:input_type -> workflows.v1.StorageLocation
	11, // 17: workflows.v1.RecurrentTaskService.DeleteStorageLocation:input_type -> workflows.v1.UUID
	14, // 18: workflows.v1.RecurrentTaskService.ListRecurrentTasks:input_type -> google.protobuf.Empty
	11, // 19: workflows.v1.RecurrentTaskService.GetRecurrentTask:input_type -> workflows.v1.UUID
	4,  // 20: workflows.v1.RecurrentTaskService.CreateRecurrentTask:input_type -> workflows.v1.RecurrentTaskPrototype
	4,  // 21: workflows.v1.RecurrentTaskService.UpdateRecurrentTask:input_type -> workflows.v1.RecurrentTaskPrototype
	11, // 22: workflows.v1.RecurrentTaskService.DeleteRecurrentTask:input_type -> workflows.v1.UUID
	3,  // 23: workflows.v1.RecurrentTaskService.ListStorageLocations:output_type -> workflows.v1.StorageLocations
	2,  // 24: workflows.v1.RecurrentTaskService.GetStorageLocation:output_type -> workflows.v1.StorageLocation
	2,  // 25: workflows.v1.RecurrentTaskService.CreateStorageLocation:output_type -> workflows.v1.StorageLocation
	14, // 26: workflows.v1.RecurrentTaskService.DeleteStorageLocation:output_type -> google.protobuf.Empty
	5,  // 27: workflows.v1.RecurrentTaskService.ListRecurrentTasks:output_type -> workflows.v1.RecurrentTasks
	4,  // 28: workflows.v1.RecurrentTaskService.GetRecurrentTask:output_type -> workflows.v1.RecurrentTaskPrototype
	4,  // 29: workflows.v1.RecurrentTaskService.CreateRecurrentTask:output_type -> workflows.v1.RecurrentTaskPrototype
	4,  // 30: workflows.v1.RecurrentTaskService.UpdateRecurrentTask:output_type -> workflows.v1.RecurrentTaskPrototype
	14, // 31: workflows.v1.RecurrentTaskService.DeleteRecurrentTask:output_type -> google.protobuf.Empty
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_workflows_v1_recurrent_task_proto_init() }
func file_workflows_v1_recurrent_task_proto_init() {
	if File_workflows_v1_recurrent_task_proto != nil {
		return
	}
	file_workflows_v1_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_workflows_v1_recurrent_task_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StorageLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StorageLocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RecurrentTaskPrototype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RecurrentTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StorageEventTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CronTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RecurrentTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TriggeredStorageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_recurrent_task_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TriggeredCronEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflows_v1_recurrent_task_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_v1_recurrent_task_proto_goTypes,
		DependencyIndexes: file_workflows_v1_recurrent_task_proto_depIdxs,
		EnumInfos:         file_workflows_v1_recurrent_task_proto_enumTypes,
		MessageInfos:      file_workflows_v1_recurrent_task_proto_msgTypes,
	}.Build()
	File_workflows_v1_recurrent_task_proto = out.File
	file_workflows_v1_recurrent_task_proto_rawDesc = nil
	file_workflows_v1_recurrent_task_proto_goTypes = nil
	file_workflows_v1_recurrent_task_proto_depIdxs = nil
}
