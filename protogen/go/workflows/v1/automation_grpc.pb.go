// The external API for managing automations in the Workflows service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: workflows/v1/automation.proto

package workflowsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AutomationService_ListStorageLocations_FullMethodName  = "/workflows.v1.AutomationService/ListStorageLocations"
	AutomationService_GetStorageLocation_FullMethodName    = "/workflows.v1.AutomationService/GetStorageLocation"
	AutomationService_CreateStorageLocation_FullMethodName = "/workflows.v1.AutomationService/CreateStorageLocation"
	AutomationService_DeleteStorageLocation_FullMethodName = "/workflows.v1.AutomationService/DeleteStorageLocation"
	AutomationService_ListAutomations_FullMethodName       = "/workflows.v1.AutomationService/ListAutomations"
	AutomationService_GetAutomation_FullMethodName         = "/workflows.v1.AutomationService/GetAutomation"
	AutomationService_CreateAutomation_FullMethodName      = "/workflows.v1.AutomationService/CreateAutomation"
	AutomationService_UpdateAutomation_FullMethodName      = "/workflows.v1.AutomationService/UpdateAutomation"
	AutomationService_DeleteAutomation_FullMethodName      = "/workflows.v1.AutomationService/DeleteAutomation"
)

// AutomationServiceClient is the client API for AutomationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AutomationService is a service for managing automations. Currently, we support two types of triggers for automations:
// - Bucket triggers, which triggers tasks when an object is uploaded to a storage bucket that matches a glob pattern
// - Cron triggers, which triggers tasks on a schedule
type AutomationServiceClient interface {
	// ListStorageLocations lists all the storage buckets that are available for use as bucket triggers.
	ListStorageLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StorageLocations, error)
	// GetStorageLocation gets a storage location by its ID.
	GetStorageLocation(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*StorageLocation, error)
	// CreateStorageLocation creates a new storage bucket.
	CreateStorageLocation(ctx context.Context, in *StorageLocation, opts ...grpc.CallOption) (*StorageLocation, error)
	// DeleteStorageLocation deletes a storage location.
	DeleteStorageLocation(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListAutomations lists all the automations that are currently registered in a namespace.
	ListAutomations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Automations, error)
	// GetAutomation gets an automation by its ID.
	GetAutomation(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AutomationPrototype, error)
	// CreateAutomation creates a new automation in a namespace.
	CreateAutomation(ctx context.Context, in *AutomationPrototype, opts ...grpc.CallOption) (*AutomationPrototype, error)
	// UpdateAutomation updates an automation in a namespace.
	UpdateAutomation(ctx context.Context, in *AutomationPrototype, opts ...grpc.CallOption) (*AutomationPrototype, error)
	// DeleteAutomation deletes an automation from a namespace.
	DeleteAutomation(ctx context.Context, in *DeleteAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type automationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomationServiceClient(cc grpc.ClientConnInterface) AutomationServiceClient {
	return &automationServiceClient{cc}
}

func (c *automationServiceClient) ListStorageLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StorageLocations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageLocations)
	err := c.cc.Invoke(ctx, AutomationService_ListStorageLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) GetStorageLocation(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*StorageLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageLocation)
	err := c.cc.Invoke(ctx, AutomationService_GetStorageLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) CreateStorageLocation(ctx context.Context, in *StorageLocation, opts ...grpc.CallOption) (*StorageLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageLocation)
	err := c.cc.Invoke(ctx, AutomationService_CreateStorageLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) DeleteStorageLocation(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AutomationService_DeleteStorageLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) ListAutomations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Automations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Automations)
	err := c.cc.Invoke(ctx, AutomationService_ListAutomations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) GetAutomation(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*AutomationPrototype, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutomationPrototype)
	err := c.cc.Invoke(ctx, AutomationService_GetAutomation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) CreateAutomation(ctx context.Context, in *AutomationPrototype, opts ...grpc.CallOption) (*AutomationPrototype, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutomationPrototype)
	err := c.cc.Invoke(ctx, AutomationService_CreateAutomation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) UpdateAutomation(ctx context.Context, in *AutomationPrototype, opts ...grpc.CallOption) (*AutomationPrototype, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutomationPrototype)
	err := c.cc.Invoke(ctx, AutomationService_UpdateAutomation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationServiceClient) DeleteAutomation(ctx context.Context, in *DeleteAutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AutomationService_DeleteAutomation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationServiceServer is the server API for AutomationService service.
// All implementations must embed UnimplementedAutomationServiceServer
// for forward compatibility.
//
// AutomationService is a service for managing automations. Currently, we support two types of triggers for automations:
// - Bucket triggers, which triggers tasks when an object is uploaded to a storage bucket that matches a glob pattern
// - Cron triggers, which triggers tasks on a schedule
type AutomationServiceServer interface {
	// ListStorageLocations lists all the storage buckets that are available for use as bucket triggers.
	ListStorageLocations(context.Context, *emptypb.Empty) (*StorageLocations, error)
	// GetStorageLocation gets a storage location by its ID.
	GetStorageLocation(context.Context, *UUID) (*StorageLocation, error)
	// CreateStorageLocation creates a new storage bucket.
	CreateStorageLocation(context.Context, *StorageLocation) (*StorageLocation, error)
	// DeleteStorageLocation deletes a storage location.
	DeleteStorageLocation(context.Context, *UUID) (*emptypb.Empty, error)
	// ListAutomations lists all the automations that are currently registered in a namespace.
	ListAutomations(context.Context, *emptypb.Empty) (*Automations, error)
	// GetAutomation gets an automation by its ID.
	GetAutomation(context.Context, *UUID) (*AutomationPrototype, error)
	// CreateAutomation creates a new automation in a namespace.
	CreateAutomation(context.Context, *AutomationPrototype) (*AutomationPrototype, error)
	// UpdateAutomation updates an automation in a namespace.
	UpdateAutomation(context.Context, *AutomationPrototype) (*AutomationPrototype, error)
	// DeleteAutomation deletes an automation from a namespace.
	DeleteAutomation(context.Context, *DeleteAutomationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAutomationServiceServer()
}

// UnimplementedAutomationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAutomationServiceServer struct{}

func (UnimplementedAutomationServiceServer) ListStorageLocations(context.Context, *emptypb.Empty) (*StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorageLocations not implemented")
}
func (UnimplementedAutomationServiceServer) GetStorageLocation(context.Context, *UUID) (*StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocation not implemented")
}
func (UnimplementedAutomationServiceServer) CreateStorageLocation(context.Context, *StorageLocation) (*StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageLocation not implemented")
}
func (UnimplementedAutomationServiceServer) DeleteStorageLocation(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageLocation not implemented")
}
func (UnimplementedAutomationServiceServer) ListAutomations(context.Context, *emptypb.Empty) (*Automations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutomations not implemented")
}
func (UnimplementedAutomationServiceServer) GetAutomation(context.Context, *UUID) (*AutomationPrototype, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutomation not implemented")
}
func (UnimplementedAutomationServiceServer) CreateAutomation(context.Context, *AutomationPrototype) (*AutomationPrototype, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutomation not implemented")
}
func (UnimplementedAutomationServiceServer) UpdateAutomation(context.Context, *AutomationPrototype) (*AutomationPrototype, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomation not implemented")
}
func (UnimplementedAutomationServiceServer) DeleteAutomation(context.Context, *DeleteAutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutomation not implemented")
}
func (UnimplementedAutomationServiceServer) mustEmbedUnimplementedAutomationServiceServer() {}
func (UnimplementedAutomationServiceServer) testEmbeddedByValue()                           {}

// UnsafeAutomationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutomationServiceServer will
// result in compilation errors.
type UnsafeAutomationServiceServer interface {
	mustEmbedUnimplementedAutomationServiceServer()
}

func RegisterAutomationServiceServer(s grpc.ServiceRegistrar, srv AutomationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAutomationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AutomationService_ServiceDesc, srv)
}

func _AutomationService_ListStorageLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).ListStorageLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_ListStorageLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).ListStorageLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_GetStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).GetStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_GetStorageLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).GetStorageLocation(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_CreateStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).CreateStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_CreateStorageLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).CreateStorageLocation(ctx, req.(*StorageLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_DeleteStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).DeleteStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_DeleteStorageLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).DeleteStorageLocation(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_ListAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).ListAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_ListAutomations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).ListAutomations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_GetAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).GetAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_GetAutomation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).GetAutomation(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_CreateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationPrototype)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).CreateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_CreateAutomation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).CreateAutomation(ctx, req.(*AutomationPrototype))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_UpdateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationPrototype)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).UpdateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_UpdateAutomation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).UpdateAutomation(ctx, req.(*AutomationPrototype))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationService_DeleteAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationServiceServer).DeleteAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomationService_DeleteAutomation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationServiceServer).DeleteAutomation(ctx, req.(*DeleteAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutomationService_ServiceDesc is the grpc.ServiceDesc for AutomationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutomationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflows.v1.AutomationService",
	HandlerType: (*AutomationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStorageLocations",
			Handler:    _AutomationService_ListStorageLocations_Handler,
		},
		{
			MethodName: "GetStorageLocation",
			Handler:    _AutomationService_GetStorageLocation_Handler,
		},
		{
			MethodName: "CreateStorageLocation",
			Handler:    _AutomationService_CreateStorageLocation_Handler,
		},
		{
			MethodName: "DeleteStorageLocation",
			Handler:    _AutomationService_DeleteStorageLocation_Handler,
		},
		{
			MethodName: "ListAutomations",
			Handler:    _AutomationService_ListAutomations_Handler,
		},
		{
			MethodName: "GetAutomation",
			Handler:    _AutomationService_GetAutomation_Handler,
		},
		{
			MethodName: "CreateAutomation",
			Handler:    _AutomationService_CreateAutomation_Handler,
		},
		{
			MethodName: "UpdateAutomation",
			Handler:    _AutomationService_UpdateAutomation_Handler,
		},
		{
			MethodName: "DeleteAutomation",
			Handler:    _AutomationService_DeleteAutomation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows/v1/automation.proto",
}
