// The external API for managing triggers in the Workflows service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workflows/v1/trigger.proto

package workflowsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TriggerService_ListBuckets_FullMethodName         = "/workflows.v1.TriggerService/ListBuckets"
	TriggerService_UpsertBucketTrigger_FullMethodName = "/workflows.v1.TriggerService/UpsertBucketTrigger"
	TriggerService_ListBucketTriggers_FullMethodName  = "/workflows.v1.TriggerService/ListBucketTriggers"
	TriggerService_DeleteBucketTrigger_FullMethodName = "/workflows.v1.TriggerService/DeleteBucketTrigger"
	TriggerService_UpsertCronTrigger_FullMethodName   = "/workflows.v1.TriggerService/UpsertCronTrigger"
	TriggerService_ListCronTriggers_FullMethodName    = "/workflows.v1.TriggerService/ListCronTriggers"
	TriggerService_DeleteCronTrigger_FullMethodName   = "/workflows.v1.TriggerService/DeleteCronTrigger"
)

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// ListBuckets lists all the storage buckets that are available for use as bucket triggers.
	ListBuckets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Buckets, error)
	// UpsertBucketTrigger creates or updates a bucket trigger in a namespace.
	UpsertBucketTrigger(ctx context.Context, in *BucketTrigger, opts ...grpc.CallOption) (*BucketTrigger, error)
	// ListBucketTriggers lists all the bucket triggers that are currently registered in a namespace.
	ListBucketTriggers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BucketTriggers, error)
	// DeleteBucketTrigger deletes a bucket trigger from a namespace.
	DeleteBucketTrigger(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertCronTrigger creates or updates a cron trigger in a namespace.
	UpsertCronTrigger(ctx context.Context, in *CronTrigger, opts ...grpc.CallOption) (*CronTrigger, error)
	// ListCronTriggers lists all the cron triggers that are currently registered in a namespace.
	ListCronTriggers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BucketTriggers, error)
	// DeleteCronTrigger deletes a cron trigger from a namespace.
	DeleteCronTrigger(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) ListBuckets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Buckets, error) {
	out := new(Buckets)
	err := c.cc.Invoke(ctx, TriggerService_ListBuckets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) UpsertBucketTrigger(ctx context.Context, in *BucketTrigger, opts ...grpc.CallOption) (*BucketTrigger, error) {
	out := new(BucketTrigger)
	err := c.cc.Invoke(ctx, TriggerService_UpsertBucketTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) ListBucketTriggers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BucketTriggers, error) {
	out := new(BucketTriggers)
	err := c.cc.Invoke(ctx, TriggerService_ListBucketTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeleteBucketTrigger(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerService_DeleteBucketTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) UpsertCronTrigger(ctx context.Context, in *CronTrigger, opts ...grpc.CallOption) (*CronTrigger, error) {
	out := new(CronTrigger)
	err := c.cc.Invoke(ctx, TriggerService_UpsertCronTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) ListCronTriggers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BucketTriggers, error) {
	out := new(BucketTriggers)
	err := c.cc.Invoke(ctx, TriggerService_ListCronTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeleteCronTrigger(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerService_DeleteCronTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
// All implementations must embed UnimplementedTriggerServiceServer
// for forward compatibility
type TriggerServiceServer interface {
	// ListBuckets lists all the storage buckets that are available for use as bucket triggers.
	ListBuckets(context.Context, *emptypb.Empty) (*Buckets, error)
	// UpsertBucketTrigger creates or updates a bucket trigger in a namespace.
	UpsertBucketTrigger(context.Context, *BucketTrigger) (*BucketTrigger, error)
	// ListBucketTriggers lists all the bucket triggers that are currently registered in a namespace.
	ListBucketTriggers(context.Context, *emptypb.Empty) (*BucketTriggers, error)
	// DeleteBucketTrigger deletes a bucket trigger from a namespace.
	DeleteBucketTrigger(context.Context, *UUID) (*emptypb.Empty, error)
	// UpsertCronTrigger creates or updates a cron trigger in a namespace.
	UpsertCronTrigger(context.Context, *CronTrigger) (*CronTrigger, error)
	// ListCronTriggers lists all the cron triggers that are currently registered in a namespace.
	ListCronTriggers(context.Context, *emptypb.Empty) (*BucketTriggers, error)
	// DeleteCronTrigger deletes a cron trigger from a namespace.
	DeleteCronTrigger(context.Context, *UUID) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerServiceServer()
}

// UnimplementedTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (UnimplementedTriggerServiceServer) ListBuckets(context.Context, *emptypb.Empty) (*Buckets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedTriggerServiceServer) UpsertBucketTrigger(context.Context, *BucketTrigger) (*BucketTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBucketTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) ListBucketTriggers(context.Context, *emptypb.Empty) (*BucketTriggers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) DeleteBucketTrigger(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) UpsertCronTrigger(context.Context, *CronTrigger) (*CronTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCronTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) ListCronTriggers(context.Context, *emptypb.Empty) (*BucketTriggers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) DeleteCronTrigger(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) mustEmbedUnimplementedTriggerServiceServer() {}

// UnsafeTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServiceServer will
// result in compilation errors.
type UnsafeTriggerServiceServer interface {
	mustEmbedUnimplementedTriggerServiceServer()
}

func RegisterTriggerServiceServer(s grpc.ServiceRegistrar, srv TriggerServiceServer) {
	s.RegisterService(&TriggerService_ServiceDesc, srv)
}

func _TriggerService_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_ListBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListBuckets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_UpsertBucketTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).UpsertBucketTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_UpsertBucketTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).UpsertBucketTrigger(ctx, req.(*BucketTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_ListBucketTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListBucketTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_ListBucketTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListBucketTriggers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeleteBucketTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeleteBucketTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_DeleteBucketTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeleteBucketTrigger(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_UpsertCronTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).UpsertCronTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_UpsertCronTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).UpsertCronTrigger(ctx, req.(*CronTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_ListCronTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListCronTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_ListCronTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListCronTriggers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeleteCronTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeleteCronTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_DeleteCronTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeleteCronTrigger(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerService_ServiceDesc is the grpc.ServiceDesc for TriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflows.v1.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuckets",
			Handler:    _TriggerService_ListBuckets_Handler,
		},
		{
			MethodName: "UpsertBucketTrigger",
			Handler:    _TriggerService_UpsertBucketTrigger_Handler,
		},
		{
			MethodName: "ListBucketTriggers",
			Handler:    _TriggerService_ListBucketTriggers_Handler,
		},
		{
			MethodName: "DeleteBucketTrigger",
			Handler:    _TriggerService_DeleteBucketTrigger_Handler,
		},
		{
			MethodName: "UpsertCronTrigger",
			Handler:    _TriggerService_UpsertCronTrigger_Handler,
		},
		{
			MethodName: "ListCronTriggers",
			Handler:    _TriggerService_ListCronTriggers_Handler,
		},
		{
			MethodName: "DeleteCronTrigger",
			Handler:    _TriggerService_DeleteCronTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows/v1/trigger.proto",
}
