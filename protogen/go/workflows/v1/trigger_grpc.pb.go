// The external API for managing triggers in the Workflows service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workflows/v1/trigger.proto

package workflowsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TriggerService_ListBuckets_FullMethodName         = "/workflows.v1.TriggerService/ListBuckets"
	TriggerService_ListRecurrentTasks_FullMethodName  = "/workflows.v1.TriggerService/ListRecurrentTasks"
	TriggerService_GetRecurrentTask_FullMethodName    = "/workflows.v1.TriggerService/GetRecurrentTask"
	TriggerService_CreateRecurrentTask_FullMethodName = "/workflows.v1.TriggerService/CreateRecurrentTask"
	TriggerService_UpdateRecurrentTask_FullMethodName = "/workflows.v1.TriggerService/UpdateRecurrentTask"
	TriggerService_DeleteRecurrentTask_FullMethodName = "/workflows.v1.TriggerService/DeleteRecurrentTask"
)

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// ListBuckets lists all the storage buckets that are available for use as bucket triggers.
	ListBuckets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Buckets, error)
	// ListRecurrentTasks lists all the recurrent tasks that are currently registered in a namespace.
	ListRecurrentTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RecurrentTasks, error)
	// GetRecurrentTask gets a recurrent task by its ID.
	GetRecurrentTask(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*RecurrentTask, error)
	// CreateRecurrentTask creates a new recurrent task in a namespace.
	CreateRecurrentTask(ctx context.Context, in *RecurrentTask, opts ...grpc.CallOption) (*RecurrentTask, error)
	// UpdateRecurrentTask updates a recurrent task in a namespace.
	UpdateRecurrentTask(ctx context.Context, in *RecurrentTask, opts ...grpc.CallOption) (*RecurrentTask, error)
	// DeleteRecurrentTask deletes a recurrent task from a namespace.
	DeleteRecurrentTask(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) ListBuckets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Buckets, error) {
	out := new(Buckets)
	err := c.cc.Invoke(ctx, TriggerService_ListBuckets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) ListRecurrentTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RecurrentTasks, error) {
	out := new(RecurrentTasks)
	err := c.cc.Invoke(ctx, TriggerService_ListRecurrentTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetRecurrentTask(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*RecurrentTask, error) {
	out := new(RecurrentTask)
	err := c.cc.Invoke(ctx, TriggerService_GetRecurrentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) CreateRecurrentTask(ctx context.Context, in *RecurrentTask, opts ...grpc.CallOption) (*RecurrentTask, error) {
	out := new(RecurrentTask)
	err := c.cc.Invoke(ctx, TriggerService_CreateRecurrentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) UpdateRecurrentTask(ctx context.Context, in *RecurrentTask, opts ...grpc.CallOption) (*RecurrentTask, error) {
	out := new(RecurrentTask)
	err := c.cc.Invoke(ctx, TriggerService_UpdateRecurrentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeleteRecurrentTask(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TriggerService_DeleteRecurrentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
// All implementations must embed UnimplementedTriggerServiceServer
// for forward compatibility
type TriggerServiceServer interface {
	// ListBuckets lists all the storage buckets that are available for use as bucket triggers.
	ListBuckets(context.Context, *emptypb.Empty) (*Buckets, error)
	// ListRecurrentTasks lists all the recurrent tasks that are currently registered in a namespace.
	ListRecurrentTasks(context.Context, *emptypb.Empty) (*RecurrentTasks, error)
	// GetRecurrentTask gets a recurrent task by its ID.
	GetRecurrentTask(context.Context, *UUID) (*RecurrentTask, error)
	// CreateRecurrentTask creates a new recurrent task in a namespace.
	CreateRecurrentTask(context.Context, *RecurrentTask) (*RecurrentTask, error)
	// UpdateRecurrentTask updates a recurrent task in a namespace.
	UpdateRecurrentTask(context.Context, *RecurrentTask) (*RecurrentTask, error)
	// DeleteRecurrentTask deletes a recurrent task from a namespace.
	DeleteRecurrentTask(context.Context, *UUID) (*emptypb.Empty, error)
	mustEmbedUnimplementedTriggerServiceServer()
}

// UnimplementedTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (UnimplementedTriggerServiceServer) ListBuckets(context.Context, *emptypb.Empty) (*Buckets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedTriggerServiceServer) ListRecurrentTasks(context.Context, *emptypb.Empty) (*RecurrentTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecurrentTasks not implemented")
}
func (UnimplementedTriggerServiceServer) GetRecurrentTask(context.Context, *UUID) (*RecurrentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecurrentTask not implemented")
}
func (UnimplementedTriggerServiceServer) CreateRecurrentTask(context.Context, *RecurrentTask) (*RecurrentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecurrentTask not implemented")
}
func (UnimplementedTriggerServiceServer) UpdateRecurrentTask(context.Context, *RecurrentTask) (*RecurrentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecurrentTask not implemented")
}
func (UnimplementedTriggerServiceServer) DeleteRecurrentTask(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecurrentTask not implemented")
}
func (UnimplementedTriggerServiceServer) mustEmbedUnimplementedTriggerServiceServer() {}

// UnsafeTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServiceServer will
// result in compilation errors.
type UnsafeTriggerServiceServer interface {
	mustEmbedUnimplementedTriggerServiceServer()
}

func RegisterTriggerServiceServer(s grpc.ServiceRegistrar, srv TriggerServiceServer) {
	s.RegisterService(&TriggerService_ServiceDesc, srv)
}

func _TriggerService_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_ListBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListBuckets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_ListRecurrentTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListRecurrentTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_ListRecurrentTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListRecurrentTasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetRecurrentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetRecurrentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_GetRecurrentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetRecurrentTask(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_CreateRecurrentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecurrentTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).CreateRecurrentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_CreateRecurrentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).CreateRecurrentTask(ctx, req.(*RecurrentTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_UpdateRecurrentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecurrentTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).UpdateRecurrentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_UpdateRecurrentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).UpdateRecurrentTask(ctx, req.(*RecurrentTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeleteRecurrentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeleteRecurrentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_DeleteRecurrentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeleteRecurrentTask(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerService_ServiceDesc is the grpc.ServiceDesc for TriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflows.v1.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuckets",
			Handler:    _TriggerService_ListBuckets_Handler,
		},
		{
			MethodName: "ListRecurrentTasks",
			Handler:    _TriggerService_ListRecurrentTasks_Handler,
		},
		{
			MethodName: "GetRecurrentTask",
			Handler:    _TriggerService_GetRecurrentTask_Handler,
		},
		{
			MethodName: "CreateRecurrentTask",
			Handler:    _TriggerService_CreateRecurrentTask_Handler,
		},
		{
			MethodName: "UpdateRecurrentTask",
			Handler:    _TriggerService_UpdateRecurrentTask_Handler,
		},
		{
			MethodName: "DeleteRecurrentTask",
			Handler:    _TriggerService_DeleteRecurrentTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows/v1/trigger.proto",
}
