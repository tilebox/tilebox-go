// The internal API a task runner uses to communicate with a workflows-service.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: workflows/v1/task.proto

package workflowsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NextTaskRequest is the request for requesting the next task to run and marking a task as computed.
type NextTaskRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ComputedTask *ComputedTask          `protobuf:"bytes,1,opt,name=computed_task,json=computedTask,proto3,oneof" json:"computed_task,omitempty"` // The task that has been computed. If not set, the next task will
	// The capabilities of the task runner, and therefore the potential tasks that can be run by that task runner.
	NextTaskToRun *NextTaskToRun `protobuf:"bytes,2,opt,name=next_task_to_run,json=nextTaskToRun,proto3,oneof" json:"next_task_to_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextTaskRequest) Reset() {
	*x = NextTaskRequest{}
	mi := &file_workflows_v1_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTaskRequest) ProtoMessage() {}

func (x *NextTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextTaskRequest.ProtoReflect.Descriptor instead.
func (*NextTaskRequest) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{0}
}

func (x *NextTaskRequest) GetComputedTask() *ComputedTask {
	if x != nil {
		return x.ComputedTask
	}
	return nil
}

func (x *NextTaskRequest) GetNextTaskToRun() *NextTaskToRun {
	if x != nil {
		return x.NextTaskToRun
	}
	return nil
}

// NextTaskToRun is a message specifying the capabilities of the task runner, and therefore the potential
// tasks that can be run by that task runner.
type NextTaskToRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterSlug   string                 `protobuf:"bytes,1,opt,name=cluster_slug,json=clusterSlug,proto3" json:"cluster_slug,omitempty"` // The cluster that this task runner is running on.
	Identifiers   []*TaskIdentifier      `protobuf:"bytes,2,rep,name=identifiers,proto3" json:"identifiers,omitempty"`                    // The task identifiers that this task runner can run.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextTaskToRun) Reset() {
	*x = NextTaskToRun{}
	mi := &file_workflows_v1_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextTaskToRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTaskToRun) ProtoMessage() {}

func (x *NextTaskToRun) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextTaskToRun.ProtoReflect.Descriptor instead.
func (*NextTaskToRun) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *NextTaskToRun) GetClusterSlug() string {
	if x != nil {
		return x.ClusterSlug
	}
	return ""
}

func (x *NextTaskToRun) GetIdentifiers() []*TaskIdentifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// ComputedTask is a message specifying a task that has been computed by the task runner.
type ComputedTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *UUID                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The id of the task that has been computed.
	// A display name for the task that has been computed for visualization purposes.
	// If not set, the display message specified upon task submission will be kept.
	Display       string            `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	SubTasks      []*TaskSubmission `protobuf:"bytes,3,rep,name=sub_tasks,json=subTasks,proto3" json:"sub_tasks,omitempty"` // A list of sub-tasks that the just computed task spawned.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComputedTask) Reset() {
	*x = ComputedTask{}
	mi := &file_workflows_v1_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComputedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedTask) ProtoMessage() {}

func (x *ComputedTask) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedTask.ProtoReflect.Descriptor instead.
func (*ComputedTask) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{2}
}

func (x *ComputedTask) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputedTask) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *ComputedTask) GetSubTasks() []*TaskSubmission {
	if x != nil {
		return x.SubTasks
	}
	return nil
}

// NextTaskResponse is the response to the NextTask request.
// Right now it only contains the next task to run. Wrapped in a message to allow adding more fields later if needed.
type NextTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextTask      *Task                  `protobuf:"bytes,1,opt,name=next_task,json=nextTask,proto3" json:"next_task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextTaskResponse) Reset() {
	*x = NextTaskResponse{}
	mi := &file_workflows_v1_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTaskResponse) ProtoMessage() {}

func (x *NextTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextTaskResponse.ProtoReflect.Descriptor instead.
func (*NextTaskResponse) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{3}
}

func (x *NextTaskResponse) GetNextTask() *Task {
	if x != nil {
		return x.NextTask
	}
	return nil
}

// TaskFailedRequest is the request for marking a task as failed.
type TaskFailedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        *UUID                  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Display       string                 `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	CancelJob     bool                   `protobuf:"varint,3,opt,name=cancel_job,json=cancelJob,proto3" json:"cancel_job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskFailedRequest) Reset() {
	*x = TaskFailedRequest{}
	mi := &file_workflows_v1_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedRequest) ProtoMessage() {}

func (x *TaskFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedRequest.ProtoReflect.Descriptor instead.
func (*TaskFailedRequest) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{4}
}

func (x *TaskFailedRequest) GetTaskId() *UUID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskFailedRequest) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *TaskFailedRequest) GetCancelJob() bool {
	if x != nil {
		return x.CancelJob
	}
	return false
}

// TaskStateResponse is the response to the TaskFailed request,
// indicating the current state of the task marked as failed.
type TaskStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         TaskState              `protobuf:"varint,1,opt,name=state,proto3,enum=workflows.v1.TaskState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStateResponse) Reset() {
	*x = TaskStateResponse{}
	mi := &file_workflows_v1_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStateResponse) ProtoMessage() {}

func (x *TaskStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStateResponse.ProtoReflect.Descriptor instead.
func (*TaskStateResponse) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskStateResponse) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

// TaskLease is a message specifying the new lease expiration time of a task.
type TaskLeaseRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskId         *UUID                  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	RequestedLease *durationpb.Duration   `protobuf:"bytes,2,opt,name=requested_lease,json=requestedLease,proto3,oneof" json:"requested_lease,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskLeaseRequest) Reset() {
	*x = TaskLeaseRequest{}
	mi := &file_workflows_v1_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLeaseRequest) ProtoMessage() {}

func (x *TaskLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLeaseRequest.ProtoReflect.Descriptor instead.
func (*TaskLeaseRequest) Descriptor() ([]byte, []int) {
	return file_workflows_v1_task_proto_rawDescGZIP(), []int{6}
}

func (x *TaskLeaseRequest) GetTaskId() *UUID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskLeaseRequest) GetRequestedLease() *durationpb.Duration {
	if x != nil {
		return x.RequestedLease
	}
	return nil
}

var File_workflows_v1_task_proto protoreflect.FileDescriptor

const file_workflows_v1_task_proto_rawDesc = "" +
	"\n" +
	"\x17workflows/v1/task.proto\x12\fworkflows.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x17workflows/v1/core.proto\"\xc9\x01\n" +
	"\x0fNextTaskRequest\x12D\n" +
	"\rcomputed_task\x18\x01 \x01(\v2\x1a.workflows.v1.ComputedTaskH\x00R\fcomputedTask\x88\x01\x01\x12I\n" +
	"\x10next_task_to_run\x18\x02 \x01(\v2\x1b.workflows.v1.NextTaskToRunH\x01R\rnextTaskToRun\x88\x01\x01B\x10\n" +
	"\x0e_computed_taskB\x13\n" +
	"\x11_next_task_to_run\"r\n" +
	"\rNextTaskToRun\x12!\n" +
	"\fcluster_slug\x18\x01 \x01(\tR\vclusterSlug\x12>\n" +
	"\videntifiers\x18\x02 \x03(\v2\x1c.workflows.v1.TaskIdentifierR\videntifiers\"\x87\x01\n" +
	"\fComputedTask\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12\x18\n" +
	"\adisplay\x18\x02 \x01(\tR\adisplay\x129\n" +
	"\tsub_tasks\x18\x03 \x03(\v2\x1c.workflows.v1.TaskSubmissionR\bsubTasks\"C\n" +
	"\x10NextTaskResponse\x12/\n" +
	"\tnext_task\x18\x01 \x01(\v2\x12.workflows.v1.TaskR\bnextTask\"y\n" +
	"\x11TaskFailedRequest\x12+\n" +
	"\atask_id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x06taskId\x12\x18\n" +
	"\adisplay\x18\x02 \x01(\tR\adisplay\x12\x1d\n" +
	"\n" +
	"cancel_job\x18\x03 \x01(\bR\tcancelJob\"B\n" +
	"\x11TaskStateResponse\x12-\n" +
	"\x05state\x18\x01 \x01(\x0e2\x17.workflows.v1.TaskStateR\x05state\"\x9c\x01\n" +
	"\x10TaskLeaseRequest\x12+\n" +
	"\atask_id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x06taskId\x12G\n" +
	"\x0frequested_lease\x18\x02 \x01(\v2\x19.google.protobuf.DurationH\x00R\x0erequestedLease\x88\x01\x01B\x12\n" +
	"\x10_requested_lease2\xf4\x01\n" +
	"\vTaskService\x12I\n" +
	"\bNextTask\x12\x1d.workflows.v1.NextTaskRequest\x1a\x1e.workflows.v1.NextTaskResponse\x12N\n" +
	"\n" +
	"TaskFailed\x12\x1f.workflows.v1.TaskFailedRequest\x1a\x1f.workflows.v1.TaskStateResponse\x12J\n" +
	"\x0fExtendTaskLease\x12\x1e.workflows.v1.TaskLeaseRequest\x1a\x17.workflows.v1.TaskLeaseB\xb2\x01\n" +
	"\x10com.workflows.v1B\tTaskProtoP\x01ZBgithub.com/tilebox/tilebox-go/protogen/go/workflows/v1;workflowsv1\xa2\x02\x03WXX\xaa\x02\fWorkflows.V1\xca\x02\fWorkflows\\V1\xe2\x02\x18Workflows\\V1\\GPBMetadata\xea\x02\rWorkflows::V1b\x06proto3"

var (
	file_workflows_v1_task_proto_rawDescOnce sync.Once
	file_workflows_v1_task_proto_rawDescData []byte
)

func file_workflows_v1_task_proto_rawDescGZIP() []byte {
	file_workflows_v1_task_proto_rawDescOnce.Do(func() {
		file_workflows_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_workflows_v1_task_proto_rawDesc), len(file_workflows_v1_task_proto_rawDesc)))
	})
	return file_workflows_v1_task_proto_rawDescData
}

var file_workflows_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_workflows_v1_task_proto_goTypes = []any{
	(*NextTaskRequest)(nil),     // 0: workflows.v1.NextTaskRequest
	(*NextTaskToRun)(nil),       // 1: workflows.v1.NextTaskToRun
	(*ComputedTask)(nil),        // 2: workflows.v1.ComputedTask
	(*NextTaskResponse)(nil),    // 3: workflows.v1.NextTaskResponse
	(*TaskFailedRequest)(nil),   // 4: workflows.v1.TaskFailedRequest
	(*TaskStateResponse)(nil),   // 5: workflows.v1.TaskStateResponse
	(*TaskLeaseRequest)(nil),    // 6: workflows.v1.TaskLeaseRequest
	(*TaskIdentifier)(nil),      // 7: workflows.v1.TaskIdentifier
	(*UUID)(nil),                // 8: workflows.v1.UUID
	(*TaskSubmission)(nil),      // 9: workflows.v1.TaskSubmission
	(*Task)(nil),                // 10: workflows.v1.Task
	(TaskState)(0),              // 11: workflows.v1.TaskState
	(*durationpb.Duration)(nil), // 12: google.protobuf.Duration
	(*TaskLease)(nil),           // 13: workflows.v1.TaskLease
}
var file_workflows_v1_task_proto_depIdxs = []int32{
	2,  // 0: workflows.v1.NextTaskRequest.computed_task:type_name -> workflows.v1.ComputedTask
	1,  // 1: workflows.v1.NextTaskRequest.next_task_to_run:type_name -> workflows.v1.NextTaskToRun
	7,  // 2: workflows.v1.NextTaskToRun.identifiers:type_name -> workflows.v1.TaskIdentifier
	8,  // 3: workflows.v1.ComputedTask.id:type_name -> workflows.v1.UUID
	9,  // 4: workflows.v1.ComputedTask.sub_tasks:type_name -> workflows.v1.TaskSubmission
	10, // 5: workflows.v1.NextTaskResponse.next_task:type_name -> workflows.v1.Task
	8,  // 6: workflows.v1.TaskFailedRequest.task_id:type_name -> workflows.v1.UUID
	11, // 7: workflows.v1.TaskStateResponse.state:type_name -> workflows.v1.TaskState
	8,  // 8: workflows.v1.TaskLeaseRequest.task_id:type_name -> workflows.v1.UUID
	12, // 9: workflows.v1.TaskLeaseRequest.requested_lease:type_name -> google.protobuf.Duration
	0,  // 10: workflows.v1.TaskService.NextTask:input_type -> workflows.v1.NextTaskRequest
	4,  // 11: workflows.v1.TaskService.TaskFailed:input_type -> workflows.v1.TaskFailedRequest
	6,  // 12: workflows.v1.TaskService.ExtendTaskLease:input_type -> workflows.v1.TaskLeaseRequest
	3,  // 13: workflows.v1.TaskService.NextTask:output_type -> workflows.v1.NextTaskResponse
	5,  // 14: workflows.v1.TaskService.TaskFailed:output_type -> workflows.v1.TaskStateResponse
	13, // 15: workflows.v1.TaskService.ExtendTaskLease:output_type -> workflows.v1.TaskLease
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_workflows_v1_task_proto_init() }
func file_workflows_v1_task_proto_init() {
	if File_workflows_v1_task_proto != nil {
		return
	}
	file_workflows_v1_core_proto_init()
	file_workflows_v1_task_proto_msgTypes[0].OneofWrappers = []any{}
	file_workflows_v1_task_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_v1_task_proto_rawDesc), len(file_workflows_v1_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_v1_task_proto_goTypes,
		DependencyIndexes: file_workflows_v1_task_proto_depIdxs,
		MessageInfos:      file_workflows_v1_task_proto_msgTypes,
	}.Build()
	File_workflows_v1_task_proto = out.File
	file_workflows_v1_task_proto_goTypes = nil
	file_workflows_v1_task_proto_depIdxs = nil
}
