// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: workflows/v1/job.proto

package workflowsv1

import (
	v1 "github.com/tilebox/tilebox-go/protogen/go/tilebox/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The theme in which to render a workflow diagram
type WorkflowDiagramTheme int32

const (
	WorkflowDiagramTheme_WORKFLOW_DIAGRAM_THEME_UNSPECIFIED   WorkflowDiagramTheme = 0
	WorkflowDiagramTheme_WORKFLOW_DIAGRAM_THEME_LIGHT         WorkflowDiagramTheme = 1
	WorkflowDiagramTheme_WORKFLOW_DIAGRAM_THEME_DARK          WorkflowDiagramTheme = 2
	WorkflowDiagramTheme_WORKFLOW_DIAGRAM_THEME_CONSOLE_LIGHT WorkflowDiagramTheme = 3
	WorkflowDiagramTheme_WORKFLOW_DIAGRAM_THEME_CONSOLE_DARK  WorkflowDiagramTheme = 4
)

// Enum value maps for WorkflowDiagramTheme.
var (
	WorkflowDiagramTheme_name = map[int32]string{
		0: "WORKFLOW_DIAGRAM_THEME_UNSPECIFIED",
		1: "WORKFLOW_DIAGRAM_THEME_LIGHT",
		2: "WORKFLOW_DIAGRAM_THEME_DARK",
		3: "WORKFLOW_DIAGRAM_THEME_CONSOLE_LIGHT",
		4: "WORKFLOW_DIAGRAM_THEME_CONSOLE_DARK",
	}
	WorkflowDiagramTheme_value = map[string]int32{
		"WORKFLOW_DIAGRAM_THEME_UNSPECIFIED":   0,
		"WORKFLOW_DIAGRAM_THEME_LIGHT":         1,
		"WORKFLOW_DIAGRAM_THEME_DARK":          2,
		"WORKFLOW_DIAGRAM_THEME_CONSOLE_LIGHT": 3,
		"WORKFLOW_DIAGRAM_THEME_CONSOLE_DARK":  4,
	}
)

func (x WorkflowDiagramTheme) Enum() *WorkflowDiagramTheme {
	p := new(WorkflowDiagramTheme)
	*p = x
	return p
}

func (x WorkflowDiagramTheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowDiagramTheme) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_job_proto_enumTypes[0].Descriptor()
}

func (WorkflowDiagramTheme) Type() protoreflect.EnumType {
	return &file_workflows_v1_job_proto_enumTypes[0]
}

func (x WorkflowDiagramTheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// SubmitJobRequest submits and schedules a job for execution. The job can have multiple root tasks.
type SubmitJobRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tasks        *[]*TaskSubmission     `protobuf:"bytes,1,rep,name=tasks"`
	xxx_hidden_JobName      string                 `protobuf:"bytes,2,opt,name=job_name,json=jobName"`
	xxx_hidden_TraceParent  string                 `protobuf:"bytes,3,opt,name=trace_parent,json=traceParent"`
	xxx_hidden_AutomationId *v1.ID                 `protobuf:"bytes,4,opt,name=automation_id,json=automationId"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubmitJobRequest) GetTasks() []*TaskSubmission {
	if x != nil {
		if x.xxx_hidden_Tasks != nil {
			return *x.xxx_hidden_Tasks
		}
	}
	return nil
}

func (x *SubmitJobRequest) GetJobName() string {
	if x != nil {
		return x.xxx_hidden_JobName
	}
	return ""
}

func (x *SubmitJobRequest) GetTraceParent() string {
	if x != nil {
		return x.xxx_hidden_TraceParent
	}
	return ""
}

func (x *SubmitJobRequest) GetAutomationId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_AutomationId
	}
	return nil
}

func (x *SubmitJobRequest) SetTasks(v []*TaskSubmission) {
	x.xxx_hidden_Tasks = &v
}

func (x *SubmitJobRequest) SetJobName(v string) {
	x.xxx_hidden_JobName = v
}

func (x *SubmitJobRequest) SetTraceParent(v string) {
	x.xxx_hidden_TraceParent = v
}

func (x *SubmitJobRequest) SetAutomationId(v *v1.ID) {
	x.xxx_hidden_AutomationId = v
}

func (x *SubmitJobRequest) HasAutomationId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AutomationId != nil
}

func (x *SubmitJobRequest) ClearAutomationId() {
	x.xxx_hidden_AutomationId = nil
}

type SubmitJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The root tasks for the job.
	Tasks []*TaskSubmission
	// The name of the job.
	JobName string
	// Tracing information for the job. This is used to propagate tracing information to the workers that execute the job.
	TraceParent string
	// Optional. The ID of the automation that submits this job.
	AutomationId *v1.ID
}

func (b0 SubmitJobRequest_builder) Build() *SubmitJobRequest {
	m0 := &SubmitJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Tasks = &b.Tasks
	x.xxx_hidden_JobName = b.JobName
	x.xxx_hidden_TraceParent = b.TraceParent
	x.xxx_hidden_AutomationId = b.AutomationId
	return m0
}

// GetJobRequest requests details for a job.
type GetJobRequest struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId *v1.ID                 `protobuf:"bytes,1,opt,name=job_id,json=jobId"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetJobRequest) GetJobId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return nil
}

func (x *GetJobRequest) SetJobId(v *v1.ID) {
	x.xxx_hidden_JobId = v
}

func (x *GetJobRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobId != nil
}

func (x *GetJobRequest) ClearJobId() {
	x.xxx_hidden_JobId = nil
}

type GetJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the job to get details for.
	JobId *v1.ID
}

func (b0 GetJobRequest_builder) Build() *GetJobRequest {
	m0 := &GetJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	return m0
}

// RetryJobRequest requests a retry of a job that has failed.
type RetryJobRequest struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId *v1.ID                 `protobuf:"bytes,1,opt,name=job_id,json=jobId"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RetryJobRequest) Reset() {
	*x = RetryJobRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryJobRequest) ProtoMessage() {}

func (x *RetryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RetryJobRequest) GetJobId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return nil
}

func (x *RetryJobRequest) SetJobId(v *v1.ID) {
	x.xxx_hidden_JobId = v
}

func (x *RetryJobRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobId != nil
}

func (x *RetryJobRequest) ClearJobId() {
	x.xxx_hidden_JobId = nil
}

type RetryJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The job to retry.
	JobId *v1.ID
}

func (b0 RetryJobRequest_builder) Build() *RetryJobRequest {
	m0 := &RetryJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	return m0
}

// RetryJobResponse is the response to a RetryJobRequest.
type RetryJobResponse struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NumTasksRescheduled int64                  `protobuf:"varint,1,opt,name=num_tasks_rescheduled,json=numTasksRescheduled"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *RetryJobResponse) Reset() {
	*x = RetryJobResponse{}
	mi := &file_workflows_v1_job_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryJobResponse) ProtoMessage() {}

func (x *RetryJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RetryJobResponse) GetNumTasksRescheduled() int64 {
	if x != nil {
		return x.xxx_hidden_NumTasksRescheduled
	}
	return 0
}

func (x *RetryJobResponse) SetNumTasksRescheduled(v int64) {
	x.xxx_hidden_NumTasksRescheduled = v
}

type RetryJobResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of tasks that were rescheduled.
	NumTasksRescheduled int64
}

func (b0 RetryJobResponse_builder) Build() *RetryJobResponse {
	m0 := &RetryJobResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NumTasksRescheduled = b.NumTasksRescheduled
	return m0
}

// CancelJobRequest requests a cancel of a job.
type CancelJobRequest struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId *v1.ID                 `protobuf:"bytes,1,opt,name=job_id,json=jobId"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CancelJobRequest) GetJobId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return nil
}

func (x *CancelJobRequest) SetJobId(v *v1.ID) {
	x.xxx_hidden_JobId = v
}

func (x *CancelJobRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobId != nil
}

func (x *CancelJobRequest) ClearJobId() {
	x.xxx_hidden_JobId = nil
}

type CancelJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The job to cancel.
	JobId *v1.ID
}

func (b0 CancelJobRequest_builder) Build() *CancelJobRequest {
	m0 := &CancelJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	return m0
}

// CancelJobResponse is the response to a CancelJobRequest.
type CancelJobResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelJobResponse) Reset() {
	*x = CancelJobResponse{}
	mi := &file_workflows_v1_job_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobResponse) ProtoMessage() {}

func (x *CancelJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type CancelJobResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 CancelJobResponse_builder) Build() *CancelJobResponse {
	m0 := &CancelJobResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// VisualizeJobRequest requests a visualization of a job.
type VisualizeJobRequest struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId          *v1.ID                 `protobuf:"bytes,1,opt,name=job_id,json=jobId"`
	xxx_hidden_RenderOptions  *RenderOptions         `protobuf:"bytes,2,opt,name=render_options,json=renderOptions"`
	xxx_hidden_Theme          WorkflowDiagramTheme   `protobuf:"varint,3,opt,name=theme,enum=workflows.v1.WorkflowDiagramTheme"`
	xxx_hidden_IncludeJobName bool                   `protobuf:"varint,4,opt,name=include_job_name,json=includeJobName"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *VisualizeJobRequest) Reset() {
	*x = VisualizeJobRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisualizeJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualizeJobRequest) ProtoMessage() {}

func (x *VisualizeJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VisualizeJobRequest) GetJobId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return nil
}

func (x *VisualizeJobRequest) GetRenderOptions() *RenderOptions {
	if x != nil {
		return x.xxx_hidden_RenderOptions
	}
	return nil
}

func (x *VisualizeJobRequest) GetTheme() WorkflowDiagramTheme {
	if x != nil {
		return x.xxx_hidden_Theme
	}
	return WorkflowDiagramTheme_WORKFLOW_DIAGRAM_THEME_UNSPECIFIED
}

func (x *VisualizeJobRequest) GetIncludeJobName() bool {
	if x != nil {
		return x.xxx_hidden_IncludeJobName
	}
	return false
}

func (x *VisualizeJobRequest) SetJobId(v *v1.ID) {
	x.xxx_hidden_JobId = v
}

func (x *VisualizeJobRequest) SetRenderOptions(v *RenderOptions) {
	x.xxx_hidden_RenderOptions = v
}

func (x *VisualizeJobRequest) SetTheme(v WorkflowDiagramTheme) {
	x.xxx_hidden_Theme = v
}

func (x *VisualizeJobRequest) SetIncludeJobName(v bool) {
	x.xxx_hidden_IncludeJobName = v
}

func (x *VisualizeJobRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobId != nil
}

func (x *VisualizeJobRequest) HasRenderOptions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RenderOptions != nil
}

func (x *VisualizeJobRequest) ClearJobId() {
	x.xxx_hidden_JobId = nil
}

func (x *VisualizeJobRequest) ClearRenderOptions() {
	x.xxx_hidden_RenderOptions = nil
}

type VisualizeJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The job to visualize.
	JobId *v1.ID
	// The options for rendering the diagram
	RenderOptions *RenderOptions
	// The theme to render the workflow diagram in
	Theme WorkflowDiagramTheme
	// whether to include the job name as title in the diagram
	IncludeJobName bool
}

func (b0 VisualizeJobRequest_builder) Build() *VisualizeJobRequest {
	m0 := &VisualizeJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	x.xxx_hidden_RenderOptions = b.RenderOptions
	x.xxx_hidden_Theme = b.Theme
	x.xxx_hidden_IncludeJobName = b.IncludeJobName
	return m0
}

// QueryFilters contains the filters to apply to a query.
type QueryFilters struct {
	state                     protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_TemporalExtent isQueryFilters_TemporalExtent `protobuf_oneof:"temporal_extent"`
	xxx_hidden_AutomationId   *v1.ID                        `protobuf:"bytes,3,opt,name=automation_id,json=automationId"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *QueryFilters) Reset() {
	*x = QueryFilters{}
	mi := &file_workflows_v1_job_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilters) ProtoMessage() {}

func (x *QueryFilters) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryFilters) GetTimeInterval() *v1.TimeInterval {
	if x != nil {
		if x, ok := x.xxx_hidden_TemporalExtent.(*queryFilters_TimeInterval); ok {
			return x.TimeInterval
		}
	}
	return nil
}

func (x *QueryFilters) GetIdInterval() *v1.IDInterval {
	if x != nil {
		if x, ok := x.xxx_hidden_TemporalExtent.(*queryFilters_IdInterval); ok {
			return x.IdInterval
		}
	}
	return nil
}

func (x *QueryFilters) GetAutomationId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_AutomationId
	}
	return nil
}

func (x *QueryFilters) SetTimeInterval(v *v1.TimeInterval) {
	if v == nil {
		x.xxx_hidden_TemporalExtent = nil
		return
	}
	x.xxx_hidden_TemporalExtent = &queryFilters_TimeInterval{v}
}

func (x *QueryFilters) SetIdInterval(v *v1.IDInterval) {
	if v == nil {
		x.xxx_hidden_TemporalExtent = nil
		return
	}
	x.xxx_hidden_TemporalExtent = &queryFilters_IdInterval{v}
}

func (x *QueryFilters) SetAutomationId(v *v1.ID) {
	x.xxx_hidden_AutomationId = v
}

func (x *QueryFilters) HasTemporalExtent() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TemporalExtent != nil
}

func (x *QueryFilters) HasTimeInterval() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TemporalExtent.(*queryFilters_TimeInterval)
	return ok
}

func (x *QueryFilters) HasIdInterval() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TemporalExtent.(*queryFilters_IdInterval)
	return ok
}

func (x *QueryFilters) HasAutomationId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AutomationId != nil
}

func (x *QueryFilters) ClearTemporalExtent() {
	x.xxx_hidden_TemporalExtent = nil
}

func (x *QueryFilters) ClearTimeInterval() {
	if _, ok := x.xxx_hidden_TemporalExtent.(*queryFilters_TimeInterval); ok {
		x.xxx_hidden_TemporalExtent = nil
	}
}

func (x *QueryFilters) ClearIdInterval() {
	if _, ok := x.xxx_hidden_TemporalExtent.(*queryFilters_IdInterval); ok {
		x.xxx_hidden_TemporalExtent = nil
	}
}

func (x *QueryFilters) ClearAutomationId() {
	x.xxx_hidden_AutomationId = nil
}

const QueryFilters_TemporalExtent_not_set_case case_QueryFilters_TemporalExtent = 0
const QueryFilters_TimeInterval_case case_QueryFilters_TemporalExtent = 1
const QueryFilters_IdInterval_case case_QueryFilters_TemporalExtent = 2

func (x *QueryFilters) WhichTemporalExtent() case_QueryFilters_TemporalExtent {
	if x == nil {
		return QueryFilters_TemporalExtent_not_set_case
	}
	switch x.xxx_hidden_TemporalExtent.(type) {
	case *queryFilters_TimeInterval:
		return QueryFilters_TimeInterval_case
	case *queryFilters_IdInterval:
		return QueryFilters_IdInterval_case
	default:
		return QueryFilters_TemporalExtent_not_set_case
	}
}

type QueryFilters_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Either a time interval or ID interval must be set, but not both.

	// Fields of oneof xxx_hidden_TemporalExtent:
	TimeInterval *v1.TimeInterval
	IdInterval   *v1.IDInterval
	// -- end of xxx_hidden_TemporalExtent
	// Filter jobs by automation id.
	AutomationId *v1.ID
}

func (b0 QueryFilters_builder) Build() *QueryFilters {
	m0 := &QueryFilters{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TimeInterval != nil {
		x.xxx_hidden_TemporalExtent = &queryFilters_TimeInterval{b.TimeInterval}
	}
	if b.IdInterval != nil {
		x.xxx_hidden_TemporalExtent = &queryFilters_IdInterval{b.IdInterval}
	}
	x.xxx_hidden_AutomationId = b.AutomationId
	return m0
}

type case_QueryFilters_TemporalExtent protoreflect.FieldNumber

func (x case_QueryFilters_TemporalExtent) String() string {
	md := file_workflows_v1_job_proto_msgTypes[7].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isQueryFilters_TemporalExtent interface {
	isQueryFilters_TemporalExtent()
}

type queryFilters_TimeInterval struct {
	TimeInterval *v1.TimeInterval `protobuf:"bytes,1,opt,name=time_interval,json=timeInterval,oneof"`
}

type queryFilters_IdInterval struct {
	IdInterval *v1.IDInterval `protobuf:"bytes,2,opt,name=id_interval,json=idInterval,oneof"`
}

func (*queryFilters_TimeInterval) isQueryFilters_TemporalExtent() {}

func (*queryFilters_IdInterval) isQueryFilters_TemporalExtent() {}

// QueryJobsRequest requests a list of jobs.
type QueryJobsRequest struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Filters *QueryFilters          `protobuf:"bytes,1,opt,name=filters"`
	xxx_hidden_Page    *v1.Pagination         `protobuf:"bytes,2,opt,name=page"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryJobsRequest) Reset() {
	*x = QueryJobsRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobsRequest) ProtoMessage() {}

func (x *QueryJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryJobsRequest) GetFilters() *QueryFilters {
	if x != nil {
		return x.xxx_hidden_Filters
	}
	return nil
}

func (x *QueryJobsRequest) GetPage() *v1.Pagination {
	if x != nil {
		return x.xxx_hidden_Page
	}
	return nil
}

func (x *QueryJobsRequest) SetFilters(v *QueryFilters) {
	x.xxx_hidden_Filters = v
}

func (x *QueryJobsRequest) SetPage(v *v1.Pagination) {
	x.xxx_hidden_Page = v
}

func (x *QueryJobsRequest) HasFilters() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Filters != nil
}

func (x *QueryJobsRequest) HasPage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Page != nil
}

func (x *QueryJobsRequest) ClearFilters() {
	x.xxx_hidden_Filters = nil
}

func (x *QueryJobsRequest) ClearPage() {
	x.xxx_hidden_Page = nil
}

type QueryJobsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Filters to apply to the query.
	Filters *QueryFilters
	// The pagination parameters for this request.
	Page *v1.Pagination
}

func (b0 QueryJobsRequest_builder) Build() *QueryJobsRequest {
	m0 := &QueryJobsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Filters = b.Filters
	x.xxx_hidden_Page = b.Page
	return m0
}

// A list of jobs.
type QueryJobsResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Jobs     *[]*Job                `protobuf:"bytes,1,rep,name=jobs"`
	xxx_hidden_NextPage *v1.Pagination         `protobuf:"bytes,3,opt,name=next_page,json=nextPage"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryJobsResponse) Reset() {
	*x = QueryJobsResponse{}
	mi := &file_workflows_v1_job_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobsResponse) ProtoMessage() {}

func (x *QueryJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryJobsResponse) GetJobs() []*Job {
	if x != nil {
		if x.xxx_hidden_Jobs != nil {
			return *x.xxx_hidden_Jobs
		}
	}
	return nil
}

func (x *QueryJobsResponse) GetNextPage() *v1.Pagination {
	if x != nil {
		return x.xxx_hidden_NextPage
	}
	return nil
}

func (x *QueryJobsResponse) SetJobs(v []*Job) {
	x.xxx_hidden_Jobs = &v
}

func (x *QueryJobsResponse) SetNextPage(v *v1.Pagination) {
	x.xxx_hidden_NextPage = v
}

func (x *QueryJobsResponse) HasNextPage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NextPage != nil
}

func (x *QueryJobsResponse) ClearNextPage() {
	x.xxx_hidden_NextPage = nil
}

type QueryJobsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The jobs.
	Jobs []*Job
	// The pagination parameters for the next page.
	NextPage *v1.Pagination
}

func (b0 QueryJobsResponse_builder) Build() *QueryJobsResponse {
	m0 := &QueryJobsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Jobs = &b.Jobs
	x.xxx_hidden_NextPage = b.NextPage
	return m0
}

// GetJobPrototypeRequest requests a clone prototype of a job.
type GetJobPrototypeRequest struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId *v1.ID                 `protobuf:"bytes,1,opt,name=job_id,json=jobId"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetJobPrototypeRequest) Reset() {
	*x = GetJobPrototypeRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobPrototypeRequest) ProtoMessage() {}

func (x *GetJobPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetJobPrototypeRequest) GetJobId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return nil
}

func (x *GetJobPrototypeRequest) SetJobId(v *v1.ID) {
	x.xxx_hidden_JobId = v
}

func (x *GetJobPrototypeRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobId != nil
}

func (x *GetJobPrototypeRequest) ClearJobId() {
	x.xxx_hidden_JobId = nil
}

type GetJobPrototypeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the job to get a clone prototype for.
	JobId *v1.ID
}

func (b0 GetJobPrototypeRequest_builder) Build() *GetJobPrototypeRequest {
	m0 := &GetJobPrototypeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	return m0
}

// A clone prototype of a job.
type GetJobPrototypeResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RootTasks *[]*TaskSubmission     `protobuf:"bytes,1,rep,name=root_tasks,json=rootTasks"`
	xxx_hidden_JobName   string                 `protobuf:"bytes,2,opt,name=job_name,json=jobName"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetJobPrototypeResponse) Reset() {
	*x = GetJobPrototypeResponse{}
	mi := &file_workflows_v1_job_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobPrototypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobPrototypeResponse) ProtoMessage() {}

func (x *GetJobPrototypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetJobPrototypeResponse) GetRootTasks() []*TaskSubmission {
	if x != nil {
		if x.xxx_hidden_RootTasks != nil {
			return *x.xxx_hidden_RootTasks
		}
	}
	return nil
}

func (x *GetJobPrototypeResponse) GetJobName() string {
	if x != nil {
		return x.xxx_hidden_JobName
	}
	return ""
}

func (x *GetJobPrototypeResponse) SetRootTasks(v []*TaskSubmission) {
	x.xxx_hidden_RootTasks = &v
}

func (x *GetJobPrototypeResponse) SetJobName(v string) {
	x.xxx_hidden_JobName = v
}

type GetJobPrototypeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The root tasks of the job.
	RootTasks []*TaskSubmission
	// The name of the job.
	JobName string
}

func (b0 GetJobPrototypeResponse_builder) Build() *GetJobPrototypeResponse {
	m0 := &GetJobPrototypeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_RootTasks = &b.RootTasks
	x.xxx_hidden_JobName = b.JobName
	return m0
}

// CloneJobRequest requests a clone of a job.
type CloneJobRequest struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId              *v1.ID                 `protobuf:"bytes,1,opt,name=job_id,json=jobId"`
	xxx_hidden_RootTasksOverrides *[]*TaskSubmission     `protobuf:"bytes,2,rep,name=root_tasks_overrides,json=rootTasksOverrides"`
	xxx_hidden_JobName            string                 `protobuf:"bytes,3,opt,name=job_name,json=jobName"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CloneJobRequest) Reset() {
	*x = CloneJobRequest{}
	mi := &file_workflows_v1_job_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneJobRequest) ProtoMessage() {}

func (x *CloneJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_job_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloneJobRequest) GetJobId() *v1.ID {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return nil
}

func (x *CloneJobRequest) GetRootTasksOverrides() []*TaskSubmission {
	if x != nil {
		if x.xxx_hidden_RootTasksOverrides != nil {
			return *x.xxx_hidden_RootTasksOverrides
		}
	}
	return nil
}

func (x *CloneJobRequest) GetJobName() string {
	if x != nil {
		return x.xxx_hidden_JobName
	}
	return ""
}

func (x *CloneJobRequest) SetJobId(v *v1.ID) {
	x.xxx_hidden_JobId = v
}

func (x *CloneJobRequest) SetRootTasksOverrides(v []*TaskSubmission) {
	x.xxx_hidden_RootTasksOverrides = &v
}

func (x *CloneJobRequest) SetJobName(v string) {
	x.xxx_hidden_JobName = v
}

func (x *CloneJobRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobId != nil
}

func (x *CloneJobRequest) ClearJobId() {
	x.xxx_hidden_JobId = nil
}

type CloneJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The ID of the job to clone.
	JobId *v1.ID
	// The updated root tasks of the job.
	RootTasksOverrides []*TaskSubmission
	// The name of the job.
	JobName string
}

func (b0 CloneJobRequest_builder) Build() *CloneJobRequest {
	m0 := &CloneJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	x.xxx_hidden_RootTasksOverrides = &b.RootTasksOverrides
	x.xxx_hidden_JobName = b.JobName
	return m0
}

var File_workflows_v1_job_proto protoreflect.FileDescriptor

const file_workflows_v1_job_proto_rawDesc = "" +
	"\n" +
	"\x16workflows/v1/job.proto\x12\fworkflows.v1\x1a!google/protobuf/go_features.proto\x1a\x13tilebox/v1/id.proto\x1a\x16tilebox/v1/query.proto\x1a\x17workflows/v1/core.proto\x1a\x1aworkflows/v1/diagram.proto\"\xb9\x01\n" +
	"\x10SubmitJobRequest\x122\n" +
	"\x05tasks\x18\x01 \x03(\v2\x1c.workflows.v1.TaskSubmissionR\x05tasks\x12\x19\n" +
	"\bjob_name\x18\x02 \x01(\tR\ajobName\x12!\n" +
	"\ftrace_parent\x18\x03 \x01(\tR\vtraceParent\x123\n" +
	"\rautomation_id\x18\x04 \x01(\v2\x0e.tilebox.v1.IDR\fautomationId\"6\n" +
	"\rGetJobRequest\x12%\n" +
	"\x06job_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x05jobId\"8\n" +
	"\x0fRetryJobRequest\x12%\n" +
	"\x06job_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x05jobId\"F\n" +
	"\x10RetryJobResponse\x122\n" +
	"\x15num_tasks_rescheduled\x18\x01 \x01(\x03R\x13numTasksRescheduled\"9\n" +
	"\x10CancelJobRequest\x12%\n" +
	"\x06job_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x05jobId\"\x13\n" +
	"\x11CancelJobResponse\"\xe4\x01\n" +
	"\x13VisualizeJobRequest\x12%\n" +
	"\x06job_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x05jobId\x12B\n" +
	"\x0erender_options\x18\x02 \x01(\v2\x1b.workflows.v1.RenderOptionsR\rrenderOptions\x128\n" +
	"\x05theme\x18\x03 \x01(\x0e2\".workflows.v1.WorkflowDiagramThemeR\x05theme\x12(\n" +
	"\x10include_job_name\x18\x04 \x01(\bR\x0eincludeJobName\"\xd9\x01\n" +
	"\fQueryFilters\x12?\n" +
	"\rtime_interval\x18\x01 \x01(\v2\x18.tilebox.v1.TimeIntervalH\x00R\ftimeInterval\x129\n" +
	"\vid_interval\x18\x02 \x01(\v2\x16.tilebox.v1.IDIntervalH\x00R\n" +
	"idInterval\x12:\n" +
	"\rautomation_id\x18\x03 \x01(\v2\x0e.tilebox.v1.IDB\x05\xaa\x01\x02\b\x01R\fautomationIdB\x11\n" +
	"\x0ftemporal_extent\"{\n" +
	"\x10QueryJobsRequest\x124\n" +
	"\afilters\x18\x01 \x01(\v2\x1a.workflows.v1.QueryFiltersR\afilters\x121\n" +
	"\x04page\x18\x02 \x01(\v2\x16.tilebox.v1.PaginationB\x05\xaa\x01\x02\b\x01R\x04page\"v\n" +
	"\x11QueryJobsResponse\x12%\n" +
	"\x04jobs\x18\x01 \x03(\v2\x11.workflows.v1.JobR\x04jobs\x12:\n" +
	"\tnext_page\x18\x03 \x01(\v2\x16.tilebox.v1.PaginationB\x05\xaa\x01\x02\b\x01R\bnextPage\"?\n" +
	"\x16GetJobPrototypeRequest\x12%\n" +
	"\x06job_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x05jobId\"q\n" +
	"\x17GetJobPrototypeResponse\x12;\n" +
	"\n" +
	"root_tasks\x18\x01 \x03(\v2\x1c.workflows.v1.TaskSubmissionR\trootTasks\x12\x19\n" +
	"\bjob_name\x18\x02 \x01(\tR\ajobName\"\xa3\x01\n" +
	"\x0fCloneJobRequest\x12%\n" +
	"\x06job_id\x18\x01 \x01(\v2\x0e.tilebox.v1.IDR\x05jobId\x12N\n" +
	"\x14root_tasks_overrides\x18\x02 \x03(\v2\x1c.workflows.v1.TaskSubmissionR\x12rootTasksOverrides\x12\x19\n" +
	"\bjob_name\x18\x03 \x01(\tR\ajobName*\xd4\x01\n" +
	"\x14WorkflowDiagramTheme\x12&\n" +
	"\"WORKFLOW_DIAGRAM_THEME_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cWORKFLOW_DIAGRAM_THEME_LIGHT\x10\x01\x12\x1f\n" +
	"\x1bWORKFLOW_DIAGRAM_THEME_DARK\x10\x02\x12(\n" +
	"$WORKFLOW_DIAGRAM_THEME_CONSOLE_LIGHT\x10\x03\x12'\n" +
	"#WORKFLOW_DIAGRAM_THEME_CONSOLE_DARK\x10\x042\xd5\x04\n" +
	"\n" +
	"JobService\x12>\n" +
	"\tSubmitJob\x12\x1e.workflows.v1.SubmitJobRequest\x1a\x11.workflows.v1.Job\x128\n" +
	"\x06GetJob\x12\x1b.workflows.v1.GetJobRequest\x1a\x11.workflows.v1.Job\x12I\n" +
	"\bRetryJob\x12\x1d.workflows.v1.RetryJobRequest\x1a\x1e.workflows.v1.RetryJobResponse\x12L\n" +
	"\tCancelJob\x12\x1e.workflows.v1.CancelJobRequest\x1a\x1f.workflows.v1.CancelJobResponse\x12H\n" +
	"\fVisualizeJob\x12!.workflows.v1.VisualizeJobRequest\x1a\x15.workflows.v1.Diagram\x12L\n" +
	"\tQueryJobs\x12\x1e.workflows.v1.QueryJobsRequest\x1a\x1f.workflows.v1.QueryJobsResponse\x12^\n" +
	"\x0fGetJobPrototype\x12$.workflows.v1.GetJobPrototypeRequest\x1a%.workflows.v1.GetJobPrototypeResponse\x12<\n" +
	"\bCloneJob\x12\x1d.workflows.v1.CloneJobRequest\x1a\x11.workflows.v1.JobB\xbb\x01\n" +
	"\x10com.workflows.v1B\bJobProtoP\x01ZBgithub.com/tilebox/tilebox-go/protogen/go/workflows/v1;workflowsv1\xa2\x02\x03WXX\xaa\x02\fWorkflows.V1\xca\x02\fWorkflows\\V1\xe2\x02\x18Workflows\\V1\\GPBMetadata\xea\x02\rWorkflows::V1\x92\x03\a\xd2>\x02\x10\x03\b\x02b\beditionsp\xe8\a"

var file_workflows_v1_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_workflows_v1_job_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_workflows_v1_job_proto_goTypes = []any{
	(WorkflowDiagramTheme)(0),       // 0: workflows.v1.WorkflowDiagramTheme
	(*SubmitJobRequest)(nil),        // 1: workflows.v1.SubmitJobRequest
	(*GetJobRequest)(nil),           // 2: workflows.v1.GetJobRequest
	(*RetryJobRequest)(nil),         // 3: workflows.v1.RetryJobRequest
	(*RetryJobResponse)(nil),        // 4: workflows.v1.RetryJobResponse
	(*CancelJobRequest)(nil),        // 5: workflows.v1.CancelJobRequest
	(*CancelJobResponse)(nil),       // 6: workflows.v1.CancelJobResponse
	(*VisualizeJobRequest)(nil),     // 7: workflows.v1.VisualizeJobRequest
	(*QueryFilters)(nil),            // 8: workflows.v1.QueryFilters
	(*QueryJobsRequest)(nil),        // 9: workflows.v1.QueryJobsRequest
	(*QueryJobsResponse)(nil),       // 10: workflows.v1.QueryJobsResponse
	(*GetJobPrototypeRequest)(nil),  // 11: workflows.v1.GetJobPrototypeRequest
	(*GetJobPrototypeResponse)(nil), // 12: workflows.v1.GetJobPrototypeResponse
	(*CloneJobRequest)(nil),         // 13: workflows.v1.CloneJobRequest
	(*TaskSubmission)(nil),          // 14: workflows.v1.TaskSubmission
	(*v1.ID)(nil),                   // 15: tilebox.v1.ID
	(*RenderOptions)(nil),           // 16: workflows.v1.RenderOptions
	(*v1.TimeInterval)(nil),         // 17: tilebox.v1.TimeInterval
	(*v1.IDInterval)(nil),           // 18: tilebox.v1.IDInterval
	(*v1.Pagination)(nil),           // 19: tilebox.v1.Pagination
	(*Job)(nil),                     // 20: workflows.v1.Job
	(*Diagram)(nil),                 // 21: workflows.v1.Diagram
}
var file_workflows_v1_job_proto_depIdxs = []int32{
	14, // 0: workflows.v1.SubmitJobRequest.tasks:type_name -> workflows.v1.TaskSubmission
	15, // 1: workflows.v1.SubmitJobRequest.automation_id:type_name -> tilebox.v1.ID
	15, // 2: workflows.v1.GetJobRequest.job_id:type_name -> tilebox.v1.ID
	15, // 3: workflows.v1.RetryJobRequest.job_id:type_name -> tilebox.v1.ID
	15, // 4: workflows.v1.CancelJobRequest.job_id:type_name -> tilebox.v1.ID
	15, // 5: workflows.v1.VisualizeJobRequest.job_id:type_name -> tilebox.v1.ID
	16, // 6: workflows.v1.VisualizeJobRequest.render_options:type_name -> workflows.v1.RenderOptions
	0,  // 7: workflows.v1.VisualizeJobRequest.theme:type_name -> workflows.v1.WorkflowDiagramTheme
	17, // 8: workflows.v1.QueryFilters.time_interval:type_name -> tilebox.v1.TimeInterval
	18, // 9: workflows.v1.QueryFilters.id_interval:type_name -> tilebox.v1.IDInterval
	15, // 10: workflows.v1.QueryFilters.automation_id:type_name -> tilebox.v1.ID
	8,  // 11: workflows.v1.QueryJobsRequest.filters:type_name -> workflows.v1.QueryFilters
	19, // 12: workflows.v1.QueryJobsRequest.page:type_name -> tilebox.v1.Pagination
	20, // 13: workflows.v1.QueryJobsResponse.jobs:type_name -> workflows.v1.Job
	19, // 14: workflows.v1.QueryJobsResponse.next_page:type_name -> tilebox.v1.Pagination
	15, // 15: workflows.v1.GetJobPrototypeRequest.job_id:type_name -> tilebox.v1.ID
	14, // 16: workflows.v1.GetJobPrototypeResponse.root_tasks:type_name -> workflows.v1.TaskSubmission
	15, // 17: workflows.v1.CloneJobRequest.job_id:type_name -> tilebox.v1.ID
	14, // 18: workflows.v1.CloneJobRequest.root_tasks_overrides:type_name -> workflows.v1.TaskSubmission
	1,  // 19: workflows.v1.JobService.SubmitJob:input_type -> workflows.v1.SubmitJobRequest
	2,  // 20: workflows.v1.JobService.GetJob:input_type -> workflows.v1.GetJobRequest
	3,  // 21: workflows.v1.JobService.RetryJob:input_type -> workflows.v1.RetryJobRequest
	5,  // 22: workflows.v1.JobService.CancelJob:input_type -> workflows.v1.CancelJobRequest
	7,  // 23: workflows.v1.JobService.VisualizeJob:input_type -> workflows.v1.VisualizeJobRequest
	9,  // 24: workflows.v1.JobService.QueryJobs:input_type -> workflows.v1.QueryJobsRequest
	11, // 25: workflows.v1.JobService.GetJobPrototype:input_type -> workflows.v1.GetJobPrototypeRequest
	13, // 26: workflows.v1.JobService.CloneJob:input_type -> workflows.v1.CloneJobRequest
	20, // 27: workflows.v1.JobService.SubmitJob:output_type -> workflows.v1.Job
	20, // 28: workflows.v1.JobService.GetJob:output_type -> workflows.v1.Job
	4,  // 29: workflows.v1.JobService.RetryJob:output_type -> workflows.v1.RetryJobResponse
	6,  // 30: workflows.v1.JobService.CancelJob:output_type -> workflows.v1.CancelJobResponse
	21, // 31: workflows.v1.JobService.VisualizeJob:output_type -> workflows.v1.Diagram
	10, // 32: workflows.v1.JobService.QueryJobs:output_type -> workflows.v1.QueryJobsResponse
	12, // 33: workflows.v1.JobService.GetJobPrototype:output_type -> workflows.v1.GetJobPrototypeResponse
	20, // 34: workflows.v1.JobService.CloneJob:output_type -> workflows.v1.Job
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_workflows_v1_job_proto_init() }
func file_workflows_v1_job_proto_init() {
	if File_workflows_v1_job_proto != nil {
		return
	}
	file_workflows_v1_core_proto_init()
	file_workflows_v1_diagram_proto_init()
	file_workflows_v1_job_proto_msgTypes[7].OneofWrappers = []any{
		(*queryFilters_TimeInterval)(nil),
		(*queryFilters_IdInterval)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_v1_job_proto_rawDesc), len(file_workflows_v1_job_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_v1_job_proto_goTypes,
		DependencyIndexes: file_workflows_v1_job_proto_depIdxs,
		EnumInfos:         file_workflows_v1_job_proto_enumTypes,
		MessageInfos:      file_workflows_v1_job_proto_msgTypes,
	}.Build()
	File_workflows_v1_job_proto = out.File
	file_workflows_v1_job_proto_goTypes = nil
	file_workflows_v1_job_proto_depIdxs = nil
}
