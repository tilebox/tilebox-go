// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: workflows/v1/core.proto

package workflowsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of a job.
type JobState int32

const (
	JobState_JOB_STATE_UNSPECIFIED JobState = 0
	// The job is queued and waiting to be run.
	JobState_JOB_STATE_QUEUED JobState = 1
	// At least one task of the job has been started.
	JobState_JOB_STATE_STARTED JobState = 2
	// All tasks of the job have been completed.
	JobState_JOB_STATE_COMPLETED JobState = 3
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STATE_UNSPECIFIED",
		1: "JOB_STATE_QUEUED",
		2: "JOB_STATE_STARTED",
		3: "JOB_STATE_COMPLETED",
	}
	JobState_value = map[string]int32{
		"JOB_STATE_UNSPECIFIED": 0,
		"JOB_STATE_QUEUED":      1,
		"JOB_STATE_STARTED":     2,
		"JOB_STATE_COMPLETED":   3,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_core_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_workflows_v1_core_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// The state of a task.
type TaskState int32

const (
	TaskState_TASK_STATE_UNSPECIFIED TaskState = 0
	// The task is queued and waiting to be run.
	TaskState_TASK_STATE_QUEUED TaskState = 1
	// The task is currently running on some task runner.
	TaskState_TASK_STATE_RUNNING TaskState = 2
	// The task has been computed and the output is available.
	// If the task also has no more outstanding children, it is considered COMPLETED.
	TaskState_TASK_STATE_COMPUTED TaskState = 3
	// The task has failed.
	TaskState_TASK_STATE_FAILED TaskState = 4
	// The task has been cancelled due to user request.
	TaskState_TASK_STATE_CANCELLED TaskState = 5
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TASK_STATE_UNSPECIFIED",
		1: "TASK_STATE_QUEUED",
		2: "TASK_STATE_RUNNING",
		3: "TASK_STATE_COMPUTED",
		4: "TASK_STATE_FAILED",
		5: "TASK_STATE_CANCELLED",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED": 0,
		"TASK_STATE_QUEUED":      1,
		"TASK_STATE_RUNNING":     2,
		"TASK_STATE_COMPUTED":    3,
		"TASK_STATE_FAILED":      4,
		"TASK_STATE_CANCELLED":   5,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_core_proto_enumTypes[1].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_workflows_v1_core_proto_enumTypes[1]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// A cluster is a grouping of tasks that are related.
type Cluster struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Slug        string                 `protobuf:"bytes,2,opt,name=slug"`
	xxx_hidden_DisplayName string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName"`
	xxx_hidden_Deletable   bool                   `protobuf:"varint,4,opt,name=deletable"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_workflows_v1_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Cluster) GetSlug() string {
	if x != nil {
		return x.xxx_hidden_Slug
	}
	return ""
}

func (x *Cluster) GetDisplayName() string {
	if x != nil {
		return x.xxx_hidden_DisplayName
	}
	return ""
}

func (x *Cluster) GetDeletable() bool {
	if x != nil {
		return x.xxx_hidden_Deletable
	}
	return false
}

func (x *Cluster) SetSlug(v string) {
	x.xxx_hidden_Slug = v
}

func (x *Cluster) SetDisplayName(v string) {
	x.xxx_hidden_DisplayName = v
}

func (x *Cluster) SetDeletable(v bool) {
	x.xxx_hidden_Deletable = v
}

type Cluster_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// 1 is reserved for a potential id field in the future.
	Slug        string
	DisplayName string
	Deletable   bool
}

func (b0 Cluster_builder) Build() *Cluster {
	m0 := &Cluster{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Slug = b.Slug
	x.xxx_hidden_DisplayName = b.DisplayName
	x.xxx_hidden_Deletable = b.Deletable
	return m0
}

// A job is a logical grouping of tasks that are related.
type Job struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id            *UUID                  `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name          string                 `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_TraceParent   string                 `protobuf:"bytes,3,opt,name=trace_parent,json=traceParent"`
	xxx_hidden_Canceled      bool                   `protobuf:"varint,5,opt,name=canceled"`
	xxx_hidden_State         JobState               `protobuf:"varint,6,opt,name=state,enum=workflows.v1.JobState"`
	xxx_hidden_SubmittedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=submitted_at,json=submittedAt"`
	xxx_hidden_StartedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=started_at,json=startedAt"`
	xxx_hidden_TaskSummaries *[]*TaskSummary        `protobuf:"bytes,9,rep,name=task_summaries,json=taskSummaries"`
	xxx_hidden_AutomationId  *UUID                  `protobuf:"bytes,10,opt,name=automation_id,json=automationId"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_workflows_v1_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Job) GetId() *UUID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *Job) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Job) GetTraceParent() string {
	if x != nil {
		return x.xxx_hidden_TraceParent
	}
	return ""
}

func (x *Job) GetCanceled() bool {
	if x != nil {
		return x.xxx_hidden_Canceled
	}
	return false
}

func (x *Job) GetState() JobState {
	if x != nil {
		return x.xxx_hidden_State
	}
	return JobState_JOB_STATE_UNSPECIFIED
}

func (x *Job) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_SubmittedAt
	}
	return nil
}

func (x *Job) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StartedAt
	}
	return nil
}

func (x *Job) GetTaskSummaries() []*TaskSummary {
	if x != nil {
		if x.xxx_hidden_TaskSummaries != nil {
			return *x.xxx_hidden_TaskSummaries
		}
	}
	return nil
}

func (x *Job) GetAutomationId() *UUID {
	if x != nil {
		return x.xxx_hidden_AutomationId
	}
	return nil
}

func (x *Job) SetId(v *UUID) {
	x.xxx_hidden_Id = v
}

func (x *Job) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Job) SetTraceParent(v string) {
	x.xxx_hidden_TraceParent = v
}

func (x *Job) SetCanceled(v bool) {
	x.xxx_hidden_Canceled = v
}

func (x *Job) SetState(v JobState) {
	x.xxx_hidden_State = v
}

func (x *Job) SetSubmittedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_SubmittedAt = v
}

func (x *Job) SetStartedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_StartedAt = v
}

func (x *Job) SetTaskSummaries(v []*TaskSummary) {
	x.xxx_hidden_TaskSummaries = &v
}

func (x *Job) SetAutomationId(v *UUID) {
	x.xxx_hidden_AutomationId = v
}

func (x *Job) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *Job) HasSubmittedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SubmittedAt != nil
}

func (x *Job) HasStartedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartedAt != nil
}

func (x *Job) HasAutomationId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AutomationId != nil
}

func (x *Job) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *Job) ClearSubmittedAt() {
	x.xxx_hidden_SubmittedAt = nil
}

func (x *Job) ClearStartedAt() {
	x.xxx_hidden_StartedAt = nil
}

func (x *Job) ClearAutomationId() {
	x.xxx_hidden_AutomationId = nil
}

type Job_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id            *UUID
	Name          string
	TraceParent   string
	Canceled      bool
	State         JobState
	SubmittedAt   *timestamppb.Timestamp
	StartedAt     *timestamppb.Timestamp
	TaskSummaries []*TaskSummary
	AutomationId  *UUID
}

func (b0 Job_builder) Build() *Job {
	m0 := &Job{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_TraceParent = b.TraceParent
	x.xxx_hidden_Canceled = b.Canceled
	x.xxx_hidden_State = b.State
	x.xxx_hidden_SubmittedAt = b.SubmittedAt
	x.xxx_hidden_StartedAt = b.StartedAt
	x.xxx_hidden_TaskSummaries = &b.TaskSummaries
	x.xxx_hidden_AutomationId = b.AutomationId
	return m0
}

// A summary of a task. Mainly used in the Console.
type TaskSummary struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        *UUID                  `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Display   string                 `protobuf:"bytes,2,opt,name=display"`
	xxx_hidden_State     TaskState              `protobuf:"varint,3,opt,name=state,enum=workflows.v1.TaskState"`
	xxx_hidden_ParentId  *UUID                  `protobuf:"bytes,4,opt,name=parent_id,json=parentId"`
	xxx_hidden_StartedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt"`
	xxx_hidden_StoppedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=stopped_at,json=stoppedAt"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TaskSummary) Reset() {
	*x = TaskSummary{}
	mi := &file_workflows_v1_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSummary) ProtoMessage() {}

func (x *TaskSummary) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskSummary) GetId() *UUID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *TaskSummary) GetDisplay() string {
	if x != nil {
		return x.xxx_hidden_Display
	}
	return ""
}

func (x *TaskSummary) GetState() TaskState {
	if x != nil {
		return x.xxx_hidden_State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *TaskSummary) GetParentId() *UUID {
	if x != nil {
		return x.xxx_hidden_ParentId
	}
	return nil
}

func (x *TaskSummary) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StartedAt
	}
	return nil
}

func (x *TaskSummary) GetStoppedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StoppedAt
	}
	return nil
}

func (x *TaskSummary) SetId(v *UUID) {
	x.xxx_hidden_Id = v
}

func (x *TaskSummary) SetDisplay(v string) {
	x.xxx_hidden_Display = v
}

func (x *TaskSummary) SetState(v TaskState) {
	x.xxx_hidden_State = v
}

func (x *TaskSummary) SetParentId(v *UUID) {
	x.xxx_hidden_ParentId = v
}

func (x *TaskSummary) SetStartedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_StartedAt = v
}

func (x *TaskSummary) SetStoppedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_StoppedAt = v
}

func (x *TaskSummary) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *TaskSummary) HasParentId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ParentId != nil
}

func (x *TaskSummary) HasStartedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartedAt != nil
}

func (x *TaskSummary) HasStoppedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StoppedAt != nil
}

func (x *TaskSummary) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *TaskSummary) ClearParentId() {
	x.xxx_hidden_ParentId = nil
}

func (x *TaskSummary) ClearStartedAt() {
	x.xxx_hidden_StartedAt = nil
}

func (x *TaskSummary) ClearStoppedAt() {
	x.xxx_hidden_StoppedAt = nil
}

type TaskSummary_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id        *UUID
	Display   string
	State     TaskState
	ParentId  *UUID
	StartedAt *timestamppb.Timestamp
	StoppedAt *timestamppb.Timestamp
}

func (b0 TaskSummary_builder) Build() *TaskSummary {
	m0 := &TaskSummary{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Display = b.Display
	x.xxx_hidden_State = b.State
	x.xxx_hidden_ParentId = b.ParentId
	x.xxx_hidden_StartedAt = b.StartedAt
	x.xxx_hidden_StoppedAt = b.StoppedAt
	return m0
}

// A task is a single unit of work.
type Task struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *UUID                  `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Identifier  *TaskIdentifier        `protobuf:"bytes,2,opt,name=identifier"`
	xxx_hidden_State       TaskState              `protobuf:"varint,3,opt,name=state,enum=workflows.v1.TaskState"`
	xxx_hidden_Input       []byte                 `protobuf:"bytes,4,opt,name=input"`
	xxx_hidden_Display     *string                `protobuf:"bytes,5,opt,name=display"`
	xxx_hidden_Job         *Job                   `protobuf:"bytes,6,opt,name=job"`
	xxx_hidden_ParentId    *UUID                  `protobuf:"bytes,7,opt,name=parent_id,json=parentId"`
	xxx_hidden_DependsOn   *[]*UUID               `protobuf:"bytes,8,rep,name=depends_on,json=dependsOn"`
	xxx_hidden_Lease       *TaskLease             `protobuf:"bytes,9,opt,name=lease"`
	xxx_hidden_RetryCount  int64                  `protobuf:"varint,10,opt,name=retry_count,json=retryCount"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_workflows_v1_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Task) GetId() *UUID {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *Task) GetIdentifier() *TaskIdentifier {
	if x != nil {
		return x.xxx_hidden_Identifier
	}
	return nil
}

func (x *Task) GetState() TaskState {
	if x != nil {
		return x.xxx_hidden_State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *Task) GetInput() []byte {
	if x != nil {
		return x.xxx_hidden_Input
	}
	return nil
}

func (x *Task) GetDisplay() string {
	if x != nil {
		if x.xxx_hidden_Display != nil {
			return *x.xxx_hidden_Display
		}
		return ""
	}
	return ""
}

func (x *Task) GetJob() *Job {
	if x != nil {
		return x.xxx_hidden_Job
	}
	return nil
}

func (x *Task) GetParentId() *UUID {
	if x != nil {
		return x.xxx_hidden_ParentId
	}
	return nil
}

func (x *Task) GetDependsOn() []*UUID {
	if x != nil {
		if x.xxx_hidden_DependsOn != nil {
			return *x.xxx_hidden_DependsOn
		}
	}
	return nil
}

func (x *Task) GetLease() *TaskLease {
	if x != nil {
		return x.xxx_hidden_Lease
	}
	return nil
}

func (x *Task) GetRetryCount() int64 {
	if x != nil {
		return x.xxx_hidden_RetryCount
	}
	return 0
}

func (x *Task) SetId(v *UUID) {
	x.xxx_hidden_Id = v
}

func (x *Task) SetIdentifier(v *TaskIdentifier) {
	x.xxx_hidden_Identifier = v
}

func (x *Task) SetState(v TaskState) {
	x.xxx_hidden_State = v
}

func (x *Task) SetInput(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Input = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 10)
}

func (x *Task) SetDisplay(v string) {
	x.xxx_hidden_Display = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 10)
}

func (x *Task) SetJob(v *Job) {
	x.xxx_hidden_Job = v
}

func (x *Task) SetParentId(v *UUID) {
	x.xxx_hidden_ParentId = v
}

func (x *Task) SetDependsOn(v []*UUID) {
	x.xxx_hidden_DependsOn = &v
}

func (x *Task) SetLease(v *TaskLease) {
	x.xxx_hidden_Lease = v
}

func (x *Task) SetRetryCount(v int64) {
	x.xxx_hidden_RetryCount = v
}

func (x *Task) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *Task) HasIdentifier() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Identifier != nil
}

func (x *Task) HasInput() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Task) HasDisplay() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Task) HasJob() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Job != nil
}

func (x *Task) HasParentId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ParentId != nil
}

func (x *Task) HasLease() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Lease != nil
}

func (x *Task) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *Task) ClearIdentifier() {
	x.xxx_hidden_Identifier = nil
}

func (x *Task) ClearInput() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Input = nil
}

func (x *Task) ClearDisplay() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Display = nil
}

func (x *Task) ClearJob() {
	x.xxx_hidden_Job = nil
}

func (x *Task) ClearParentId() {
	x.xxx_hidden_ParentId = nil
}

func (x *Task) ClearLease() {
	x.xxx_hidden_Lease = nil
}

type Task_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id *UUID
	// Unique identifier for the task. Used by runners to match tasks to specific functions.
	Identifier *TaskIdentifier
	State      TaskState
	Input      []byte
	// Display is a human readable representation of the Task used for printing or visualizations
	Display    *string
	Job        *Job
	ParentId   *UUID
	DependsOn  []*UUID
	Lease      *TaskLease
	RetryCount int64
}

func (b0 Task_builder) Build() *Task {
	m0 := &Task{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Identifier = b.Identifier
	x.xxx_hidden_State = b.State
	if b.Input != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 10)
		x.xxx_hidden_Input = b.Input
	}
	if b.Display != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 10)
		x.xxx_hidden_Display = b.Display
	}
	x.xxx_hidden_Job = b.Job
	x.xxx_hidden_ParentId = b.ParentId
	x.xxx_hidden_DependsOn = &b.DependsOn
	x.xxx_hidden_Lease = b.Lease
	x.xxx_hidden_RetryCount = b.RetryCount
	return m0
}

// An identifier for a task.
type TaskIdentifier struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name    string                 `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Version string                 `protobuf:"bytes,2,opt,name=version"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TaskIdentifier) Reset() {
	*x = TaskIdentifier{}
	mi := &file_workflows_v1_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentifier) ProtoMessage() {}

func (x *TaskIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskIdentifier) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *TaskIdentifier) GetVersion() string {
	if x != nil {
		return x.xxx_hidden_Version
	}
	return ""
}

func (x *TaskIdentifier) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *TaskIdentifier) SetVersion(v string) {
	x.xxx_hidden_Version = v
}

type TaskIdentifier_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name    string
	Version string
}

func (b0 TaskIdentifier_builder) Build() *TaskIdentifier {
	m0 := &TaskIdentifier{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Version = b.Version
	return m0
}

// A list of tasks.
type Tasks struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tasks *[]*Task               `protobuf:"bytes,1,rep,name=tasks"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Tasks) Reset() {
	*x = Tasks{}
	mi := &file_workflows_v1_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasks) ProtoMessage() {}

func (x *Tasks) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Tasks) GetTasks() []*Task {
	if x != nil {
		if x.xxx_hidden_Tasks != nil {
			return *x.xxx_hidden_Tasks
		}
	}
	return nil
}

func (x *Tasks) SetTasks(v []*Task) {
	x.xxx_hidden_Tasks = &v
}

type Tasks_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tasks []*Task
}

func (b0 Tasks_builder) Build() *Tasks {
	m0 := &Tasks{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Tasks = &b.Tasks
	return m0
}

// TaskSubmission is a message of a task that is just about to be submitted, either by submitting a job or as a subtask.
type TaskSubmission struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ClusterSlug  string                 `protobuf:"bytes,1,opt,name=cluster_slug,json=clusterSlug"`
	xxx_hidden_Identifier   *TaskIdentifier        `protobuf:"bytes,2,opt,name=identifier"`
	xxx_hidden_Input        []byte                 `protobuf:"bytes,3,opt,name=input"`
	xxx_hidden_Display      string                 `protobuf:"bytes,4,opt,name=display"`
	xxx_hidden_Dependencies []int64                `protobuf:"varint,5,rep,packed,name=dependencies"`
	xxx_hidden_MaxRetries   int64                  `protobuf:"varint,6,opt,name=max_retries,json=maxRetries"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TaskSubmission) Reset() {
	*x = TaskSubmission{}
	mi := &file_workflows_v1_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSubmission) ProtoMessage() {}

func (x *TaskSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskSubmission) GetClusterSlug() string {
	if x != nil {
		return x.xxx_hidden_ClusterSlug
	}
	return ""
}

func (x *TaskSubmission) GetIdentifier() *TaskIdentifier {
	if x != nil {
		return x.xxx_hidden_Identifier
	}
	return nil
}

func (x *TaskSubmission) GetInput() []byte {
	if x != nil {
		return x.xxx_hidden_Input
	}
	return nil
}

func (x *TaskSubmission) GetDisplay() string {
	if x != nil {
		return x.xxx_hidden_Display
	}
	return ""
}

func (x *TaskSubmission) GetDependencies() []int64 {
	if x != nil {
		return x.xxx_hidden_Dependencies
	}
	return nil
}

func (x *TaskSubmission) GetMaxRetries() int64 {
	if x != nil {
		return x.xxx_hidden_MaxRetries
	}
	return 0
}

func (x *TaskSubmission) SetClusterSlug(v string) {
	x.xxx_hidden_ClusterSlug = v
}

func (x *TaskSubmission) SetIdentifier(v *TaskIdentifier) {
	x.xxx_hidden_Identifier = v
}

func (x *TaskSubmission) SetInput(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Input = v
}

func (x *TaskSubmission) SetDisplay(v string) {
	x.xxx_hidden_Display = v
}

func (x *TaskSubmission) SetDependencies(v []int64) {
	x.xxx_hidden_Dependencies = v
}

func (x *TaskSubmission) SetMaxRetries(v int64) {
	x.xxx_hidden_MaxRetries = v
}

func (x *TaskSubmission) HasIdentifier() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Identifier != nil
}

func (x *TaskSubmission) ClearIdentifier() {
	x.xxx_hidden_Identifier = nil
}

type TaskSubmission_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ClusterSlug string
	Identifier  *TaskIdentifier
	Input       []byte
	Display     string
	// A list of indices, corresponding to tasks in the list of sub_tasks that this SubTask is part of.
	Dependencies []int64
	MaxRetries   int64
}

func (b0 TaskSubmission_builder) Build() *TaskSubmission {
	m0 := &TaskSubmission{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ClusterSlug = b.ClusterSlug
	x.xxx_hidden_Identifier = b.Identifier
	x.xxx_hidden_Input = b.Input
	x.xxx_hidden_Display = b.Display
	x.xxx_hidden_Dependencies = b.Dependencies
	x.xxx_hidden_MaxRetries = b.MaxRetries
	return m0
}

// Bytes field (in message)
type UUID struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Uuid []byte                 `protobuf:"bytes,1,opt,name=uuid"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UUID) Reset() {
	*x = UUID{}
	mi := &file_workflows_v1_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UUID) GetUuid() []byte {
	if x != nil {
		return x.xxx_hidden_Uuid
	}
	return nil
}

func (x *UUID) SetUuid(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Uuid = v
}

type UUID_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Uuid []byte
}

func (b0 UUID_builder) Build() *UUID {
	m0 := &UUID{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Uuid = b.Uuid
	return m0
}

// A lease for a task.
type TaskLease struct {
	state                                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Lease                             *durationpb.Duration   `protobuf:"bytes,1,opt,name=lease"`
	xxx_hidden_RecommendedWaitUntilNextExtension *durationpb.Duration   `protobuf:"bytes,2,opt,name=recommended_wait_until_next_extension,json=recommendedWaitUntilNextExtension"`
	unknownFields                                protoimpl.UnknownFields
	sizeCache                                    protoimpl.SizeCache
}

func (x *TaskLease) Reset() {
	*x = TaskLease{}
	mi := &file_workflows_v1_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLease) ProtoMessage() {}

func (x *TaskLease) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TaskLease) GetLease() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Lease
	}
	return nil
}

func (x *TaskLease) GetRecommendedWaitUntilNextExtension() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_RecommendedWaitUntilNextExtension
	}
	return nil
}

func (x *TaskLease) SetLease(v *durationpb.Duration) {
	x.xxx_hidden_Lease = v
}

func (x *TaskLease) SetRecommendedWaitUntilNextExtension(v *durationpb.Duration) {
	x.xxx_hidden_RecommendedWaitUntilNextExtension = v
}

func (x *TaskLease) HasLease() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Lease != nil
}

func (x *TaskLease) HasRecommendedWaitUntilNextExtension() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RecommendedWaitUntilNextExtension != nil
}

func (x *TaskLease) ClearLease() {
	x.xxx_hidden_Lease = nil
}

func (x *TaskLease) ClearRecommendedWaitUntilNextExtension() {
	x.xxx_hidden_RecommendedWaitUntilNextExtension = nil
}

type TaskLease_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Lease                             *durationpb.Duration
	RecommendedWaitUntilNextExtension *durationpb.Duration
}

func (b0 TaskLease_builder) Build() *TaskLease {
	m0 := &TaskLease{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Lease = b.Lease
	x.xxx_hidden_RecommendedWaitUntilNextExtension = b.RecommendedWaitUntilNextExtension
	return m0
}

// A time interval
type TimeInterval struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_StartTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime"`
	xxx_hidden_EndTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime"`
	xxx_hidden_StartExclusive bool                   `protobuf:"varint,3,opt,name=start_exclusive,json=startExclusive"`
	xxx_hidden_EndInclusive   bool                   `protobuf:"varint,4,opt,name=end_inclusive,json=endInclusive"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TimeInterval) Reset() {
	*x = TimeInterval{}
	mi := &file_workflows_v1_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInterval) ProtoMessage() {}

func (x *TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimeInterval) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StartTime
	}
	return nil
}

func (x *TimeInterval) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EndTime
	}
	return nil
}

func (x *TimeInterval) GetStartExclusive() bool {
	if x != nil {
		return x.xxx_hidden_StartExclusive
	}
	return false
}

func (x *TimeInterval) GetEndInclusive() bool {
	if x != nil {
		return x.xxx_hidden_EndInclusive
	}
	return false
}

func (x *TimeInterval) SetStartTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_StartTime = v
}

func (x *TimeInterval) SetEndTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EndTime = v
}

func (x *TimeInterval) SetStartExclusive(v bool) {
	x.xxx_hidden_StartExclusive = v
}

func (x *TimeInterval) SetEndInclusive(v bool) {
	x.xxx_hidden_EndInclusive = v
}

func (x *TimeInterval) HasStartTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartTime != nil
}

func (x *TimeInterval) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndTime != nil
}

func (x *TimeInterval) ClearStartTime() {
	x.xxx_hidden_StartTime = nil
}

func (x *TimeInterval) ClearEndTime() {
	x.xxx_hidden_EndTime = nil
}

type TimeInterval_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	StartTime *timestamppb.Timestamp
	EndTime   *timestamppb.Timestamp
	// We use exclusive for start and inclusive for end, because that way when both are false
	// we have a half-open interval [start, end) which is the default behaviour we want to achieve.
	// Flag indicating whether the start time is exclusive. If true, the start time is not included in the interval.
	StartExclusive bool
	// Flag indicating whether the end time is inclusive. If true, the end time is included in the interval.
	EndInclusive bool
}

func (b0 TimeInterval_builder) Build() *TimeInterval {
	m0 := &TimeInterval{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StartTime = b.StartTime
	x.xxx_hidden_EndTime = b.EndTime
	x.xxx_hidden_StartExclusive = b.StartExclusive
	x.xxx_hidden_EndInclusive = b.EndInclusive
	return m0
}

// An ID interval
type IDInterval struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_StartId        *UUID                  `protobuf:"bytes,1,opt,name=start_id,json=startId"`
	xxx_hidden_EndId          *UUID                  `protobuf:"bytes,2,opt,name=end_id,json=endId"`
	xxx_hidden_StartExclusive bool                   `protobuf:"varint,3,opt,name=start_exclusive,json=startExclusive"`
	xxx_hidden_EndInclusive   bool                   `protobuf:"varint,4,opt,name=end_inclusive,json=endInclusive"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *IDInterval) Reset() {
	*x = IDInterval{}
	mi := &file_workflows_v1_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDInterval) ProtoMessage() {}

func (x *IDInterval) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IDInterval) GetStartId() *UUID {
	if x != nil {
		return x.xxx_hidden_StartId
	}
	return nil
}

func (x *IDInterval) GetEndId() *UUID {
	if x != nil {
		return x.xxx_hidden_EndId
	}
	return nil
}

func (x *IDInterval) GetStartExclusive() bool {
	if x != nil {
		return x.xxx_hidden_StartExclusive
	}
	return false
}

func (x *IDInterval) GetEndInclusive() bool {
	if x != nil {
		return x.xxx_hidden_EndInclusive
	}
	return false
}

func (x *IDInterval) SetStartId(v *UUID) {
	x.xxx_hidden_StartId = v
}

func (x *IDInterval) SetEndId(v *UUID) {
	x.xxx_hidden_EndId = v
}

func (x *IDInterval) SetStartExclusive(v bool) {
	x.xxx_hidden_StartExclusive = v
}

func (x *IDInterval) SetEndInclusive(v bool) {
	x.xxx_hidden_EndInclusive = v
}

func (x *IDInterval) HasStartId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartId != nil
}

func (x *IDInterval) HasEndId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndId != nil
}

func (x *IDInterval) ClearStartId() {
	x.xxx_hidden_StartId = nil
}

func (x *IDInterval) ClearEndId() {
	x.xxx_hidden_EndId = nil
}

type IDInterval_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	StartId *UUID
	EndId   *UUID
	// We use exclusive for start and inclusive for end, because that way when both are false
	// we have a half-open interval [start, end) which is the default behaviour we want to achieve.
	// Flag indicating whether the start id is exclusive.
	// If true, the datapoint with the given start id is not included in the interval.
	StartExclusive bool
	// Flag indicating whether the end id is inclusive.
	// If true, the datapoint with the given end id is included in the interval.
	EndInclusive bool
}

func (b0 IDInterval_builder) Build() *IDInterval {
	m0 := &IDInterval{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StartId = b.StartId
	x.xxx_hidden_EndId = b.EndId
	x.xxx_hidden_StartExclusive = b.StartExclusive
	x.xxx_hidden_EndInclusive = b.EndInclusive
	return m0
}

// Pagination information for paginated queries
type Pagination struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Limit         int64                  `protobuf:"varint,1,opt,name=limit"`
	xxx_hidden_StartingAfter *UUID                  `protobuf:"bytes,2,opt,name=starting_after,json=startingAfter"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_workflows_v1_core_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *Pagination) GetStartingAfter() *UUID {
	if x != nil {
		return x.xxx_hidden_StartingAfter
	}
	return nil
}

func (x *Pagination) SetLimit(v int64) {
	x.xxx_hidden_Limit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Pagination) SetStartingAfter(v *UUID) {
	x.xxx_hidden_StartingAfter = v
}

func (x *Pagination) HasLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Pagination) HasStartingAfter() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartingAfter != nil
}

func (x *Pagination) ClearLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Limit = 0
}

func (x *Pagination) ClearStartingAfter() {
	x.xxx_hidden_StartingAfter = nil
}

type Pagination_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The maximum number of entries to return.
	Limit *int64
	// Return entries starting after this entry.
	// This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
	StartingAfter *UUID
}

func (b0 Pagination_builder) Build() *Pagination {
	m0 := &Pagination{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Limit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Limit = *b.Limit
	}
	x.xxx_hidden_StartingAfter = b.StartingAfter
	return m0
}

var File_workflows_v1_core_proto protoreflect.FileDescriptor

const file_workflows_v1_core_proto_rawDesc = "" +
	"\n" +
	"\x17workflows/v1/core.proto\x12\fworkflows.v1\x1a\x1egoogle/protobuf/duration.proto\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"^\n" +
	"\aCluster\x12\x12\n" +
	"\x04slug\x18\x02 \x01(\tR\x04slug\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12\x1c\n" +
	"\tdeletable\x18\x04 \x01(\bR\tdeletable\"\xa5\x03\n" +
	"\x03Job\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\ftrace_parent\x18\x03 \x01(\tR\vtraceParent\x12\x1a\n" +
	"\bcanceled\x18\x05 \x01(\bR\bcanceled\x12,\n" +
	"\x05state\x18\x06 \x01(\x0e2\x16.workflows.v1.JobStateR\x05state\x12=\n" +
	"\fsubmitted_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vsubmittedAt\x129\n" +
	"\n" +
	"started_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12@\n" +
	"\x0etask_summaries\x18\t \x03(\v2\x19.workflows.v1.TaskSummaryR\rtaskSummaries\x127\n" +
	"\rautomation_id\x18\n" +
	" \x01(\v2\x12.workflows.v1.UUIDR\fautomationIdJ\x04\b\x04\x10\x05\"\xa7\x02\n" +
	"\vTaskSummary\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12\x18\n" +
	"\adisplay\x18\x02 \x01(\tR\adisplay\x12-\n" +
	"\x05state\x18\x03 \x01(\x0e2\x17.workflows.v1.TaskStateR\x05state\x12/\n" +
	"\tparent_id\x18\x04 \x01(\v2\x12.workflows.v1.UUIDR\bparentId\x129\n" +
	"\n" +
	"started_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x129\n" +
	"\n" +
	"stopped_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstoppedAtJ\x04\b\x05\x10\x06\"\xae\x03\n" +
	"\x04Task\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12<\n" +
	"\n" +
	"identifier\x18\x02 \x01(\v2\x1c.workflows.v1.TaskIdentifierR\n" +
	"identifier\x12-\n" +
	"\x05state\x18\x03 \x01(\x0e2\x17.workflows.v1.TaskStateR\x05state\x12\x1b\n" +
	"\x05input\x18\x04 \x01(\fB\x05\xaa\x01\x02\b\x01R\x05input\x12\x1f\n" +
	"\adisplay\x18\x05 \x01(\tB\x05\xaa\x01\x02\b\x01R\adisplay\x12#\n" +
	"\x03job\x18\x06 \x01(\v2\x11.workflows.v1.JobR\x03job\x12/\n" +
	"\tparent_id\x18\a \x01(\v2\x12.workflows.v1.UUIDR\bparentId\x121\n" +
	"\n" +
	"depends_on\x18\b \x03(\v2\x12.workflows.v1.UUIDR\tdependsOn\x12-\n" +
	"\x05lease\x18\t \x01(\v2\x17.workflows.v1.TaskLeaseR\x05lease\x12\x1f\n" +
	"\vretry_count\x18\n" +
	" \x01(\x03R\n" +
	"retryCount\">\n" +
	"\x0eTaskIdentifier\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"1\n" +
	"\x05Tasks\x12(\n" +
	"\x05tasks\x18\x01 \x03(\v2\x12.workflows.v1.TaskR\x05tasks\"\xe6\x01\n" +
	"\x0eTaskSubmission\x12!\n" +
	"\fcluster_slug\x18\x01 \x01(\tR\vclusterSlug\x12<\n" +
	"\n" +
	"identifier\x18\x02 \x01(\v2\x1c.workflows.v1.TaskIdentifierR\n" +
	"identifier\x12\x14\n" +
	"\x05input\x18\x03 \x01(\fR\x05input\x12\x18\n" +
	"\adisplay\x18\x04 \x01(\tR\adisplay\x12\"\n" +
	"\fdependencies\x18\x05 \x03(\x03R\fdependencies\x12\x1f\n" +
	"\vmax_retries\x18\x06 \x01(\x03R\n" +
	"maxRetries\"\x1a\n" +
	"\x04UUID\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\fR\x04uuid\"\xa9\x01\n" +
	"\tTaskLease\x12/\n" +
	"\x05lease\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x05lease\x12k\n" +
	"%recommended_wait_until_next_extension\x18\x02 \x01(\v2\x19.google.protobuf.DurationR!recommendedWaitUntilNextExtension\"\xce\x01\n" +
	"\fTimeInterval\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12'\n" +
	"\x0fstart_exclusive\x18\x03 \x01(\bR\x0estartExclusive\x12#\n" +
	"\rend_inclusive\x18\x04 \x01(\bR\fendInclusive\"\xb4\x01\n" +
	"\n" +
	"IDInterval\x12-\n" +
	"\bstart_id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\astartId\x12)\n" +
	"\x06end_id\x18\x02 \x01(\v2\x12.workflows.v1.UUIDR\x05endId\x12'\n" +
	"\x0fstart_exclusive\x18\x03 \x01(\bR\x0estartExclusive\x12#\n" +
	"\rend_inclusive\x18\x04 \x01(\bR\fendInclusive\"k\n" +
	"\n" +
	"Pagination\x12\x1b\n" +
	"\x05limit\x18\x01 \x01(\x03B\x05\xaa\x01\x02\b\x01R\x05limit\x12@\n" +
	"\x0estarting_after\x18\x02 \x01(\v2\x12.workflows.v1.UUIDB\x05\xaa\x01\x02\b\x01R\rstartingAfter*k\n" +
	"\bJobState\x12\x19\n" +
	"\x15JOB_STATE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10JOB_STATE_QUEUED\x10\x01\x12\x15\n" +
	"\x11JOB_STATE_STARTED\x10\x02\x12\x17\n" +
	"\x13JOB_STATE_COMPLETED\x10\x03*\xa0\x01\n" +
	"\tTaskState\x12\x1a\n" +
	"\x16TASK_STATE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TASK_STATE_QUEUED\x10\x01\x12\x16\n" +
	"\x12TASK_STATE_RUNNING\x10\x02\x12\x17\n" +
	"\x13TASK_STATE_COMPUTED\x10\x03\x12\x15\n" +
	"\x11TASK_STATE_FAILED\x10\x04\x12\x18\n" +
	"\x14TASK_STATE_CANCELLED\x10\x05B\xbc\x01\n" +
	"\x10com.workflows.v1B\tCoreProtoP\x01ZBgithub.com/tilebox/tilebox-go/protogen/go/workflows/v1;workflowsv1\xa2\x02\x03WXX\xaa\x02\fWorkflows.V1\xca\x02\fWorkflows\\V1\xe2\x02\x18Workflows\\V1\\GPBMetadata\xea\x02\rWorkflows::V1\x92\x03\a\xd2>\x02\x10\x03\b\x02b\beditionsp\xe8\a"

var file_workflows_v1_core_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_workflows_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_workflows_v1_core_proto_goTypes = []any{
	(JobState)(0),                 // 0: workflows.v1.JobState
	(TaskState)(0),                // 1: workflows.v1.TaskState
	(*Cluster)(nil),               // 2: workflows.v1.Cluster
	(*Job)(nil),                   // 3: workflows.v1.Job
	(*TaskSummary)(nil),           // 4: workflows.v1.TaskSummary
	(*Task)(nil),                  // 5: workflows.v1.Task
	(*TaskIdentifier)(nil),        // 6: workflows.v1.TaskIdentifier
	(*Tasks)(nil),                 // 7: workflows.v1.Tasks
	(*TaskSubmission)(nil),        // 8: workflows.v1.TaskSubmission
	(*UUID)(nil),                  // 9: workflows.v1.UUID
	(*TaskLease)(nil),             // 10: workflows.v1.TaskLease
	(*TimeInterval)(nil),          // 11: workflows.v1.TimeInterval
	(*IDInterval)(nil),            // 12: workflows.v1.IDInterval
	(*Pagination)(nil),            // 13: workflows.v1.Pagination
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 15: google.protobuf.Duration
}
var file_workflows_v1_core_proto_depIdxs = []int32{
	9,  // 0: workflows.v1.Job.id:type_name -> workflows.v1.UUID
	0,  // 1: workflows.v1.Job.state:type_name -> workflows.v1.JobState
	14, // 2: workflows.v1.Job.submitted_at:type_name -> google.protobuf.Timestamp
	14, // 3: workflows.v1.Job.started_at:type_name -> google.protobuf.Timestamp
	4,  // 4: workflows.v1.Job.task_summaries:type_name -> workflows.v1.TaskSummary
	9,  // 5: workflows.v1.Job.automation_id:type_name -> workflows.v1.UUID
	9,  // 6: workflows.v1.TaskSummary.id:type_name -> workflows.v1.UUID
	1,  // 7: workflows.v1.TaskSummary.state:type_name -> workflows.v1.TaskState
	9,  // 8: workflows.v1.TaskSummary.parent_id:type_name -> workflows.v1.UUID
	14, // 9: workflows.v1.TaskSummary.started_at:type_name -> google.protobuf.Timestamp
	14, // 10: workflows.v1.TaskSummary.stopped_at:type_name -> google.protobuf.Timestamp
	9,  // 11: workflows.v1.Task.id:type_name -> workflows.v1.UUID
	6,  // 12: workflows.v1.Task.identifier:type_name -> workflows.v1.TaskIdentifier
	1,  // 13: workflows.v1.Task.state:type_name -> workflows.v1.TaskState
	3,  // 14: workflows.v1.Task.job:type_name -> workflows.v1.Job
	9,  // 15: workflows.v1.Task.parent_id:type_name -> workflows.v1.UUID
	9,  // 16: workflows.v1.Task.depends_on:type_name -> workflows.v1.UUID
	10, // 17: workflows.v1.Task.lease:type_name -> workflows.v1.TaskLease
	5,  // 18: workflows.v1.Tasks.tasks:type_name -> workflows.v1.Task
	6,  // 19: workflows.v1.TaskSubmission.identifier:type_name -> workflows.v1.TaskIdentifier
	15, // 20: workflows.v1.TaskLease.lease:type_name -> google.protobuf.Duration
	15, // 21: workflows.v1.TaskLease.recommended_wait_until_next_extension:type_name -> google.protobuf.Duration
	14, // 22: workflows.v1.TimeInterval.start_time:type_name -> google.protobuf.Timestamp
	14, // 23: workflows.v1.TimeInterval.end_time:type_name -> google.protobuf.Timestamp
	9,  // 24: workflows.v1.IDInterval.start_id:type_name -> workflows.v1.UUID
	9,  // 25: workflows.v1.IDInterval.end_id:type_name -> workflows.v1.UUID
	9,  // 26: workflows.v1.Pagination.starting_after:type_name -> workflows.v1.UUID
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_workflows_v1_core_proto_init() }
func file_workflows_v1_core_proto_init() {
	if File_workflows_v1_core_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_v1_core_proto_rawDesc), len(file_workflows_v1_core_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_workflows_v1_core_proto_goTypes,
		DependencyIndexes: file_workflows_v1_core_proto_depIdxs,
		EnumInfos:         file_workflows_v1_core_proto_enumTypes,
		MessageInfos:      file_workflows_v1_core_proto_msgTypes,
	}.Build()
	File_workflows_v1_core_proto = out.File
	file_workflows_v1_core_proto_goTypes = nil
	file_workflows_v1_core_proto_depIdxs = nil
}
