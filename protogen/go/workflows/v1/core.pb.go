// Core types for workflows.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: workflows/v1/core.proto

package workflowsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of a job.
type JobState int32

const (
	JobState_JOB_STATE_UNSPECIFIED JobState = 0
	// The job is queued and waiting to be run.
	JobState_JOB_STATE_QUEUED JobState = 1
	// At least one task of the job has been started.
	JobState_JOB_STATE_STARTED JobState = 2
	// All tasks of the job have been completed.
	JobState_JOB_STATE_COMPLETED JobState = 3
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STATE_UNSPECIFIED",
		1: "JOB_STATE_QUEUED",
		2: "JOB_STATE_STARTED",
		3: "JOB_STATE_COMPLETED",
	}
	JobState_value = map[string]int32{
		"JOB_STATE_UNSPECIFIED": 0,
		"JOB_STATE_QUEUED":      1,
		"JOB_STATE_STARTED":     2,
		"JOB_STATE_COMPLETED":   3,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_core_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_workflows_v1_core_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{0}
}

// The state of a task.
type TaskState int32

const (
	TaskState_TASK_STATE_UNSPECIFIED TaskState = 0
	// The task is queued and waiting to be run.
	TaskState_TASK_STATE_QUEUED TaskState = 1
	// The task is currently running on some task runner.
	TaskState_TASK_STATE_RUNNING TaskState = 2
	// The task has been computed and the output is available.
	// If the task also has no more outstanding children, it is considered COMPLETED.
	TaskState_TASK_STATE_COMPUTED TaskState = 3
	// The task has failed.
	TaskState_TASK_STATE_FAILED TaskState = 4
	// The task has been cancelled due to user request.
	TaskState_TASK_STATE_CANCELLED TaskState = 5
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TASK_STATE_UNSPECIFIED",
		1: "TASK_STATE_QUEUED",
		2: "TASK_STATE_RUNNING",
		3: "TASK_STATE_COMPUTED",
		4: "TASK_STATE_FAILED",
		5: "TASK_STATE_CANCELLED",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED": 0,
		"TASK_STATE_QUEUED":      1,
		"TASK_STATE_RUNNING":     2,
		"TASK_STATE_COMPUTED":    3,
		"TASK_STATE_FAILED":      4,
		"TASK_STATE_CANCELLED":   5,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_core_proto_enumTypes[1].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_workflows_v1_core_proto_enumTypes[1]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{1}
}

// A cluster is a grouping of tasks that are related.
type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 1 is reserved for a potential id field in the future.
	Slug          string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`                                  // The unique slug of the cluster within the namespace.
	DisplayName   string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // The display name of the cluster.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_workflows_v1_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Cluster) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// A job is a logical grouping of tasks that are related.
type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *UUID                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TraceParent   string                 `protobuf:"bytes,3,opt,name=trace_parent,json=traceParent,proto3" json:"trace_parent,omitempty"`
	Canceled      bool                   `protobuf:"varint,5,opt,name=canceled,proto3" json:"canceled,omitempty"`                               // Whether the job has been canceled.
	State         JobState               `protobuf:"varint,6,opt,name=state,proto3,enum=workflows.v1.JobState" json:"state,omitempty"`          // The current state of the job.
	SubmittedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`       // The time the job was submitted.
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`             // The time the job started running.
	TaskSummaries []*TaskSummary         `protobuf:"bytes,9,rep,name=task_summaries,json=taskSummaries,proto3" json:"task_summaries,omitempty"` // The task' summaries of the job.
	AutomationId  *UUID                  `protobuf:"bytes,10,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"`   // The automation that submitted the job.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_workflows_v1_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetTraceParent() string {
	if x != nil {
		return x.TraceParent
	}
	return ""
}

func (x *Job) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

func (x *Job) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STATE_UNSPECIFIED
}

func (x *Job) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Job) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Job) GetTaskSummaries() []*TaskSummary {
	if x != nil {
		return x.TaskSummaries
	}
	return nil
}

func (x *Job) GetAutomationId() *UUID {
	if x != nil {
		return x.AutomationId
	}
	return nil
}

// A summary of a task. Mainly used in the Console.
type TaskSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *UUID                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Display       string                 `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	State         TaskState              `protobuf:"varint,3,opt,name=state,proto3,enum=workflows.v1.TaskState" json:"state,omitempty"`
	ParentId      *UUID                  `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DependsOn     []*UUID                `protobuf:"bytes,5,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	StoppedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskSummary) Reset() {
	*x = TaskSummary{}
	mi := &file_workflows_v1_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSummary) ProtoMessage() {}

func (x *TaskSummary) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSummary.ProtoReflect.Descriptor instead.
func (*TaskSummary) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{2}
}

func (x *TaskSummary) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskSummary) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *TaskSummary) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *TaskSummary) GetParentId() *UUID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *TaskSummary) GetDependsOn() []*UUID {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *TaskSummary) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *TaskSummary) GetStoppedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StoppedAt
	}
	return nil
}

// A task is a single unit of work.
type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *UUID                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The id of the task instance. Contains the submission timestamp as the time part of the ULID.
	// Unique identifier for the task. Used by runners to match tasks to specific functions.
	Identifier *TaskIdentifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	State      TaskState       `protobuf:"varint,3,opt,name=state,proto3,enum=workflows.v1.TaskState" json:"state,omitempty"` // The current state of the task.
	Input      []byte          `protobuf:"bytes,4,opt,name=input,proto3,oneof" json:"input,omitempty"`                        // The serialized input parameters for the task in the format that this task expects.
	// Display is a human readable representation of the Task used for printing or visualizations
	Display       *string    `protobuf:"bytes,5,opt,name=display,proto3,oneof" json:"display,omitempty"`
	Job           *Job       `protobuf:"bytes,6,opt,name=job,proto3" json:"job,omitempty"`                                   // The job that this task belongs to.
	ParentId      *UUID      `protobuf:"bytes,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // The id of the parent task.
	DependsOn     []*UUID    `protobuf:"bytes,8,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`      // The ids of the tasks that this task depends on.
	Lease         *TaskLease `protobuf:"bytes,9,opt,name=lease,proto3" json:"lease,omitempty"`                               // The lease of the task.
	RetryCount    int64      `protobuf:"varint,10,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"` // The number of times this task has been retried.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_workflows_v1_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Task) GetIdentifier() *TaskIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Task) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *Task) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Task) GetDisplay() string {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return ""
}

func (x *Task) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Task) GetParentId() *UUID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *Task) GetDependsOn() []*UUID {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *Task) GetLease() *TaskLease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *Task) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

// An identifier for a task.
type TaskIdentifier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // A unique name of a task (unique within a namespace).
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // Version of the task.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskIdentifier) Reset() {
	*x = TaskIdentifier{}
	mi := &file_workflows_v1_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentifier) ProtoMessage() {}

func (x *TaskIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentifier.ProtoReflect.Descriptor instead.
func (*TaskIdentifier) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{4}
}

func (x *TaskIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskIdentifier) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// A list of tasks.
type Tasks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tasks) Reset() {
	*x = Tasks{}
	mi := &file_workflows_v1_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasks) ProtoMessage() {}

func (x *Tasks) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasks.ProtoReflect.Descriptor instead.
func (*Tasks) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{5}
}

func (x *Tasks) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// TaskSubmission is a message of a task that is just about to be submitted, either by submitting a job or as a subtask.
type TaskSubmission struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	ClusterSlug string                 `protobuf:"bytes,1,opt,name=cluster_slug,json=clusterSlug,proto3" json:"cluster_slug,omitempty"` // The cluster that this task should be run on
	Identifier  *TaskIdentifier        `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`                      // The task identifier
	Input       []byte                 `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`                                // The serialized task instance
	Display     string                 `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`                            // A human-readable description of the task
	// A list of indices, corresponding to tasks in the list of sub_tasks that this SubTask is part of.
	Dependencies  []int64 `protobuf:"varint,5,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`
	MaxRetries    int64   `protobuf:"varint,6,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"` // The maximum number of retries for this task.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskSubmission) Reset() {
	*x = TaskSubmission{}
	mi := &file_workflows_v1_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSubmission) ProtoMessage() {}

func (x *TaskSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSubmission.ProtoReflect.Descriptor instead.
func (*TaskSubmission) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{6}
}

func (x *TaskSubmission) GetClusterSlug() string {
	if x != nil {
		return x.ClusterSlug
	}
	return ""
}

func (x *TaskSubmission) GetIdentifier() *TaskIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *TaskSubmission) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TaskSubmission) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *TaskSubmission) GetDependencies() []int64 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *TaskSubmission) GetMaxRetries() int64 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

// Bytes field (in message)
type UUID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UUID) Reset() {
	*x = UUID{}
	mi := &file_workflows_v1_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{7}
}

func (x *UUID) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// A lease for a task.
type TaskLease struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	Lease                             *durationpb.Duration   `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	RecommendedWaitUntilNextExtension *durationpb.Duration   `protobuf:"bytes,2,opt,name=recommended_wait_until_next_extension,json=recommendedWaitUntilNextExtension,proto3" json:"recommended_wait_until_next_extension,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *TaskLease) Reset() {
	*x = TaskLease{}
	mi := &file_workflows_v1_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLease) ProtoMessage() {}

func (x *TaskLease) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLease.ProtoReflect.Descriptor instead.
func (*TaskLease) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{8}
}

func (x *TaskLease) GetLease() *durationpb.Duration {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *TaskLease) GetRecommendedWaitUntilNextExtension() *durationpb.Duration {
	if x != nil {
		return x.RecommendedWaitUntilNextExtension
	}
	return nil
}

// An ID interval
type IDInterval struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	StartId *UUID                  `protobuf:"bytes,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"` // The id of the first data point in the interval.
	EndId   *UUID                  `protobuf:"bytes,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`       // The id of the last data point in the interval.
	// We use exclusive for start and inclusive for end, because that way when both are false
	// we have a half-open interval [start, end) which is the default behaviour we want to achieve.
	// Flag indicating whether the start id is exclusive.
	// If true, the datapoint with the given start id is not included in the interval.
	StartExclusive bool `protobuf:"varint,3,opt,name=start_exclusive,json=startExclusive,proto3" json:"start_exclusive,omitempty"`
	// Flag indicating whether the end id is inclusive.
	// If true, the datapoint with the given end id is included in the interval.
	EndInclusive  bool `protobuf:"varint,4,opt,name=end_inclusive,json=endInclusive,proto3" json:"end_inclusive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDInterval) Reset() {
	*x = IDInterval{}
	mi := &file_workflows_v1_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDInterval) ProtoMessage() {}

func (x *IDInterval) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDInterval.ProtoReflect.Descriptor instead.
func (*IDInterval) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{9}
}

func (x *IDInterval) GetStartId() *UUID {
	if x != nil {
		return x.StartId
	}
	return nil
}

func (x *IDInterval) GetEndId() *UUID {
	if x != nil {
		return x.EndId
	}
	return nil
}

func (x *IDInterval) GetStartExclusive() bool {
	if x != nil {
		return x.StartExclusive
	}
	return false
}

func (x *IDInterval) GetEndInclusive() bool {
	if x != nil {
		return x.EndInclusive
	}
	return false
}

// Pagination information for paginated queries
type Pagination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of entries to return.
	Limit *int64 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Return entries starting after this entry.
	// This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
	StartingAfter *UUID `protobuf:"bytes,2,opt,name=starting_after,json=startingAfter,proto3,oneof" json:"starting_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_workflows_v1_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_workflows_v1_core_proto_rawDescGZIP(), []int{10}
}

func (x *Pagination) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *Pagination) GetStartingAfter() *UUID {
	if x != nil {
		return x.StartingAfter
	}
	return nil
}

var File_workflows_v1_core_proto protoreflect.FileDescriptor

const file_workflows_v1_core_proto_rawDesc = "" +
	"\n" +
	"\x17workflows/v1/core.proto\x12\fworkflows.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"@\n" +
	"\aCluster\x12\x12\n" +
	"\x04slug\x18\x02 \x01(\tR\x04slug\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\"\xa5\x03\n" +
	"\x03Job\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\ftrace_parent\x18\x03 \x01(\tR\vtraceParent\x12\x1a\n" +
	"\bcanceled\x18\x05 \x01(\bR\bcanceled\x12,\n" +
	"\x05state\x18\x06 \x01(\x0e2\x16.workflows.v1.JobStateR\x05state\x12=\n" +
	"\fsubmitted_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vsubmittedAt\x129\n" +
	"\n" +
	"started_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12@\n" +
	"\x0etask_summaries\x18\t \x03(\v2\x19.workflows.v1.TaskSummaryR\rtaskSummaries\x127\n" +
	"\rautomation_id\x18\n" +
	" \x01(\v2\x12.workflows.v1.UUIDR\fautomationIdJ\x04\b\x04\x10\x05\"\xd4\x02\n" +
	"\vTaskSummary\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12\x18\n" +
	"\adisplay\x18\x02 \x01(\tR\adisplay\x12-\n" +
	"\x05state\x18\x03 \x01(\x0e2\x17.workflows.v1.TaskStateR\x05state\x12/\n" +
	"\tparent_id\x18\x04 \x01(\v2\x12.workflows.v1.UUIDR\bparentId\x121\n" +
	"\n" +
	"depends_on\x18\x05 \x03(\v2\x12.workflows.v1.UUIDR\tdependsOn\x129\n" +
	"\n" +
	"started_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x129\n" +
	"\n" +
	"stopped_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstoppedAt\"\xc0\x03\n" +
	"\x04Task\x12\"\n" +
	"\x02id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\x02id\x12<\n" +
	"\n" +
	"identifier\x18\x02 \x01(\v2\x1c.workflows.v1.TaskIdentifierR\n" +
	"identifier\x12-\n" +
	"\x05state\x18\x03 \x01(\x0e2\x17.workflows.v1.TaskStateR\x05state\x12\x19\n" +
	"\x05input\x18\x04 \x01(\fH\x00R\x05input\x88\x01\x01\x12\x1d\n" +
	"\adisplay\x18\x05 \x01(\tH\x01R\adisplay\x88\x01\x01\x12#\n" +
	"\x03job\x18\x06 \x01(\v2\x11.workflows.v1.JobR\x03job\x12/\n" +
	"\tparent_id\x18\a \x01(\v2\x12.workflows.v1.UUIDR\bparentId\x121\n" +
	"\n" +
	"depends_on\x18\b \x03(\v2\x12.workflows.v1.UUIDR\tdependsOn\x12-\n" +
	"\x05lease\x18\t \x01(\v2\x17.workflows.v1.TaskLeaseR\x05lease\x12\x1f\n" +
	"\vretry_count\x18\n" +
	" \x01(\x03R\n" +
	"retryCountB\b\n" +
	"\x06_inputB\n" +
	"\n" +
	"\b_display\">\n" +
	"\x0eTaskIdentifier\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"1\n" +
	"\x05Tasks\x12(\n" +
	"\x05tasks\x18\x01 \x03(\v2\x12.workflows.v1.TaskR\x05tasks\"\xe6\x01\n" +
	"\x0eTaskSubmission\x12!\n" +
	"\fcluster_slug\x18\x01 \x01(\tR\vclusterSlug\x12<\n" +
	"\n" +
	"identifier\x18\x02 \x01(\v2\x1c.workflows.v1.TaskIdentifierR\n" +
	"identifier\x12\x14\n" +
	"\x05input\x18\x03 \x01(\fR\x05input\x12\x18\n" +
	"\adisplay\x18\x04 \x01(\tR\adisplay\x12\"\n" +
	"\fdependencies\x18\x05 \x03(\x03R\fdependencies\x12\x1f\n" +
	"\vmax_retries\x18\x06 \x01(\x03R\n" +
	"maxRetries\"\x1a\n" +
	"\x04UUID\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\fR\x04uuid\"\xa9\x01\n" +
	"\tTaskLease\x12/\n" +
	"\x05lease\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x05lease\x12k\n" +
	"%recommended_wait_until_next_extension\x18\x02 \x01(\v2\x19.google.protobuf.DurationR!recommendedWaitUntilNextExtension\"\xb4\x01\n" +
	"\n" +
	"IDInterval\x12-\n" +
	"\bstart_id\x18\x01 \x01(\v2\x12.workflows.v1.UUIDR\astartId\x12)\n" +
	"\x06end_id\x18\x02 \x01(\v2\x12.workflows.v1.UUIDR\x05endId\x12'\n" +
	"\x0fstart_exclusive\x18\x03 \x01(\bR\x0estartExclusive\x12#\n" +
	"\rend_inclusive\x18\x04 \x01(\bR\fendInclusive\"\x84\x01\n" +
	"\n" +
	"Pagination\x12\x19\n" +
	"\x05limit\x18\x01 \x01(\x03H\x00R\x05limit\x88\x01\x01\x12>\n" +
	"\x0estarting_after\x18\x02 \x01(\v2\x12.workflows.v1.UUIDH\x01R\rstartingAfter\x88\x01\x01B\b\n" +
	"\x06_limitB\x11\n" +
	"\x0f_starting_after*k\n" +
	"\bJobState\x12\x19\n" +
	"\x15JOB_STATE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10JOB_STATE_QUEUED\x10\x01\x12\x15\n" +
	"\x11JOB_STATE_STARTED\x10\x02\x12\x17\n" +
	"\x13JOB_STATE_COMPLETED\x10\x03*\xa0\x01\n" +
	"\tTaskState\x12\x1a\n" +
	"\x16TASK_STATE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TASK_STATE_QUEUED\x10\x01\x12\x16\n" +
	"\x12TASK_STATE_RUNNING\x10\x02\x12\x17\n" +
	"\x13TASK_STATE_COMPUTED\x10\x03\x12\x15\n" +
	"\x11TASK_STATE_FAILED\x10\x04\x12\x18\n" +
	"\x14TASK_STATE_CANCELLED\x10\x05B\xb2\x01\n" +
	"\x10com.workflows.v1B\tCoreProtoP\x01ZBgithub.com/tilebox/tilebox-go/protogen/go/workflows/v1;workflowsv1\xa2\x02\x03WXX\xaa\x02\fWorkflows.V1\xca\x02\fWorkflows\\V1\xe2\x02\x18Workflows\\V1\\GPBMetadata\xea\x02\rWorkflows::V1b\x06proto3"

var (
	file_workflows_v1_core_proto_rawDescOnce sync.Once
	file_workflows_v1_core_proto_rawDescData []byte
)

func file_workflows_v1_core_proto_rawDescGZIP() []byte {
	file_workflows_v1_core_proto_rawDescOnce.Do(func() {
		file_workflows_v1_core_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_workflows_v1_core_proto_rawDesc), len(file_workflows_v1_core_proto_rawDesc)))
	})
	return file_workflows_v1_core_proto_rawDescData
}

var file_workflows_v1_core_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_workflows_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_workflows_v1_core_proto_goTypes = []any{
	(JobState)(0),                 // 0: workflows.v1.JobState
	(TaskState)(0),                // 1: workflows.v1.TaskState
	(*Cluster)(nil),               // 2: workflows.v1.Cluster
	(*Job)(nil),                   // 3: workflows.v1.Job
	(*TaskSummary)(nil),           // 4: workflows.v1.TaskSummary
	(*Task)(nil),                  // 5: workflows.v1.Task
	(*TaskIdentifier)(nil),        // 6: workflows.v1.TaskIdentifier
	(*Tasks)(nil),                 // 7: workflows.v1.Tasks
	(*TaskSubmission)(nil),        // 8: workflows.v1.TaskSubmission
	(*UUID)(nil),                  // 9: workflows.v1.UUID
	(*TaskLease)(nil),             // 10: workflows.v1.TaskLease
	(*IDInterval)(nil),            // 11: workflows.v1.IDInterval
	(*Pagination)(nil),            // 12: workflows.v1.Pagination
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 14: google.protobuf.Duration
}
var file_workflows_v1_core_proto_depIdxs = []int32{
	9,  // 0: workflows.v1.Job.id:type_name -> workflows.v1.UUID
	0,  // 1: workflows.v1.Job.state:type_name -> workflows.v1.JobState
	13, // 2: workflows.v1.Job.submitted_at:type_name -> google.protobuf.Timestamp
	13, // 3: workflows.v1.Job.started_at:type_name -> google.protobuf.Timestamp
	4,  // 4: workflows.v1.Job.task_summaries:type_name -> workflows.v1.TaskSummary
	9,  // 5: workflows.v1.Job.automation_id:type_name -> workflows.v1.UUID
	9,  // 6: workflows.v1.TaskSummary.id:type_name -> workflows.v1.UUID
	1,  // 7: workflows.v1.TaskSummary.state:type_name -> workflows.v1.TaskState
	9,  // 8: workflows.v1.TaskSummary.parent_id:type_name -> workflows.v1.UUID
	9,  // 9: workflows.v1.TaskSummary.depends_on:type_name -> workflows.v1.UUID
	13, // 10: workflows.v1.TaskSummary.started_at:type_name -> google.protobuf.Timestamp
	13, // 11: workflows.v1.TaskSummary.stopped_at:type_name -> google.protobuf.Timestamp
	9,  // 12: workflows.v1.Task.id:type_name -> workflows.v1.UUID
	6,  // 13: workflows.v1.Task.identifier:type_name -> workflows.v1.TaskIdentifier
	1,  // 14: workflows.v1.Task.state:type_name -> workflows.v1.TaskState
	3,  // 15: workflows.v1.Task.job:type_name -> workflows.v1.Job
	9,  // 16: workflows.v1.Task.parent_id:type_name -> workflows.v1.UUID
	9,  // 17: workflows.v1.Task.depends_on:type_name -> workflows.v1.UUID
	10, // 18: workflows.v1.Task.lease:type_name -> workflows.v1.TaskLease
	5,  // 19: workflows.v1.Tasks.tasks:type_name -> workflows.v1.Task
	6,  // 20: workflows.v1.TaskSubmission.identifier:type_name -> workflows.v1.TaskIdentifier
	14, // 21: workflows.v1.TaskLease.lease:type_name -> google.protobuf.Duration
	14, // 22: workflows.v1.TaskLease.recommended_wait_until_next_extension:type_name -> google.protobuf.Duration
	9,  // 23: workflows.v1.IDInterval.start_id:type_name -> workflows.v1.UUID
	9,  // 24: workflows.v1.IDInterval.end_id:type_name -> workflows.v1.UUID
	9,  // 25: workflows.v1.Pagination.starting_after:type_name -> workflows.v1.UUID
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_workflows_v1_core_proto_init() }
func file_workflows_v1_core_proto_init() {
	if File_workflows_v1_core_proto != nil {
		return
	}
	file_workflows_v1_core_proto_msgTypes[3].OneofWrappers = []any{}
	file_workflows_v1_core_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_v1_core_proto_rawDesc), len(file_workflows_v1_core_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_workflows_v1_core_proto_goTypes,
		DependencyIndexes: file_workflows_v1_core_proto_depIdxs,
		EnumInfos:         file_workflows_v1_core_proto_enumTypes,
		MessageInfos:      file_workflows_v1_core_proto_msgTypes,
	}.Build()
	File_workflows_v1_core_proto = out.File
	file_workflows_v1_core_proto_goTypes = nil
	file_workflows_v1_core_proto_depIdxs = nil
}
