// The external API for managing automations in the Workflows service.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflows/v1/automation.proto

package workflowsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/protogen/go/workflows/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AutomationServiceName is the fully-qualified name of the AutomationService service.
	AutomationServiceName = "workflows.v1.AutomationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AutomationServiceListStorageLocationsProcedure is the fully-qualified name of the
	// AutomationService's ListStorageLocations RPC.
	AutomationServiceListStorageLocationsProcedure = "/workflows.v1.AutomationService/ListStorageLocations"
	// AutomationServiceGetStorageLocationProcedure is the fully-qualified name of the
	// AutomationService's GetStorageLocation RPC.
	AutomationServiceGetStorageLocationProcedure = "/workflows.v1.AutomationService/GetStorageLocation"
	// AutomationServiceCreateStorageLocationProcedure is the fully-qualified name of the
	// AutomationService's CreateStorageLocation RPC.
	AutomationServiceCreateStorageLocationProcedure = "/workflows.v1.AutomationService/CreateStorageLocation"
	// AutomationServiceDeleteStorageLocationProcedure is the fully-qualified name of the
	// AutomationService's DeleteStorageLocation RPC.
	AutomationServiceDeleteStorageLocationProcedure = "/workflows.v1.AutomationService/DeleteStorageLocation"
	// AutomationServiceListAutomationsProcedure is the fully-qualified name of the AutomationService's
	// ListAutomations RPC.
	AutomationServiceListAutomationsProcedure = "/workflows.v1.AutomationService/ListAutomations"
	// AutomationServiceGetAutomationProcedure is the fully-qualified name of the AutomationService's
	// GetAutomation RPC.
	AutomationServiceGetAutomationProcedure = "/workflows.v1.AutomationService/GetAutomation"
	// AutomationServiceCreateAutomationProcedure is the fully-qualified name of the AutomationService's
	// CreateAutomation RPC.
	AutomationServiceCreateAutomationProcedure = "/workflows.v1.AutomationService/CreateAutomation"
	// AutomationServiceUpdateAutomationProcedure is the fully-qualified name of the AutomationService's
	// UpdateAutomation RPC.
	AutomationServiceUpdateAutomationProcedure = "/workflows.v1.AutomationService/UpdateAutomation"
	// AutomationServiceDeleteAutomationProcedure is the fully-qualified name of the AutomationService's
	// DeleteAutomation RPC.
	AutomationServiceDeleteAutomationProcedure = "/workflows.v1.AutomationService/DeleteAutomation"
)

// AutomationServiceClient is a client for the workflows.v1.AutomationService service.
type AutomationServiceClient interface {
	// ListStorageLocations lists all the storage buckets that are available for use as bucket triggers.
	ListStorageLocations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.StorageLocations], error)
	// GetStorageLocation gets a storage location by its ID.
	GetStorageLocation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[v1.StorageLocation], error)
	// CreateStorageLocation creates a new storage bucket.
	CreateStorageLocation(context.Context, *connect.Request[v1.StorageLocation]) (*connect.Response[v1.StorageLocation], error)
	// DeleteStorageLocation deletes a storage location.
	DeleteStorageLocation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error)
	// ListAutomations lists all the automations that are currently registered in a namespace.
	ListAutomations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Automations], error)
	// GetAutomation gets an automation by its ID.
	GetAutomation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[v1.AutomationPrototype], error)
	// CreateAutomation creates a new automation in a namespace.
	CreateAutomation(context.Context, *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error)
	// UpdateAutomation updates an automation in a namespace.
	UpdateAutomation(context.Context, *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error)
	// DeleteAutomation deletes an automation from a namespace.
	DeleteAutomation(context.Context, *connect.Request[v1.DeleteAutomationRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAutomationServiceClient constructs a client for the workflows.v1.AutomationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAutomationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AutomationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	automationServiceMethods := v1.File_workflows_v1_automation_proto.Services().ByName("AutomationService").Methods()
	return &automationServiceClient{
		listStorageLocations: connect.NewClient[emptypb.Empty, v1.StorageLocations](
			httpClient,
			baseURL+AutomationServiceListStorageLocationsProcedure,
			connect.WithSchema(automationServiceMethods.ByName("ListStorageLocations")),
			connect.WithClientOptions(opts...),
		),
		getStorageLocation: connect.NewClient[v1.UUID, v1.StorageLocation](
			httpClient,
			baseURL+AutomationServiceGetStorageLocationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("GetStorageLocation")),
			connect.WithClientOptions(opts...),
		),
		createStorageLocation: connect.NewClient[v1.StorageLocation, v1.StorageLocation](
			httpClient,
			baseURL+AutomationServiceCreateStorageLocationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("CreateStorageLocation")),
			connect.WithClientOptions(opts...),
		),
		deleteStorageLocation: connect.NewClient[v1.UUID, emptypb.Empty](
			httpClient,
			baseURL+AutomationServiceDeleteStorageLocationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("DeleteStorageLocation")),
			connect.WithClientOptions(opts...),
		),
		listAutomations: connect.NewClient[emptypb.Empty, v1.Automations](
			httpClient,
			baseURL+AutomationServiceListAutomationsProcedure,
			connect.WithSchema(automationServiceMethods.ByName("ListAutomations")),
			connect.WithClientOptions(opts...),
		),
		getAutomation: connect.NewClient[v1.UUID, v1.AutomationPrototype](
			httpClient,
			baseURL+AutomationServiceGetAutomationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("GetAutomation")),
			connect.WithClientOptions(opts...),
		),
		createAutomation: connect.NewClient[v1.AutomationPrototype, v1.AutomationPrototype](
			httpClient,
			baseURL+AutomationServiceCreateAutomationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("CreateAutomation")),
			connect.WithClientOptions(opts...),
		),
		updateAutomation: connect.NewClient[v1.AutomationPrototype, v1.AutomationPrototype](
			httpClient,
			baseURL+AutomationServiceUpdateAutomationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("UpdateAutomation")),
			connect.WithClientOptions(opts...),
		),
		deleteAutomation: connect.NewClient[v1.DeleteAutomationRequest, emptypb.Empty](
			httpClient,
			baseURL+AutomationServiceDeleteAutomationProcedure,
			connect.WithSchema(automationServiceMethods.ByName("DeleteAutomation")),
			connect.WithClientOptions(opts...),
		),
	}
}

// automationServiceClient implements AutomationServiceClient.
type automationServiceClient struct {
	listStorageLocations  *connect.Client[emptypb.Empty, v1.StorageLocations]
	getStorageLocation    *connect.Client[v1.UUID, v1.StorageLocation]
	createStorageLocation *connect.Client[v1.StorageLocation, v1.StorageLocation]
	deleteStorageLocation *connect.Client[v1.UUID, emptypb.Empty]
	listAutomations       *connect.Client[emptypb.Empty, v1.Automations]
	getAutomation         *connect.Client[v1.UUID, v1.AutomationPrototype]
	createAutomation      *connect.Client[v1.AutomationPrototype, v1.AutomationPrototype]
	updateAutomation      *connect.Client[v1.AutomationPrototype, v1.AutomationPrototype]
	deleteAutomation      *connect.Client[v1.DeleteAutomationRequest, emptypb.Empty]
}

// ListStorageLocations calls workflows.v1.AutomationService.ListStorageLocations.
func (c *automationServiceClient) ListStorageLocations(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.StorageLocations], error) {
	return c.listStorageLocations.CallUnary(ctx, req)
}

// GetStorageLocation calls workflows.v1.AutomationService.GetStorageLocation.
func (c *automationServiceClient) GetStorageLocation(ctx context.Context, req *connect.Request[v1.UUID]) (*connect.Response[v1.StorageLocation], error) {
	return c.getStorageLocation.CallUnary(ctx, req)
}

// CreateStorageLocation calls workflows.v1.AutomationService.CreateStorageLocation.
func (c *automationServiceClient) CreateStorageLocation(ctx context.Context, req *connect.Request[v1.StorageLocation]) (*connect.Response[v1.StorageLocation], error) {
	return c.createStorageLocation.CallUnary(ctx, req)
}

// DeleteStorageLocation calls workflows.v1.AutomationService.DeleteStorageLocation.
func (c *automationServiceClient) DeleteStorageLocation(ctx context.Context, req *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteStorageLocation.CallUnary(ctx, req)
}

// ListAutomations calls workflows.v1.AutomationService.ListAutomations.
func (c *automationServiceClient) ListAutomations(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Automations], error) {
	return c.listAutomations.CallUnary(ctx, req)
}

// GetAutomation calls workflows.v1.AutomationService.GetAutomation.
func (c *automationServiceClient) GetAutomation(ctx context.Context, req *connect.Request[v1.UUID]) (*connect.Response[v1.AutomationPrototype], error) {
	return c.getAutomation.CallUnary(ctx, req)
}

// CreateAutomation calls workflows.v1.AutomationService.CreateAutomation.
func (c *automationServiceClient) CreateAutomation(ctx context.Context, req *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error) {
	return c.createAutomation.CallUnary(ctx, req)
}

// UpdateAutomation calls workflows.v1.AutomationService.UpdateAutomation.
func (c *automationServiceClient) UpdateAutomation(ctx context.Context, req *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error) {
	return c.updateAutomation.CallUnary(ctx, req)
}

// DeleteAutomation calls workflows.v1.AutomationService.DeleteAutomation.
func (c *automationServiceClient) DeleteAutomation(ctx context.Context, req *connect.Request[v1.DeleteAutomationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAutomation.CallUnary(ctx, req)
}

// AutomationServiceHandler is an implementation of the workflows.v1.AutomationService service.
type AutomationServiceHandler interface {
	// ListStorageLocations lists all the storage buckets that are available for use as bucket triggers.
	ListStorageLocations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.StorageLocations], error)
	// GetStorageLocation gets a storage location by its ID.
	GetStorageLocation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[v1.StorageLocation], error)
	// CreateStorageLocation creates a new storage bucket.
	CreateStorageLocation(context.Context, *connect.Request[v1.StorageLocation]) (*connect.Response[v1.StorageLocation], error)
	// DeleteStorageLocation deletes a storage location.
	DeleteStorageLocation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error)
	// ListAutomations lists all the automations that are currently registered in a namespace.
	ListAutomations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Automations], error)
	// GetAutomation gets an automation by its ID.
	GetAutomation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[v1.AutomationPrototype], error)
	// CreateAutomation creates a new automation in a namespace.
	CreateAutomation(context.Context, *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error)
	// UpdateAutomation updates an automation in a namespace.
	UpdateAutomation(context.Context, *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error)
	// DeleteAutomation deletes an automation from a namespace.
	DeleteAutomation(context.Context, *connect.Request[v1.DeleteAutomationRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAutomationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAutomationServiceHandler(svc AutomationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	automationServiceMethods := v1.File_workflows_v1_automation_proto.Services().ByName("AutomationService").Methods()
	automationServiceListStorageLocationsHandler := connect.NewUnaryHandler(
		AutomationServiceListStorageLocationsProcedure,
		svc.ListStorageLocations,
		connect.WithSchema(automationServiceMethods.ByName("ListStorageLocations")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceGetStorageLocationHandler := connect.NewUnaryHandler(
		AutomationServiceGetStorageLocationProcedure,
		svc.GetStorageLocation,
		connect.WithSchema(automationServiceMethods.ByName("GetStorageLocation")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceCreateStorageLocationHandler := connect.NewUnaryHandler(
		AutomationServiceCreateStorageLocationProcedure,
		svc.CreateStorageLocation,
		connect.WithSchema(automationServiceMethods.ByName("CreateStorageLocation")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceDeleteStorageLocationHandler := connect.NewUnaryHandler(
		AutomationServiceDeleteStorageLocationProcedure,
		svc.DeleteStorageLocation,
		connect.WithSchema(automationServiceMethods.ByName("DeleteStorageLocation")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceListAutomationsHandler := connect.NewUnaryHandler(
		AutomationServiceListAutomationsProcedure,
		svc.ListAutomations,
		connect.WithSchema(automationServiceMethods.ByName("ListAutomations")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceGetAutomationHandler := connect.NewUnaryHandler(
		AutomationServiceGetAutomationProcedure,
		svc.GetAutomation,
		connect.WithSchema(automationServiceMethods.ByName("GetAutomation")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceCreateAutomationHandler := connect.NewUnaryHandler(
		AutomationServiceCreateAutomationProcedure,
		svc.CreateAutomation,
		connect.WithSchema(automationServiceMethods.ByName("CreateAutomation")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceUpdateAutomationHandler := connect.NewUnaryHandler(
		AutomationServiceUpdateAutomationProcedure,
		svc.UpdateAutomation,
		connect.WithSchema(automationServiceMethods.ByName("UpdateAutomation")),
		connect.WithHandlerOptions(opts...),
	)
	automationServiceDeleteAutomationHandler := connect.NewUnaryHandler(
		AutomationServiceDeleteAutomationProcedure,
		svc.DeleteAutomation,
		connect.WithSchema(automationServiceMethods.ByName("DeleteAutomation")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workflows.v1.AutomationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AutomationServiceListStorageLocationsProcedure:
			automationServiceListStorageLocationsHandler.ServeHTTP(w, r)
		case AutomationServiceGetStorageLocationProcedure:
			automationServiceGetStorageLocationHandler.ServeHTTP(w, r)
		case AutomationServiceCreateStorageLocationProcedure:
			automationServiceCreateStorageLocationHandler.ServeHTTP(w, r)
		case AutomationServiceDeleteStorageLocationProcedure:
			automationServiceDeleteStorageLocationHandler.ServeHTTP(w, r)
		case AutomationServiceListAutomationsProcedure:
			automationServiceListAutomationsHandler.ServeHTTP(w, r)
		case AutomationServiceGetAutomationProcedure:
			automationServiceGetAutomationHandler.ServeHTTP(w, r)
		case AutomationServiceCreateAutomationProcedure:
			automationServiceCreateAutomationHandler.ServeHTTP(w, r)
		case AutomationServiceUpdateAutomationProcedure:
			automationServiceUpdateAutomationHandler.ServeHTTP(w, r)
		case AutomationServiceDeleteAutomationProcedure:
			automationServiceDeleteAutomationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAutomationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAutomationServiceHandler struct{}

func (UnimplementedAutomationServiceHandler) ListStorageLocations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.StorageLocations], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.ListStorageLocations is not implemented"))
}

func (UnimplementedAutomationServiceHandler) GetStorageLocation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[v1.StorageLocation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.GetStorageLocation is not implemented"))
}

func (UnimplementedAutomationServiceHandler) CreateStorageLocation(context.Context, *connect.Request[v1.StorageLocation]) (*connect.Response[v1.StorageLocation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.CreateStorageLocation is not implemented"))
}

func (UnimplementedAutomationServiceHandler) DeleteStorageLocation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.DeleteStorageLocation is not implemented"))
}

func (UnimplementedAutomationServiceHandler) ListAutomations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Automations], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.ListAutomations is not implemented"))
}

func (UnimplementedAutomationServiceHandler) GetAutomation(context.Context, *connect.Request[v1.UUID]) (*connect.Response[v1.AutomationPrototype], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.GetAutomation is not implemented"))
}

func (UnimplementedAutomationServiceHandler) CreateAutomation(context.Context, *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.CreateAutomation is not implemented"))
}

func (UnimplementedAutomationServiceHandler) UpdateAutomation(context.Context, *connect.Request[v1.AutomationPrototype]) (*connect.Response[v1.AutomationPrototype], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.UpdateAutomation is not implemented"))
}

func (UnimplementedAutomationServiceHandler) DeleteAutomation(context.Context, *connect.Request[v1.DeleteAutomationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.AutomationService.DeleteAutomation is not implemented"))
}
