// The external API for managing triggers in the Workflows service.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflows/v1/trigger.proto

package workflowsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/protogen/go/workflows/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TriggerServiceName is the fully-qualified name of the TriggerService service.
	TriggerServiceName = "workflows.v1.TriggerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TriggerServiceListBucketsProcedure is the fully-qualified name of the TriggerService's
	// ListBuckets RPC.
	TriggerServiceListBucketsProcedure = "/workflows.v1.TriggerService/ListBuckets"
	// TriggerServiceUpsertBucketTriggerProcedure is the fully-qualified name of the TriggerService's
	// UpsertBucketTrigger RPC.
	TriggerServiceUpsertBucketTriggerProcedure = "/workflows.v1.TriggerService/UpsertBucketTrigger"
	// TriggerServiceListBucketTriggersProcedure is the fully-qualified name of the TriggerService's
	// ListBucketTriggers RPC.
	TriggerServiceListBucketTriggersProcedure = "/workflows.v1.TriggerService/ListBucketTriggers"
	// TriggerServiceDeleteBucketTriggerProcedure is the fully-qualified name of the TriggerService's
	// DeleteBucketTrigger RPC.
	TriggerServiceDeleteBucketTriggerProcedure = "/workflows.v1.TriggerService/DeleteBucketTrigger"
	// TriggerServiceUpsertCronTriggerProcedure is the fully-qualified name of the TriggerService's
	// UpsertCronTrigger RPC.
	TriggerServiceUpsertCronTriggerProcedure = "/workflows.v1.TriggerService/UpsertCronTrigger"
	// TriggerServiceListCronTriggersProcedure is the fully-qualified name of the TriggerService's
	// ListCronTriggers RPC.
	TriggerServiceListCronTriggersProcedure = "/workflows.v1.TriggerService/ListCronTriggers"
	// TriggerServiceDeleteCronTriggerProcedure is the fully-qualified name of the TriggerService's
	// DeleteCronTrigger RPC.
	TriggerServiceDeleteCronTriggerProcedure = "/workflows.v1.TriggerService/DeleteCronTrigger"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	triggerServiceServiceDescriptor                   = v1.File_workflows_v1_trigger_proto.Services().ByName("TriggerService")
	triggerServiceListBucketsMethodDescriptor         = triggerServiceServiceDescriptor.Methods().ByName("ListBuckets")
	triggerServiceUpsertBucketTriggerMethodDescriptor = triggerServiceServiceDescriptor.Methods().ByName("UpsertBucketTrigger")
	triggerServiceListBucketTriggersMethodDescriptor  = triggerServiceServiceDescriptor.Methods().ByName("ListBucketTriggers")
	triggerServiceDeleteBucketTriggerMethodDescriptor = triggerServiceServiceDescriptor.Methods().ByName("DeleteBucketTrigger")
	triggerServiceUpsertCronTriggerMethodDescriptor   = triggerServiceServiceDescriptor.Methods().ByName("UpsertCronTrigger")
	triggerServiceListCronTriggersMethodDescriptor    = triggerServiceServiceDescriptor.Methods().ByName("ListCronTriggers")
	triggerServiceDeleteCronTriggerMethodDescriptor   = triggerServiceServiceDescriptor.Methods().ByName("DeleteCronTrigger")
)

// TriggerServiceClient is a client for the workflows.v1.TriggerService service.
type TriggerServiceClient interface {
	// ListBuckets lists all the storage buckets that are available for use as bucket triggers.
	ListBuckets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Buckets], error)
	// UpsertBucketTrigger creates or updates a bucket trigger in a namespace.
	UpsertBucketTrigger(context.Context, *connect.Request[v1.BucketTrigger]) (*connect.Response[v1.BucketTrigger], error)
	// ListBucketTriggers lists all the bucket triggers that are currently registered in a namespace.
	ListBucketTriggers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error)
	// DeleteBucketTrigger deletes a bucket trigger from a namespace.
	DeleteBucketTrigger(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error)
	// UpsertCronTrigger creates or updates a cron trigger in a namespace.
	UpsertCronTrigger(context.Context, *connect.Request[v1.CronTrigger]) (*connect.Response[v1.CronTrigger], error)
	// ListCronTriggers lists all the cron triggers that are currently registered in a namespace.
	ListCronTriggers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error)
	// DeleteCronTrigger deletes a cron trigger from a namespace.
	DeleteCronTrigger(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error)
}

// NewTriggerServiceClient constructs a client for the workflows.v1.TriggerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTriggerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TriggerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &triggerServiceClient{
		listBuckets: connect.NewClient[emptypb.Empty, v1.Buckets](
			httpClient,
			baseURL+TriggerServiceListBucketsProcedure,
			connect.WithSchema(triggerServiceListBucketsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertBucketTrigger: connect.NewClient[v1.BucketTrigger, v1.BucketTrigger](
			httpClient,
			baseURL+TriggerServiceUpsertBucketTriggerProcedure,
			connect.WithSchema(triggerServiceUpsertBucketTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBucketTriggers: connect.NewClient[emptypb.Empty, v1.BucketTriggers](
			httpClient,
			baseURL+TriggerServiceListBucketTriggersProcedure,
			connect.WithSchema(triggerServiceListBucketTriggersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteBucketTrigger: connect.NewClient[v1.UUID, emptypb.Empty](
			httpClient,
			baseURL+TriggerServiceDeleteBucketTriggerProcedure,
			connect.WithSchema(triggerServiceDeleteBucketTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertCronTrigger: connect.NewClient[v1.CronTrigger, v1.CronTrigger](
			httpClient,
			baseURL+TriggerServiceUpsertCronTriggerProcedure,
			connect.WithSchema(triggerServiceUpsertCronTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCronTriggers: connect.NewClient[emptypb.Empty, v1.BucketTriggers](
			httpClient,
			baseURL+TriggerServiceListCronTriggersProcedure,
			connect.WithSchema(triggerServiceListCronTriggersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCronTrigger: connect.NewClient[v1.UUID, emptypb.Empty](
			httpClient,
			baseURL+TriggerServiceDeleteCronTriggerProcedure,
			connect.WithSchema(triggerServiceDeleteCronTriggerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// triggerServiceClient implements TriggerServiceClient.
type triggerServiceClient struct {
	listBuckets         *connect.Client[emptypb.Empty, v1.Buckets]
	upsertBucketTrigger *connect.Client[v1.BucketTrigger, v1.BucketTrigger]
	listBucketTriggers  *connect.Client[emptypb.Empty, v1.BucketTriggers]
	deleteBucketTrigger *connect.Client[v1.UUID, emptypb.Empty]
	upsertCronTrigger   *connect.Client[v1.CronTrigger, v1.CronTrigger]
	listCronTriggers    *connect.Client[emptypb.Empty, v1.BucketTriggers]
	deleteCronTrigger   *connect.Client[v1.UUID, emptypb.Empty]
}

// ListBuckets calls workflows.v1.TriggerService.ListBuckets.
func (c *triggerServiceClient) ListBuckets(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Buckets], error) {
	return c.listBuckets.CallUnary(ctx, req)
}

// UpsertBucketTrigger calls workflows.v1.TriggerService.UpsertBucketTrigger.
func (c *triggerServiceClient) UpsertBucketTrigger(ctx context.Context, req *connect.Request[v1.BucketTrigger]) (*connect.Response[v1.BucketTrigger], error) {
	return c.upsertBucketTrigger.CallUnary(ctx, req)
}

// ListBucketTriggers calls workflows.v1.TriggerService.ListBucketTriggers.
func (c *triggerServiceClient) ListBucketTriggers(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error) {
	return c.listBucketTriggers.CallUnary(ctx, req)
}

// DeleteBucketTrigger calls workflows.v1.TriggerService.DeleteBucketTrigger.
func (c *triggerServiceClient) DeleteBucketTrigger(ctx context.Context, req *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteBucketTrigger.CallUnary(ctx, req)
}

// UpsertCronTrigger calls workflows.v1.TriggerService.UpsertCronTrigger.
func (c *triggerServiceClient) UpsertCronTrigger(ctx context.Context, req *connect.Request[v1.CronTrigger]) (*connect.Response[v1.CronTrigger], error) {
	return c.upsertCronTrigger.CallUnary(ctx, req)
}

// ListCronTriggers calls workflows.v1.TriggerService.ListCronTriggers.
func (c *triggerServiceClient) ListCronTriggers(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error) {
	return c.listCronTriggers.CallUnary(ctx, req)
}

// DeleteCronTrigger calls workflows.v1.TriggerService.DeleteCronTrigger.
func (c *triggerServiceClient) DeleteCronTrigger(ctx context.Context, req *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteCronTrigger.CallUnary(ctx, req)
}

// TriggerServiceHandler is an implementation of the workflows.v1.TriggerService service.
type TriggerServiceHandler interface {
	// ListBuckets lists all the storage buckets that are available for use as bucket triggers.
	ListBuckets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Buckets], error)
	// UpsertBucketTrigger creates or updates a bucket trigger in a namespace.
	UpsertBucketTrigger(context.Context, *connect.Request[v1.BucketTrigger]) (*connect.Response[v1.BucketTrigger], error)
	// ListBucketTriggers lists all the bucket triggers that are currently registered in a namespace.
	ListBucketTriggers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error)
	// DeleteBucketTrigger deletes a bucket trigger from a namespace.
	DeleteBucketTrigger(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error)
	// UpsertCronTrigger creates or updates a cron trigger in a namespace.
	UpsertCronTrigger(context.Context, *connect.Request[v1.CronTrigger]) (*connect.Response[v1.CronTrigger], error)
	// ListCronTriggers lists all the cron triggers that are currently registered in a namespace.
	ListCronTriggers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error)
	// DeleteCronTrigger deletes a cron trigger from a namespace.
	DeleteCronTrigger(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error)
}

// NewTriggerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTriggerServiceHandler(svc TriggerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	triggerServiceListBucketsHandler := connect.NewUnaryHandler(
		TriggerServiceListBucketsProcedure,
		svc.ListBuckets,
		connect.WithSchema(triggerServiceListBucketsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	triggerServiceUpsertBucketTriggerHandler := connect.NewUnaryHandler(
		TriggerServiceUpsertBucketTriggerProcedure,
		svc.UpsertBucketTrigger,
		connect.WithSchema(triggerServiceUpsertBucketTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	triggerServiceListBucketTriggersHandler := connect.NewUnaryHandler(
		TriggerServiceListBucketTriggersProcedure,
		svc.ListBucketTriggers,
		connect.WithSchema(triggerServiceListBucketTriggersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	triggerServiceDeleteBucketTriggerHandler := connect.NewUnaryHandler(
		TriggerServiceDeleteBucketTriggerProcedure,
		svc.DeleteBucketTrigger,
		connect.WithSchema(triggerServiceDeleteBucketTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	triggerServiceUpsertCronTriggerHandler := connect.NewUnaryHandler(
		TriggerServiceUpsertCronTriggerProcedure,
		svc.UpsertCronTrigger,
		connect.WithSchema(triggerServiceUpsertCronTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	triggerServiceListCronTriggersHandler := connect.NewUnaryHandler(
		TriggerServiceListCronTriggersProcedure,
		svc.ListCronTriggers,
		connect.WithSchema(triggerServiceListCronTriggersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	triggerServiceDeleteCronTriggerHandler := connect.NewUnaryHandler(
		TriggerServiceDeleteCronTriggerProcedure,
		svc.DeleteCronTrigger,
		connect.WithSchema(triggerServiceDeleteCronTriggerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/workflows.v1.TriggerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TriggerServiceListBucketsProcedure:
			triggerServiceListBucketsHandler.ServeHTTP(w, r)
		case TriggerServiceUpsertBucketTriggerProcedure:
			triggerServiceUpsertBucketTriggerHandler.ServeHTTP(w, r)
		case TriggerServiceListBucketTriggersProcedure:
			triggerServiceListBucketTriggersHandler.ServeHTTP(w, r)
		case TriggerServiceDeleteBucketTriggerProcedure:
			triggerServiceDeleteBucketTriggerHandler.ServeHTTP(w, r)
		case TriggerServiceUpsertCronTriggerProcedure:
			triggerServiceUpsertCronTriggerHandler.ServeHTTP(w, r)
		case TriggerServiceListCronTriggersProcedure:
			triggerServiceListCronTriggersHandler.ServeHTTP(w, r)
		case TriggerServiceDeleteCronTriggerProcedure:
			triggerServiceDeleteCronTriggerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTriggerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTriggerServiceHandler struct{}

func (UnimplementedTriggerServiceHandler) ListBuckets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Buckets], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.ListBuckets is not implemented"))
}

func (UnimplementedTriggerServiceHandler) UpsertBucketTrigger(context.Context, *connect.Request[v1.BucketTrigger]) (*connect.Response[v1.BucketTrigger], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.UpsertBucketTrigger is not implemented"))
}

func (UnimplementedTriggerServiceHandler) ListBucketTriggers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.ListBucketTriggers is not implemented"))
}

func (UnimplementedTriggerServiceHandler) DeleteBucketTrigger(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.DeleteBucketTrigger is not implemented"))
}

func (UnimplementedTriggerServiceHandler) UpsertCronTrigger(context.Context, *connect.Request[v1.CronTrigger]) (*connect.Response[v1.CronTrigger], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.UpsertCronTrigger is not implemented"))
}

func (UnimplementedTriggerServiceHandler) ListCronTriggers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.BucketTriggers], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.ListCronTriggers is not implemented"))
}

func (UnimplementedTriggerServiceHandler) DeleteCronTrigger(context.Context, *connect.Request[v1.UUID]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.TriggerService.DeleteCronTrigger is not implemented"))
}
