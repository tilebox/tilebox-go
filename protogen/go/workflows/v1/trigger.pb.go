// The external API for managing triggers in the Workflows service.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: workflows/v1/trigger.proto

package workflowsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BucketType specifies a kind of storage bucket that we support.
type BucketType int32

const (
	BucketType_BUCKET_TYPE_UNSPECIFIED BucketType = 0
	BucketType_BUCKET_TYPE_GCS         BucketType = 1 // Google Cloud Storage
	BucketType_BUCKET_TYPE_S3          BucketType = 2 // Amazon Web Services S3
)

// Enum value maps for BucketType.
var (
	BucketType_name = map[int32]string{
		0: "BUCKET_TYPE_UNSPECIFIED",
		1: "BUCKET_TYPE_GCS",
		2: "BUCKET_TYPE_S3",
	}
	BucketType_value = map[string]int32{
		"BUCKET_TYPE_UNSPECIFIED": 0,
		"BUCKET_TYPE_GCS":         1,
		"BUCKET_TYPE_S3":          2,
	}
)

func (x BucketType) Enum() *BucketType {
	p := new(BucketType)
	*p = x
	return p
}

func (x BucketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_v1_trigger_proto_enumTypes[0].Descriptor()
}

func (BucketType) Type() protoreflect.EnumType {
	return &file_workflows_v1_trigger_proto_enumTypes[0]
}

func (x BucketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketType.Descriptor instead.
func (BucketType) EnumDescriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{0}
}

// Bucket is a storage bucket that can be used as a trigger source.
type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *UUID      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // Unique identifier for the bucket
	Slug string     `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`                               // The unique identifier for the bucket in the storage system
	Name string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // The human-readable name of the bucket
	Type BucketType `protobuf:"varint,4,opt,name=type,proto3,enum=workflows.v1.BucketType" json:"type,omitempty"` // The type of the bucket, e.g. GCS, S3
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{0}
}

func (x *Bucket) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bucket) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Bucket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bucket) GetType() BucketType {
	if x != nil {
		return x.Type
	}
	return BucketType_BUCKET_TYPE_UNSPECIFIED
}

// Buckets is a list of storage buckets
type Buckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *Buckets) Reset() {
	*x = Buckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buckets) ProtoMessage() {}

func (x *Buckets) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buckets.ProtoReflect.Descriptor instead.
func (*Buckets) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{1}
}

func (x *Buckets) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// BucketTrigger is NRT trigger registered on a bucket, that will trigger a task submission when an object matching
// the glob pattern is uploaded.
type BucketTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *UUID           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                      // Unique identifier for the trigger
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // A human-readable name for the trigger
	Bucket      *Bucket         `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`                              // The bucket to watch
	GlobPattern string          `protobuf:"bytes,4,opt,name=glob_pattern,json=globPattern,proto3" json:"glob_pattern,omitempty"` // A glob pattern to match objects in the bucket
	Prototype   *TaskSubmission `protobuf:"bytes,5,opt,name=prototype,proto3" json:"prototype,omitempty"`                        // The task submission to trigger
}

func (x *BucketTrigger) Reset() {
	*x = BucketTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketTrigger) ProtoMessage() {}

func (x *BucketTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketTrigger.ProtoReflect.Descriptor instead.
func (*BucketTrigger) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{2}
}

func (x *BucketTrigger) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BucketTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BucketTrigger) GetBucket() *Bucket {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *BucketTrigger) GetGlobPattern() string {
	if x != nil {
		return x.GlobPattern
	}
	return ""
}

func (x *BucketTrigger) GetPrototype() *TaskSubmission {
	if x != nil {
		return x.Prototype
	}
	return nil
}

// BucketTriggerDetail is a bucket trigger with additional (auto-generated) information
type BucketTriggerDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger     *BucketTrigger `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`                            // The bucket trigger
	TraceParent string         `protobuf:"bytes,2,opt,name=trace_parent,json=traceParent,proto3" json:"trace_parent,omitempty"` // A common trace parent for all jobs / tasks created by this trigger
	LastJob     *UUID          `protobuf:"bytes,3,opt,name=last_job,json=lastJob,proto3,oneof" json:"last_job,omitempty"`       // The ID of the last job created by this trigger
}

func (x *BucketTriggerDetail) Reset() {
	*x = BucketTriggerDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketTriggerDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketTriggerDetail) ProtoMessage() {}

func (x *BucketTriggerDetail) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketTriggerDetail.ProtoReflect.Descriptor instead.
func (*BucketTriggerDetail) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{3}
}

func (x *BucketTriggerDetail) GetTrigger() *BucketTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *BucketTriggerDetail) GetTraceParent() string {
	if x != nil {
		return x.TraceParent
	}
	return ""
}

func (x *BucketTriggerDetail) GetLastJob() *UUID {
	if x != nil {
		return x.LastJob
	}
	return nil
}

// BucketTriggers is a list of bucket triggers
type BucketTriggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Triggers []*BucketTrigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (x *BucketTriggers) Reset() {
	*x = BucketTriggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketTriggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketTriggers) ProtoMessage() {}

func (x *BucketTriggers) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketTriggers.ProtoReflect.Descriptor instead.
func (*BucketTriggers) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{4}
}

func (x *BucketTriggers) GetTriggers() []*BucketTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

// BucketTask is a task that is triggered by a bucket trigger.
type BucketTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"` // The bucket that triggered the task
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"` // The object that triggered the task
	Args   []byte `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`     // Additional arguments for the task, to be deserialized by the task
}

func (x *BucketTask) Reset() {
	*x = BucketTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketTask) ProtoMessage() {}

func (x *BucketTask) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketTask.ProtoReflect.Descriptor instead.
func (*BucketTask) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{5}
}

func (x *BucketTask) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BucketTask) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *BucketTask) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// CronTrigger is a trigger that will trigger a task submission on a schedule.
type CronTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *UUID           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               // Unique identifier for the trigger
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`           // A human-readable name for the trigger
	Schedule  string          `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`   // A cron schedule for the trigger, e.g. "0 0 * * *" (every day at midnight)
	Prototype *TaskSubmission `protobuf:"bytes,4,opt,name=prototype,proto3" json:"prototype,omitempty"` // The task submission to trigger
}

func (x *CronTrigger) Reset() {
	*x = CronTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTrigger) ProtoMessage() {}

func (x *CronTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTrigger.ProtoReflect.Descriptor instead.
func (*CronTrigger) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{6}
}

func (x *CronTrigger) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CronTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronTrigger) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CronTrigger) GetPrototype() *TaskSubmission {
	if x != nil {
		return x.Prototype
	}
	return nil
}

// CronTriggerDetail is a cron trigger with additional (auto-generated) information
type CronTriggerDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger     *CronTrigger           `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`                            // The cron trigger
	TraceParent string                 `protobuf:"bytes,2,opt,name=trace_parent,json=traceParent,proto3" json:"trace_parent,omitempty"` // A common trace parent for all jobs / tasks created by this trigger
	LastJob     *UUID                  `protobuf:"bytes,3,opt,name=last_job,json=lastJob,proto3,oneof" json:"last_job,omitempty"`       // The ID of the last job created by this trigger
	Next        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=next,proto3" json:"next,omitempty"`                                  // The next time the trigger will fire
}

func (x *CronTriggerDetail) Reset() {
	*x = CronTriggerDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronTriggerDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTriggerDetail) ProtoMessage() {}

func (x *CronTriggerDetail) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTriggerDetail.ProtoReflect.Descriptor instead.
func (*CronTriggerDetail) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{7}
}

func (x *CronTriggerDetail) GetTrigger() *CronTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CronTriggerDetail) GetTraceParent() string {
	if x != nil {
		return x.TraceParent
	}
	return ""
}

func (x *CronTriggerDetail) GetLastJob() *UUID {
	if x != nil {
		return x.LastJob
	}
	return nil
}

func (x *CronTriggerDetail) GetNext() *timestamppb.Timestamp {
	if x != nil {
		return x.Next
	}
	return nil
}

// CronTriggers is a list of cron triggers
type CronTriggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Triggers []*CronTrigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (x *CronTriggers) Reset() {
	*x = CronTriggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronTriggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTriggers) ProtoMessage() {}

func (x *CronTriggers) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTriggers.ProtoReflect.Descriptor instead.
func (*CronTriggers) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{8}
}

func (x *CronTriggers) GetTriggers() []*CronTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

// CronTask is a task that is triggered by a cron trigger.
type CronTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"` // The time the cron trigger fired
	Args        []byte                 `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`                                  // Additional arguments for the task, to be deserialized by the task
}

func (x *CronTask) Reset() {
	*x = CronTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflows_v1_trigger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTask) ProtoMessage() {}

func (x *CronTask) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_v1_trigger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTask.ProtoReflect.Descriptor instead.
func (*CronTask) Descriptor() ([]byte, []int) {
	return file_workflows_v1_trigger_proto_rawDescGZIP(), []int{9}
}

func (x *CronTask) GetTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerTime
	}
	return nil
}

func (x *CronTask) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_workflows_v1_trigger_proto protoreflect.FileDescriptor

var file_workflows_v1_trigger_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x07, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f,
	0x62, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x35, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x22, 0x49, 0x0a, 0x0e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x50, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52, 0x07,
	0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x22, 0x45, 0x0a, 0x0c, 0x43, 0x72, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x5d,
	0x0a, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x2a, 0x52, 0x0a,
	0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x33, 0x10,
	0x02, 0x32, 0x84, 0x04, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0xb5, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f,
	0x78, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x57, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflows_v1_trigger_proto_rawDescOnce sync.Once
	file_workflows_v1_trigger_proto_rawDescData = file_workflows_v1_trigger_proto_rawDesc
)

func file_workflows_v1_trigger_proto_rawDescGZIP() []byte {
	file_workflows_v1_trigger_proto_rawDescOnce.Do(func() {
		file_workflows_v1_trigger_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflows_v1_trigger_proto_rawDescData)
	})
	return file_workflows_v1_trigger_proto_rawDescData
}

var file_workflows_v1_trigger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_workflows_v1_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_workflows_v1_trigger_proto_goTypes = []interface{}{
	(BucketType)(0),               // 0: workflows.v1.BucketType
	(*Bucket)(nil),                // 1: workflows.v1.Bucket
	(*Buckets)(nil),               // 2: workflows.v1.Buckets
	(*BucketTrigger)(nil),         // 3: workflows.v1.BucketTrigger
	(*BucketTriggerDetail)(nil),   // 4: workflows.v1.BucketTriggerDetail
	(*BucketTriggers)(nil),        // 5: workflows.v1.BucketTriggers
	(*BucketTask)(nil),            // 6: workflows.v1.BucketTask
	(*CronTrigger)(nil),           // 7: workflows.v1.CronTrigger
	(*CronTriggerDetail)(nil),     // 8: workflows.v1.CronTriggerDetail
	(*CronTriggers)(nil),          // 9: workflows.v1.CronTriggers
	(*CronTask)(nil),              // 10: workflows.v1.CronTask
	(*UUID)(nil),                  // 11: workflows.v1.UUID
	(*TaskSubmission)(nil),        // 12: workflows.v1.TaskSubmission
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 14: google.protobuf.Empty
}
var file_workflows_v1_trigger_proto_depIdxs = []int32{
	11, // 0: workflows.v1.Bucket.id:type_name -> workflows.v1.UUID
	0,  // 1: workflows.v1.Bucket.type:type_name -> workflows.v1.BucketType
	1,  // 2: workflows.v1.Buckets.buckets:type_name -> workflows.v1.Bucket
	11, // 3: workflows.v1.BucketTrigger.id:type_name -> workflows.v1.UUID
	1,  // 4: workflows.v1.BucketTrigger.bucket:type_name -> workflows.v1.Bucket
	12, // 5: workflows.v1.BucketTrigger.prototype:type_name -> workflows.v1.TaskSubmission
	3,  // 6: workflows.v1.BucketTriggerDetail.trigger:type_name -> workflows.v1.BucketTrigger
	11, // 7: workflows.v1.BucketTriggerDetail.last_job:type_name -> workflows.v1.UUID
	3,  // 8: workflows.v1.BucketTriggers.triggers:type_name -> workflows.v1.BucketTrigger
	11, // 9: workflows.v1.CronTrigger.id:type_name -> workflows.v1.UUID
	12, // 10: workflows.v1.CronTrigger.prototype:type_name -> workflows.v1.TaskSubmission
	7,  // 11: workflows.v1.CronTriggerDetail.trigger:type_name -> workflows.v1.CronTrigger
	11, // 12: workflows.v1.CronTriggerDetail.last_job:type_name -> workflows.v1.UUID
	13, // 13: workflows.v1.CronTriggerDetail.next:type_name -> google.protobuf.Timestamp
	7,  // 14: workflows.v1.CronTriggers.triggers:type_name -> workflows.v1.CronTrigger
	13, // 15: workflows.v1.CronTask.trigger_time:type_name -> google.protobuf.Timestamp
	14, // 16: workflows.v1.TriggerService.ListBuckets:input_type -> google.protobuf.Empty
	3,  // 17: workflows.v1.TriggerService.UpsertBucketTrigger:input_type -> workflows.v1.BucketTrigger
	14, // 18: workflows.v1.TriggerService.ListBucketTriggers:input_type -> google.protobuf.Empty
	11, // 19: workflows.v1.TriggerService.DeleteBucketTrigger:input_type -> workflows.v1.UUID
	7,  // 20: workflows.v1.TriggerService.UpsertCronTrigger:input_type -> workflows.v1.CronTrigger
	14, // 21: workflows.v1.TriggerService.ListCronTriggers:input_type -> google.protobuf.Empty
	11, // 22: workflows.v1.TriggerService.DeleteCronTrigger:input_type -> workflows.v1.UUID
	2,  // 23: workflows.v1.TriggerService.ListBuckets:output_type -> workflows.v1.Buckets
	3,  // 24: workflows.v1.TriggerService.UpsertBucketTrigger:output_type -> workflows.v1.BucketTrigger
	5,  // 25: workflows.v1.TriggerService.ListBucketTriggers:output_type -> workflows.v1.BucketTriggers
	14, // 26: workflows.v1.TriggerService.DeleteBucketTrigger:output_type -> google.protobuf.Empty
	7,  // 27: workflows.v1.TriggerService.UpsertCronTrigger:output_type -> workflows.v1.CronTrigger
	5,  // 28: workflows.v1.TriggerService.ListCronTriggers:output_type -> workflows.v1.BucketTriggers
	14, // 29: workflows.v1.TriggerService.DeleteCronTrigger:output_type -> google.protobuf.Empty
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_workflows_v1_trigger_proto_init() }
func file_workflows_v1_trigger_proto_init() {
	if File_workflows_v1_trigger_proto != nil {
		return
	}
	file_workflows_v1_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_workflows_v1_trigger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketTriggerDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketTriggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronTriggerDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronTriggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflows_v1_trigger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workflows_v1_trigger_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_workflows_v1_trigger_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflows_v1_trigger_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_v1_trigger_proto_goTypes,
		DependencyIndexes: file_workflows_v1_trigger_proto_depIdxs,
		EnumInfos:         file_workflows_v1_trigger_proto_enumTypes,
		MessageInfos:      file_workflows_v1_trigger_proto_msgTypes,
	}.Build()
	File_workflows_v1_trigger_proto = out.File
	file_workflows_v1_trigger_proto_rawDesc = nil
	file_workflows_v1_trigger_proto_goTypes = nil
	file_workflows_v1_trigger_proto_depIdxs = nil
}
