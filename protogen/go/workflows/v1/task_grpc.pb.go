// The internal API a task runner uses to communicate with a workflows-service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workflows/v1/task.proto

package workflowsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskService_NextTask_FullMethodName        = "/workflows.v1.TaskService/NextTask"
	TaskService_TaskFailed_FullMethodName      = "/workflows.v1.TaskService/TaskFailed"
	TaskService_ExtendTaskLease_FullMethodName = "/workflows.v1.TaskService/ExtendTaskLease"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	// NextTask marks a task as computed and asks for the next task to run.
	// If no task marked as computed is sent, it is assumed that the task runner just started up or was idling so
	// the task server will send a task to run using a work-stealing algorithm.
	// If a task marked as computed is sent, the task server will send a next task to run using a depth first execution
	// algorithm, and only fall back to work-stealing if otherwise no tasks are available.
	// If the next_task_to_run field of the request is not set, a next task will never be returned, but a task
	// can still be marked as computed this way.
	NextTask(ctx context.Context, in *NextTaskRequest, opts ...grpc.CallOption) (*NextTaskResponse, error)
	// TaskFailed tells the task server that we have failed to compute a task.
	// The task server will then mark the task as queued or failed, depending on the retry policy, and possibly cancel the job.
	// If a task runner wants to continue executing tasks, it should afterwards fetch a new one using GetTaskToRun.
	TaskFailed(ctx context.Context, in *TaskFailedRequest, opts ...grpc.CallOption) (*TaskStateResponse, error)
	// ExtendTaskLease is called by the task runner to extend the lease on a task.
	// On success, the response will contain the new lease expiration time.
	// If the task does not need to be extended, the response will be empty.
	ExtendTaskLease(ctx context.Context, in *TaskLeaseRequest, opts ...grpc.CallOption) (*TaskLease, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) NextTask(ctx context.Context, in *NextTaskRequest, opts ...grpc.CallOption) (*NextTaskResponse, error) {
	out := new(NextTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_NextTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskFailed(ctx context.Context, in *TaskFailedRequest, opts ...grpc.CallOption) (*TaskStateResponse, error) {
	out := new(TaskStateResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskFailed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ExtendTaskLease(ctx context.Context, in *TaskLeaseRequest, opts ...grpc.CallOption) (*TaskLease, error) {
	out := new(TaskLease)
	err := c.cc.Invoke(ctx, TaskService_ExtendTaskLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	// NextTask marks a task as computed and asks for the next task to run.
	// If no task marked as computed is sent, it is assumed that the task runner just started up or was idling so
	// the task server will send a task to run using a work-stealing algorithm.
	// If a task marked as computed is sent, the task server will send a next task to run using a depth first execution
	// algorithm, and only fall back to work-stealing if otherwise no tasks are available.
	// If the next_task_to_run field of the request is not set, a next task will never be returned, but a task
	// can still be marked as computed this way.
	NextTask(context.Context, *NextTaskRequest) (*NextTaskResponse, error)
	// TaskFailed tells the task server that we have failed to compute a task.
	// The task server will then mark the task as queued or failed, depending on the retry policy, and possibly cancel the job.
	// If a task runner wants to continue executing tasks, it should afterwards fetch a new one using GetTaskToRun.
	TaskFailed(context.Context, *TaskFailedRequest) (*TaskStateResponse, error)
	// ExtendTaskLease is called by the task runner to extend the lease on a task.
	// On success, the response will contain the new lease expiration time.
	// If the task does not need to be extended, the response will be empty.
	ExtendTaskLease(context.Context, *TaskLeaseRequest) (*TaskLease, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) NextTask(context.Context, *NextTaskRequest) (*NextTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextTask not implemented")
}
func (UnimplementedTaskServiceServer) TaskFailed(context.Context, *TaskFailedRequest) (*TaskStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFailed not implemented")
}
func (UnimplementedTaskServiceServer) ExtendTaskLease(context.Context, *TaskLeaseRequest) (*TaskLease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendTaskLease not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_NextTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).NextTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_NextTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).NextTask(ctx, req.(*NextTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskFailed(ctx, req.(*TaskFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ExtendTaskLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ExtendTaskLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ExtendTaskLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ExtendTaskLease(ctx, req.(*TaskLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflows.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextTask",
			Handler:    _TaskService_NextTask_Handler,
		},
		{
			MethodName: "TaskFailed",
			Handler:    _TaskService_TaskFailed_Handler,
		},
		{
			MethodName: "ExtendTaskLease",
			Handler:    _TaskService_ExtendTaskLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows/v1/task.proto",
}
