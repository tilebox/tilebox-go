// Proto messages and service definition for the APIs related to loading and quering data.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: datasets/v1/data_ingestion.proto

package datasetsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/protogen/go/datasets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataIngestionServiceName is the fully-qualified name of the DataIngestionService service.
	DataIngestionServiceName = "datasets.v1.DataIngestionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataIngestionServiceIngestDatapointsProcedure is the fully-qualified name of the
	// DataIngestionService's IngestDatapoints RPC.
	DataIngestionServiceIngestDatapointsProcedure = "/datasets.v1.DataIngestionService/IngestDatapoints"
	// DataIngestionServiceDeleteDatapointsProcedure is the fully-qualified name of the
	// DataIngestionService's DeleteDatapoints RPC.
	DataIngestionServiceDeleteDatapointsProcedure = "/datasets.v1.DataIngestionService/DeleteDatapoints"
)

// DataIngestionServiceClient is a client for the datasets.v1.DataIngestionService service.
type DataIngestionServiceClient interface {
	IngestDatapoints(context.Context, *connect.Request[v1.IngestDatapointsRequest]) (*connect.Response[v1.IngestDatapointsResponse], error)
	DeleteDatapoints(context.Context, *connect.Request[v1.DeleteDatapointsRequest]) (*connect.Response[v1.DeleteDatapointsResponse], error)
}

// NewDataIngestionServiceClient constructs a client for the datasets.v1.DataIngestionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataIngestionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataIngestionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataIngestionServiceMethods := v1.File_datasets_v1_data_ingestion_proto.Services().ByName("DataIngestionService").Methods()
	return &dataIngestionServiceClient{
		ingestDatapoints: connect.NewClient[v1.IngestDatapointsRequest, v1.IngestDatapointsResponse](
			httpClient,
			baseURL+DataIngestionServiceIngestDatapointsProcedure,
			connect.WithSchema(dataIngestionServiceMethods.ByName("IngestDatapoints")),
			connect.WithClientOptions(opts...),
		),
		deleteDatapoints: connect.NewClient[v1.DeleteDatapointsRequest, v1.DeleteDatapointsResponse](
			httpClient,
			baseURL+DataIngestionServiceDeleteDatapointsProcedure,
			connect.WithSchema(dataIngestionServiceMethods.ByName("DeleteDatapoints")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataIngestionServiceClient implements DataIngestionServiceClient.
type dataIngestionServiceClient struct {
	ingestDatapoints *connect.Client[v1.IngestDatapointsRequest, v1.IngestDatapointsResponse]
	deleteDatapoints *connect.Client[v1.DeleteDatapointsRequest, v1.DeleteDatapointsResponse]
}

// IngestDatapoints calls datasets.v1.DataIngestionService.IngestDatapoints.
func (c *dataIngestionServiceClient) IngestDatapoints(ctx context.Context, req *connect.Request[v1.IngestDatapointsRequest]) (*connect.Response[v1.IngestDatapointsResponse], error) {
	return c.ingestDatapoints.CallUnary(ctx, req)
}

// DeleteDatapoints calls datasets.v1.DataIngestionService.DeleteDatapoints.
func (c *dataIngestionServiceClient) DeleteDatapoints(ctx context.Context, req *connect.Request[v1.DeleteDatapointsRequest]) (*connect.Response[v1.DeleteDatapointsResponse], error) {
	return c.deleteDatapoints.CallUnary(ctx, req)
}

// DataIngestionServiceHandler is an implementation of the datasets.v1.DataIngestionService service.
type DataIngestionServiceHandler interface {
	IngestDatapoints(context.Context, *connect.Request[v1.IngestDatapointsRequest]) (*connect.Response[v1.IngestDatapointsResponse], error)
	DeleteDatapoints(context.Context, *connect.Request[v1.DeleteDatapointsRequest]) (*connect.Response[v1.DeleteDatapointsResponse], error)
}

// NewDataIngestionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataIngestionServiceHandler(svc DataIngestionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataIngestionServiceMethods := v1.File_datasets_v1_data_ingestion_proto.Services().ByName("DataIngestionService").Methods()
	dataIngestionServiceIngestDatapointsHandler := connect.NewUnaryHandler(
		DataIngestionServiceIngestDatapointsProcedure,
		svc.IngestDatapoints,
		connect.WithSchema(dataIngestionServiceMethods.ByName("IngestDatapoints")),
		connect.WithHandlerOptions(opts...),
	)
	dataIngestionServiceDeleteDatapointsHandler := connect.NewUnaryHandler(
		DataIngestionServiceDeleteDatapointsProcedure,
		svc.DeleteDatapoints,
		connect.WithSchema(dataIngestionServiceMethods.ByName("DeleteDatapoints")),
		connect.WithHandlerOptions(opts...),
	)
	return "/datasets.v1.DataIngestionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataIngestionServiceIngestDatapointsProcedure:
			dataIngestionServiceIngestDatapointsHandler.ServeHTTP(w, r)
		case DataIngestionServiceDeleteDatapointsProcedure:
			dataIngestionServiceDeleteDatapointsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataIngestionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataIngestionServiceHandler struct{}

func (UnimplementedDataIngestionServiceHandler) IngestDatapoints(context.Context, *connect.Request[v1.IngestDatapointsRequest]) (*connect.Response[v1.IngestDatapointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DataIngestionService.IngestDatapoints is not implemented"))
}

func (UnimplementedDataIngestionServiceHandler) DeleteDatapoints(context.Context, *connect.Request[v1.DeleteDatapointsRequest]) (*connect.Response[v1.DeleteDatapointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DataIngestionService.DeleteDatapoints is not implemented"))
}
