// Proto messages and service definition for the APIs related to loading and querying data.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: datasets/v1/data_access.proto

package datasetsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/protogen/go/datasets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataAccessServiceName is the fully-qualified name of the DataAccessService service.
	DataAccessServiceName = "datasets.v1.DataAccessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataAccessServiceGetDatasetForIntervalProcedure is the fully-qualified name of the
	// DataAccessService's GetDatasetForInterval RPC.
	DataAccessServiceGetDatasetForIntervalProcedure = "/datasets.v1.DataAccessService/GetDatasetForInterval"
	// DataAccessServiceGetDatapointByIDProcedure is the fully-qualified name of the DataAccessService's
	// GetDatapointByID RPC.
	DataAccessServiceGetDatapointByIDProcedure = "/datasets.v1.DataAccessService/GetDatapointByID"
	// DataAccessServiceQueryProcedure is the fully-qualified name of the DataAccessService's Query RPC.
	DataAccessServiceQueryProcedure = "/datasets.v1.DataAccessService/Query"
)

// DataAccessServiceClient is a client for the datasets.v1.DataAccessService service.
type DataAccessServiceClient interface {
	// GetDatasetForInterval returns a list of data points for a given time interval and collection.
	GetDatasetForInterval(context.Context, *connect.Request[v1.GetDatasetForIntervalRequest]) (*connect.Response[v1.DatapointPage], error)
	// GetDatapointByID returns a single datapoint by its ID.
	GetDatapointByID(context.Context, *connect.Request[v1.GetDatapointByIdRequest]) (*connect.Response[v1.Datapoint], error)
	// Query returns a list of data points.
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewDataAccessServiceClient constructs a client for the datasets.v1.DataAccessService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataAccessServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataAccessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataAccessServiceMethods := v1.File_datasets_v1_data_access_proto.Services().ByName("DataAccessService").Methods()
	return &dataAccessServiceClient{
		getDatasetForInterval: connect.NewClient[v1.GetDatasetForIntervalRequest, v1.DatapointPage](
			httpClient,
			baseURL+DataAccessServiceGetDatasetForIntervalProcedure,
			connect.WithSchema(dataAccessServiceMethods.ByName("GetDatasetForInterval")),
			connect.WithClientOptions(opts...),
		),
		getDatapointByID: connect.NewClient[v1.GetDatapointByIdRequest, v1.Datapoint](
			httpClient,
			baseURL+DataAccessServiceGetDatapointByIDProcedure,
			connect.WithSchema(dataAccessServiceMethods.ByName("GetDatapointByID")),
			connect.WithClientOptions(opts...),
		),
		query: connect.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+DataAccessServiceQueryProcedure,
			connect.WithSchema(dataAccessServiceMethods.ByName("Query")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataAccessServiceClient implements DataAccessServiceClient.
type dataAccessServiceClient struct {
	getDatasetForInterval *connect.Client[v1.GetDatasetForIntervalRequest, v1.DatapointPage]
	getDatapointByID      *connect.Client[v1.GetDatapointByIdRequest, v1.Datapoint]
	query                 *connect.Client[v1.QueryRequest, v1.QueryResponse]
}

// GetDatasetForInterval calls datasets.v1.DataAccessService.GetDatasetForInterval.
func (c *dataAccessServiceClient) GetDatasetForInterval(ctx context.Context, req *connect.Request[v1.GetDatasetForIntervalRequest]) (*connect.Response[v1.DatapointPage], error) {
	return c.getDatasetForInterval.CallUnary(ctx, req)
}

// GetDatapointByID calls datasets.v1.DataAccessService.GetDatapointByID.
func (c *dataAccessServiceClient) GetDatapointByID(ctx context.Context, req *connect.Request[v1.GetDatapointByIdRequest]) (*connect.Response[v1.Datapoint], error) {
	return c.getDatapointByID.CallUnary(ctx, req)
}

// Query calls datasets.v1.DataAccessService.Query.
func (c *dataAccessServiceClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// DataAccessServiceHandler is an implementation of the datasets.v1.DataAccessService service.
type DataAccessServiceHandler interface {
	// GetDatasetForInterval returns a list of data points for a given time interval and collection.
	GetDatasetForInterval(context.Context, *connect.Request[v1.GetDatasetForIntervalRequest]) (*connect.Response[v1.DatapointPage], error)
	// GetDatapointByID returns a single datapoint by its ID.
	GetDatapointByID(context.Context, *connect.Request[v1.GetDatapointByIdRequest]) (*connect.Response[v1.Datapoint], error)
	// Query returns a list of data points.
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewDataAccessServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataAccessServiceHandler(svc DataAccessServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataAccessServiceMethods := v1.File_datasets_v1_data_access_proto.Services().ByName("DataAccessService").Methods()
	dataAccessServiceGetDatasetForIntervalHandler := connect.NewUnaryHandler(
		DataAccessServiceGetDatasetForIntervalProcedure,
		svc.GetDatasetForInterval,
		connect.WithSchema(dataAccessServiceMethods.ByName("GetDatasetForInterval")),
		connect.WithHandlerOptions(opts...),
	)
	dataAccessServiceGetDatapointByIDHandler := connect.NewUnaryHandler(
		DataAccessServiceGetDatapointByIDProcedure,
		svc.GetDatapointByID,
		connect.WithSchema(dataAccessServiceMethods.ByName("GetDatapointByID")),
		connect.WithHandlerOptions(opts...),
	)
	dataAccessServiceQueryHandler := connect.NewUnaryHandler(
		DataAccessServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(dataAccessServiceMethods.ByName("Query")),
		connect.WithHandlerOptions(opts...),
	)
	return "/datasets.v1.DataAccessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataAccessServiceGetDatasetForIntervalProcedure:
			dataAccessServiceGetDatasetForIntervalHandler.ServeHTTP(w, r)
		case DataAccessServiceGetDatapointByIDProcedure:
			dataAccessServiceGetDatapointByIDHandler.ServeHTTP(w, r)
		case DataAccessServiceQueryProcedure:
			dataAccessServiceQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataAccessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataAccessServiceHandler struct{}

func (UnimplementedDataAccessServiceHandler) GetDatasetForInterval(context.Context, *connect.Request[v1.GetDatasetForIntervalRequest]) (*connect.Response[v1.DatapointPage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DataAccessService.GetDatasetForInterval is not implemented"))
}

func (UnimplementedDataAccessServiceHandler) GetDatapointByID(context.Context, *connect.Request[v1.GetDatapointByIdRequest]) (*connect.Response[v1.Datapoint], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DataAccessService.GetDatapointByID is not implemented"))
}

func (UnimplementedDataAccessServiceHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.DataAccessService.Query is not implemented"))
}
