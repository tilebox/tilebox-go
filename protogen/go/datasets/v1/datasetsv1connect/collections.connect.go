// Proto messages and service definition for the APIs related to creating and managing collections.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: datasets/v1/collections.proto

package datasetsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/protogen/go/datasets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionServiceName is the fully-qualified name of the CollectionService service.
	CollectionServiceName = "datasets.v1.CollectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionServiceCreateCollectionProcedure is the fully-qualified name of the CollectionService's
	// CreateCollection RPC.
	CollectionServiceCreateCollectionProcedure = "/datasets.v1.CollectionService/CreateCollection"
	// CollectionServiceGetCollectionByNameProcedure is the fully-qualified name of the
	// CollectionService's GetCollectionByName RPC.
	CollectionServiceGetCollectionByNameProcedure = "/datasets.v1.CollectionService/GetCollectionByName"
	// CollectionServiceListCollectionsProcedure is the fully-qualified name of the CollectionService's
	// ListCollections RPC.
	CollectionServiceListCollectionsProcedure = "/datasets.v1.CollectionService/ListCollections"
)

// CollectionServiceClient is a client for the datasets.v1.CollectionService service.
type CollectionServiceClient interface {
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CollectionInfo], error)
	GetCollectionByName(context.Context, *connect.Request[v1.GetCollectionByNameRequest]) (*connect.Response[v1.CollectionInfo], error)
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.CollectionInfos], error)
}

// NewCollectionServiceClient constructs a client for the datasets.v1.CollectionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	collectionServiceMethods := v1.File_datasets_v1_collections_proto.Services().ByName("CollectionService").Methods()
	return &collectionServiceClient{
		createCollection: connect.NewClient[v1.CreateCollectionRequest, v1.CollectionInfo](
			httpClient,
			baseURL+CollectionServiceCreateCollectionProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("CreateCollection")),
			connect.WithClientOptions(opts...),
		),
		getCollectionByName: connect.NewClient[v1.GetCollectionByNameRequest, v1.CollectionInfo](
			httpClient,
			baseURL+CollectionServiceGetCollectionByNameProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("GetCollectionByName")),
			connect.WithClientOptions(opts...),
		),
		listCollections: connect.NewClient[v1.ListCollectionsRequest, v1.CollectionInfos](
			httpClient,
			baseURL+CollectionServiceListCollectionsProcedure,
			connect.WithSchema(collectionServiceMethods.ByName("ListCollections")),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionServiceClient implements CollectionServiceClient.
type collectionServiceClient struct {
	createCollection    *connect.Client[v1.CreateCollectionRequest, v1.CollectionInfo]
	getCollectionByName *connect.Client[v1.GetCollectionByNameRequest, v1.CollectionInfo]
	listCollections     *connect.Client[v1.ListCollectionsRequest, v1.CollectionInfos]
}

// CreateCollection calls datasets.v1.CollectionService.CreateCollection.
func (c *collectionServiceClient) CreateCollection(ctx context.Context, req *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CollectionInfo], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// GetCollectionByName calls datasets.v1.CollectionService.GetCollectionByName.
func (c *collectionServiceClient) GetCollectionByName(ctx context.Context, req *connect.Request[v1.GetCollectionByNameRequest]) (*connect.Response[v1.CollectionInfo], error) {
	return c.getCollectionByName.CallUnary(ctx, req)
}

// ListCollections calls datasets.v1.CollectionService.ListCollections.
func (c *collectionServiceClient) ListCollections(ctx context.Context, req *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.CollectionInfos], error) {
	return c.listCollections.CallUnary(ctx, req)
}

// CollectionServiceHandler is an implementation of the datasets.v1.CollectionService service.
type CollectionServiceHandler interface {
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CollectionInfo], error)
	GetCollectionByName(context.Context, *connect.Request[v1.GetCollectionByNameRequest]) (*connect.Response[v1.CollectionInfo], error)
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.CollectionInfos], error)
}

// NewCollectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionServiceHandler(svc CollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionServiceMethods := v1.File_datasets_v1_collections_proto.Services().ByName("CollectionService").Methods()
	collectionServiceCreateCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceCreateCollectionProcedure,
		svc.CreateCollection,
		connect.WithSchema(collectionServiceMethods.ByName("CreateCollection")),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetCollectionByNameHandler := connect.NewUnaryHandler(
		CollectionServiceGetCollectionByNameProcedure,
		svc.GetCollectionByName,
		connect.WithSchema(collectionServiceMethods.ByName("GetCollectionByName")),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceListCollectionsHandler := connect.NewUnaryHandler(
		CollectionServiceListCollectionsProcedure,
		svc.ListCollections,
		connect.WithSchema(collectionServiceMethods.ByName("ListCollections")),
		connect.WithHandlerOptions(opts...),
	)
	return "/datasets.v1.CollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionServiceCreateCollectionProcedure:
			collectionServiceCreateCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceGetCollectionByNameProcedure:
			collectionServiceGetCollectionByNameHandler.ServeHTTP(w, r)
		case CollectionServiceListCollectionsProcedure:
			collectionServiceListCollectionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionServiceHandler struct{}

func (UnimplementedCollectionServiceHandler) CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CollectionInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.CollectionService.CreateCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetCollectionByName(context.Context, *connect.Request[v1.GetCollectionByNameRequest]) (*connect.Response[v1.CollectionInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.CollectionService.GetCollectionByName is not implemented"))
}

func (UnimplementedCollectionServiceHandler) ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.CollectionInfos], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("datasets.v1.CollectionService.ListCollections is not implemented"))
}
