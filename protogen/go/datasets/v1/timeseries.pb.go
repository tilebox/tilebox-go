// Timeseries types for workflows

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: datasets/v1/timeseries.proto

package datasetsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TimeseriesDatasetChunk is a message that represents a chunk of a timeseries dataset.
// used by workflow tasks that are executed once for each datapoint in a timeseries dataset
type TimeseriesDatasetChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId             *ID                `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	CollectionId          *ID                `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	TimeInterval          *TimeInterval      `protobuf:"bytes,3,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	DatapointInterval     *DatapointInterval `protobuf:"bytes,4,opt,name=datapoint_interval,json=datapointInterval,proto3" json:"datapoint_interval,omitempty"`
	BranchFactor          int32              `protobuf:"varint,5,opt,name=branch_factor,json=branchFactor,proto3" json:"branch_factor,omitempty"`
	ChunkSize             int32              `protobuf:"varint,6,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	DatapointsPer_365Days int64              `protobuf:"varint,7,opt,name=datapoints_per_365_days,json=datapointsPer365Days,proto3" json:"datapoints_per_365_days,omitempty"`
}

func (x *TimeseriesDatasetChunk) Reset() {
	*x = TimeseriesDatasetChunk{}
	mi := &file_datasets_v1_timeseries_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeseriesDatasetChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeseriesDatasetChunk) ProtoMessage() {}

func (x *TimeseriesDatasetChunk) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_timeseries_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeseriesDatasetChunk.ProtoReflect.Descriptor instead.
func (*TimeseriesDatasetChunk) Descriptor() ([]byte, []int) {
	return file_datasets_v1_timeseries_proto_rawDescGZIP(), []int{0}
}

func (x *TimeseriesDatasetChunk) GetDatasetId() *ID {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *TimeseriesDatasetChunk) GetCollectionId() *ID {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

func (x *TimeseriesDatasetChunk) GetTimeInterval() *TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *TimeseriesDatasetChunk) GetDatapointInterval() *DatapointInterval {
	if x != nil {
		return x.DatapointInterval
	}
	return nil
}

func (x *TimeseriesDatasetChunk) GetBranchFactor() int32 {
	if x != nil {
		return x.BranchFactor
	}
	return 0
}

func (x *TimeseriesDatasetChunk) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *TimeseriesDatasetChunk) GetDatapointsPer_365Days() int64 {
	if x != nil {
		return x.DatapointsPer_365Days
	}
	return 0
}

// TimeChunk is a message that represents a time interval and a chunk size.
// used by workflow tasks that are executed once for each chunk of size chunk_size in a time interval
// e.g. for a time interval of 100 days, and a chunk size of 1 day, such a workflow will spawn a tree of
// eventually 100 leaf tasks
type TimeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeInterval *TimeInterval        `protobuf:"bytes,1,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	ChunkSize    *durationpb.Duration `protobuf:"bytes,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
}

func (x *TimeChunk) Reset() {
	*x = TimeChunk{}
	mi := &file_datasets_v1_timeseries_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeChunk) ProtoMessage() {}

func (x *TimeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_timeseries_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeChunk.ProtoReflect.Descriptor instead.
func (*TimeChunk) Descriptor() ([]byte, []int) {
	return file_datasets_v1_timeseries_proto_rawDescGZIP(), []int{1}
}

func (x *TimeChunk) GetTimeInterval() *TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *TimeChunk) GetChunkSize() *durationpb.Duration {
	if x != nil {
		return x.ChunkSize
	}
	return nil
}

var File_datasets_v1_timeseries_proto protoreflect.FileDescriptor

var file_datasets_v1_timeseries_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x88, 0x03, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2e,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x33, 0x36, 0x35, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x33, 0x36, 0x35, 0x44, 0x61, 0x79, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0xb1, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f,
	0x78, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x17, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_datasets_v1_timeseries_proto_rawDescOnce sync.Once
	file_datasets_v1_timeseries_proto_rawDescData = file_datasets_v1_timeseries_proto_rawDesc
)

func file_datasets_v1_timeseries_proto_rawDescGZIP() []byte {
	file_datasets_v1_timeseries_proto_rawDescOnce.Do(func() {
		file_datasets_v1_timeseries_proto_rawDescData = protoimpl.X.CompressGZIP(file_datasets_v1_timeseries_proto_rawDescData)
	})
	return file_datasets_v1_timeseries_proto_rawDescData
}

var file_datasets_v1_timeseries_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_datasets_v1_timeseries_proto_goTypes = []any{
	(*TimeseriesDatasetChunk)(nil), // 0: datasets.v1.TimeseriesDatasetChunk
	(*TimeChunk)(nil),              // 1: datasets.v1.TimeChunk
	(*ID)(nil),                     // 2: datasets.v1.ID
	(*TimeInterval)(nil),           // 3: datasets.v1.TimeInterval
	(*DatapointInterval)(nil),      // 4: datasets.v1.DatapointInterval
	(*durationpb.Duration)(nil),    // 5: google.protobuf.Duration
}
var file_datasets_v1_timeseries_proto_depIdxs = []int32{
	2, // 0: datasets.v1.TimeseriesDatasetChunk.dataset_id:type_name -> datasets.v1.ID
	2, // 1: datasets.v1.TimeseriesDatasetChunk.collection_id:type_name -> datasets.v1.ID
	3, // 2: datasets.v1.TimeseriesDatasetChunk.time_interval:type_name -> datasets.v1.TimeInterval
	4, // 3: datasets.v1.TimeseriesDatasetChunk.datapoint_interval:type_name -> datasets.v1.DatapointInterval
	3, // 4: datasets.v1.TimeChunk.time_interval:type_name -> datasets.v1.TimeInterval
	5, // 5: datasets.v1.TimeChunk.chunk_size:type_name -> google.protobuf.Duration
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_datasets_v1_timeseries_proto_init() }
func file_datasets_v1_timeseries_proto_init() {
	if File_datasets_v1_timeseries_proto != nil {
		return
	}
	file_datasets_v1_core_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datasets_v1_timeseries_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datasets_v1_timeseries_proto_goTypes,
		DependencyIndexes: file_datasets_v1_timeseries_proto_depIdxs,
		MessageInfos:      file_datasets_v1_timeseries_proto_msgTypes,
	}.Build()
	File_datasets_v1_timeseries_proto = out.File
	file_datasets_v1_timeseries_proto_rawDesc = nil
	file_datasets_v1_timeseries_proto_goTypes = nil
	file_datasets_v1_timeseries_proto_depIdxs = nil
}
