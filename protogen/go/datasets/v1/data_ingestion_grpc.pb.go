// Proto messages and service definition for the APIs related to loading and quering data.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: datasets/v1/data_ingestion.proto

package datasetsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataIngestionService_IngestDatapoints_FullMethodName = "/datasets.v1.DataIngestionService/IngestDatapoints"
	DataIngestionService_DeleteDatapoints_FullMethodName = "/datasets.v1.DataIngestionService/DeleteDatapoints"
)

// DataIngestionServiceClient is the client API for DataIngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataIngestionService provides data ingestion and deletion capabilities for Tilebox datasets.
type DataIngestionServiceClient interface {
	IngestDatapoints(ctx context.Context, in *IngestDatapointsRequest, opts ...grpc.CallOption) (*IngestDatapointsResponse, error)
	DeleteDatapoints(ctx context.Context, in *DeleteDatapointsRequest, opts ...grpc.CallOption) (*DeleteDatapointsResponse, error)
}

type dataIngestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataIngestionServiceClient(cc grpc.ClientConnInterface) DataIngestionServiceClient {
	return &dataIngestionServiceClient{cc}
}

func (c *dataIngestionServiceClient) IngestDatapoints(ctx context.Context, in *IngestDatapointsRequest, opts ...grpc.CallOption) (*IngestDatapointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestDatapointsResponse)
	err := c.cc.Invoke(ctx, DataIngestionService_IngestDatapoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataIngestionServiceClient) DeleteDatapoints(ctx context.Context, in *DeleteDatapointsRequest, opts ...grpc.CallOption) (*DeleteDatapointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatapointsResponse)
	err := c.cc.Invoke(ctx, DataIngestionService_DeleteDatapoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataIngestionServiceServer is the server API for DataIngestionService service.
// All implementations must embed UnimplementedDataIngestionServiceServer
// for forward compatibility.
//
// DataIngestionService provides data ingestion and deletion capabilities for Tilebox datasets.
type DataIngestionServiceServer interface {
	IngestDatapoints(context.Context, *IngestDatapointsRequest) (*IngestDatapointsResponse, error)
	DeleteDatapoints(context.Context, *DeleteDatapointsRequest) (*DeleteDatapointsResponse, error)
	mustEmbedUnimplementedDataIngestionServiceServer()
}

// UnimplementedDataIngestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataIngestionServiceServer struct{}

func (UnimplementedDataIngestionServiceServer) IngestDatapoints(context.Context, *IngestDatapointsRequest) (*IngestDatapointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestDatapoints not implemented")
}
func (UnimplementedDataIngestionServiceServer) DeleteDatapoints(context.Context, *DeleteDatapointsRequest) (*DeleteDatapointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatapoints not implemented")
}
func (UnimplementedDataIngestionServiceServer) mustEmbedUnimplementedDataIngestionServiceServer() {}
func (UnimplementedDataIngestionServiceServer) testEmbeddedByValue()                              {}

// UnsafeDataIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataIngestionServiceServer will
// result in compilation errors.
type UnsafeDataIngestionServiceServer interface {
	mustEmbedUnimplementedDataIngestionServiceServer()
}

func RegisterDataIngestionServiceServer(s grpc.ServiceRegistrar, srv DataIngestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataIngestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataIngestionService_ServiceDesc, srv)
}

func _DataIngestionService_IngestDatapoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestDatapointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataIngestionServiceServer).IngestDatapoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataIngestionService_IngestDatapoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataIngestionServiceServer).IngestDatapoints(ctx, req.(*IngestDatapointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataIngestionService_DeleteDatapoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatapointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataIngestionServiceServer).DeleteDatapoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataIngestionService_DeleteDatapoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataIngestionServiceServer).DeleteDatapoints(ctx, req.(*DeleteDatapointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataIngestionService_ServiceDesc is the grpc.ServiceDesc for DataIngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataIngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datasets.v1.DataIngestionService",
	HandlerType: (*DataIngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestDatapoints",
			Handler:    _DataIngestionService_IngestDatapoints_Handler,
		},
		{
			MethodName: "DeleteDatapoints",
			Handler:    _DataIngestionService_DeleteDatapoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datasets/v1/data_ingestion.proto",
}
