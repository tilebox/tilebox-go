// The opendata messages.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: datasets/v1/opendata.proto

package datasetsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ASFSarGranule contains metadata for a single SAR granule hosted by the Alaska Satellite Facility (ASF).
// Currently, it is used for ERS SAR granules and Sentinel-1 SAR granules.
type ASFSarGranule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// granule level fields
	GranuleName     string          `protobuf:"bytes,1,opt,name=granule_name,json=granuleName,proto3" json:"granule_name,omitempty"`                                               // ERS SAR granule name (also referred to as scene name)
	ProcessingLevel ProcessingLevel `protobuf:"varint,2,opt,name=processing_level,json=processingLevel,proto3,enum=datasets.v1.ProcessingLevel" json:"processing_level,omitempty"` // Processing level, e.g. L0, L1, RAW, ...
	Group           string          `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                                                                              // Processing group
	Orbit           int64           `protobuf:"varint,4,opt,name=orbit,proto3" json:"orbit,omitempty"`                                                                             // orbit number
	Path            int64           `protobuf:"varint,5,opt,name=path,proto3" json:"path,omitempty"`                                                                               // path number
	Frame           int64           `protobuf:"varint,6,opt,name=frame,proto3" json:"frame,omitempty"`                                                                             // frame number
	FlightDirection FlightDirection `protobuf:"varint,7,opt,name=flight_direction,json=flightDirection,proto3,enum=datasets.v1.FlightDirection" json:"flight_direction,omitempty"` // flight direction of the granule
	// time and location fields
	// start_time is stored as the timestamp in the ulid and returned as DatapointMetadata event_time
	StopTime       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`                   // start time of the granule
	ProcessingTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"` // processing time of the granule
	Center         *LatLon                `protobuf:"bytes,10,opt,name=center,proto3" json:"center,omitempty"`                                      // center point of the granule
	Geometry       *GeobufData            `protobuf:"bytes,11,opt,name=geometry,proto3" json:"geometry,omitempty"`                                  // geometry/footprint of the granule
	// file fields
	// the actual file name of the granule can be inferred from the granule name, the processing level and the platform
	StorageProvider OpendataProvider `protobuf:"varint,12,opt,name=storage_provider,json=storageProvider,proto3,enum=datasets.v1.OpendataProvider" json:"storage_provider,omitempty"` // provider of the granule file
	FileSize        int64            `protobuf:"varint,13,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                                                        // file size in bytes
	Md5Sum          string           `protobuf:"bytes,14,opt,name=md5sum,proto3" json:"md5sum,omitempty"`                                                                             // md5sum of the file
	// Whether a quicklook image is available.
	// The actual quicklook image name can be inferred from the granule name and the platform.
	QuicklookAvailable bool `protobuf:"varint,15,opt,name=quicklook_available,json=quicklookAvailable,proto3" json:"quicklook_available,omitempty"`
	// radar specific parameters
	Polarization Polarization `protobuf:"varint,16,opt,name=polarization,proto3,enum=datasets.v1.Polarization" json:"polarization,omitempty"` // Polarization
	// 17 used to be the acquisition mode, but it was removed because it was only used for Sentinel-1
	InsarStackId  int64   `protobuf:"varint,18,opt,name=insar_stack_id,json=insarStackId,proto3" json:"insar_stack_id,omitempty"`   // Interferometric synthetic-aperture radar (InSAR) stack id
	InsarBaseline float64 `protobuf:"fixed64,19,opt,name=insar_baseline,json=insarBaseline,proto3" json:"insar_baseline,omitempty"` // Interferometric synthetic-aperture radar (InSAR) baseline
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ASFSarGranule) Reset() {
	*x = ASFSarGranule{}
	mi := &file_datasets_v1_opendata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ASFSarGranule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASFSarGranule) ProtoMessage() {}

func (x *ASFSarGranule) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_opendata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASFSarGranule.ProtoReflect.Descriptor instead.
func (*ASFSarGranule) Descriptor() ([]byte, []int) {
	return file_datasets_v1_opendata_proto_rawDescGZIP(), []int{0}
}

func (x *ASFSarGranule) GetGranuleName() string {
	if x != nil {
		return x.GranuleName
	}
	return ""
}

func (x *ASFSarGranule) GetProcessingLevel() ProcessingLevel {
	if x != nil {
		return x.ProcessingLevel
	}
	return ProcessingLevel_PROCESSING_LEVEL_UNSPECIFIED
}

func (x *ASFSarGranule) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ASFSarGranule) GetOrbit() int64 {
	if x != nil {
		return x.Orbit
	}
	return 0
}

func (x *ASFSarGranule) GetPath() int64 {
	if x != nil {
		return x.Path
	}
	return 0
}

func (x *ASFSarGranule) GetFrame() int64 {
	if x != nil {
		return x.Frame
	}
	return 0
}

func (x *ASFSarGranule) GetFlightDirection() FlightDirection {
	if x != nil {
		return x.FlightDirection
	}
	return FlightDirection_FLIGHT_DIRECTION_UNSPECIFIED
}

func (x *ASFSarGranule) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *ASFSarGranule) GetProcessingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessingTime
	}
	return nil
}

func (x *ASFSarGranule) GetCenter() *LatLon {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *ASFSarGranule) GetGeometry() *GeobufData {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *ASFSarGranule) GetStorageProvider() OpendataProvider {
	if x != nil {
		return x.StorageProvider
	}
	return OpendataProvider_OPENDATA_PROVIDER_UNSPECIFIED
}

func (x *ASFSarGranule) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ASFSarGranule) GetMd5Sum() string {
	if x != nil {
		return x.Md5Sum
	}
	return ""
}

func (x *ASFSarGranule) GetQuicklookAvailable() bool {
	if x != nil {
		return x.QuicklookAvailable
	}
	return false
}

func (x *ASFSarGranule) GetPolarization() Polarization {
	if x != nil {
		return x.Polarization
	}
	return Polarization_POLARIZATION_UNSPECIFIED
}

func (x *ASFSarGranule) GetInsarStackId() int64 {
	if x != nil {
		return x.InsarStackId
	}
	return 0
}

func (x *ASFSarGranule) GetInsarBaseline() float64 {
	if x != nil {
		return x.InsarBaseline
	}
	return 0
}

// UmbraSarGranule contains metadata for a single SAR granule available on the Umbra Opendata S3 Bucket,
// provided by Umbra Space.
type UmbraSarGranule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// granule level fields
	GranuleName          string               `protobuf:"bytes,1,opt,name=granule_name,json=granuleName,proto3" json:"granule_name,omitempty"`                                                                   // Umbra SAR granule name
	ProcessingLevel      ProcessingLevel      `protobuf:"varint,2,opt,name=processing_level,json=processingLevel,proto3,enum=datasets.v1.ProcessingLevel" json:"processing_level,omitempty"`                     // Processing level, e.g. L0, L1, RAW, ...
	Satellite            int64                `protobuf:"varint,3,opt,name=satellite,proto3" json:"satellite,omitempty"`                                                                                         // satellite, e.g. 4 for UMBRA-04, 5 for UMBRA-05, ...
	FlightDirection      FlightDirection      `protobuf:"varint,4,opt,name=flight_direction,json=flightDirection,proto3,enum=datasets.v1.FlightDirection" json:"flight_direction,omitempty"`                     // flight direction of the granule (ASCENDING, DESCENDING)
	ObservationDirection ObservationDirection `protobuf:"varint,5,opt,name=observation_direction,json=observationDirection,proto3,enum=datasets.v1.ObservationDirection" json:"observation_direction,omitempty"` // observation direction of the granule (LEFT, RIGHT)
	// time and location fields
	// start_time is stored as the timestamp in the ulid and returned as DatapointMetadata event_time
	StopTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"` // start time of the granule
	Center   *LatLonAlt             `protobuf:"bytes,7,opt,name=center,proto3" json:"center,omitempty"`                     // center point of the granule
	Geometry *GeobufData            `protobuf:"bytes,8,opt,name=geometry,proto3" json:"geometry,omitempty"`                 // geometry/footprint of the granule
	// file fields
	// the actual file name of the granule can be inferred from the granule name, the processing level and the platform
	StorageProvider OpendataProvider `protobuf:"varint,9,opt,name=storage_provider,json=storageProvider,proto3,enum=datasets.v1.OpendataProvider" json:"storage_provider,omitempty"` // provider of the granule file
	// location of the granule file in the S3 Umbra bucket, relative to the `sar-data/tasks` directory
	// there is some logic to the naming scheme, but it is not standardized across all granules and sometimes there are
	// arbitrary suffixes ore upper/lower case differences, so it is not possible to infer the full file name from
	// the granule name and the remaining fields.
	Location string `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// radar specific parameters
	// https://www.geospatialworld.net/article/sar-imagery-and-quality-metrics/
	Polarization    Polarization    `protobuf:"varint,11,opt,name=polarization,proto3,enum=datasets.v1.Polarization" json:"polarization,omitempty"` // Polarization
	AcquisitionMode AcquisitionMode `protobuf:"varint,12,opt,name=acquisition_mode,json=acquisitionMode,proto3,enum=datasets.v1.AcquisitionMode" json:"acquisition_mode,omitempty"`
	BaseIpr         float64         `protobuf:"fixed64,13,opt,name=base_ipr,json=baseIpr,proto3" json:"base_ipr,omitempty"`       // Base IPR (Impulse Response Ratio)
	TargetIpr       float64         `protobuf:"fixed64,14,opt,name=target_ipr,json=targetIpr,proto3" json:"target_ipr,omitempty"` // Target IPR
	// Umbra product sku (e.g. "UMB-SPOTLIGHT-100-1") can be derived from the above ipr fields.
	// The first number is the base ipr * 100, the second number is the ratio of the target ipr to the base ipr.
	RadarCenterFrequencyHz           float64 `protobuf:"fixed64,15,opt,name=radar_center_frequency_hz,json=radarCenterFrequencyHz,proto3" json:"radar_center_frequency_hz,omitempty"`                                   // Radar center frequency in Hz
	TimeOfCenterOfAperturePolynomial float64 `protobuf:"fixed64,16,opt,name=time_of_center_of_aperture_polynomial,json=timeOfCenterOfAperturePolynomial,proto3" json:"time_of_center_of_aperture_polynomial,omitempty"` // Time of center of aperture polynomial
	AngleAzimuthDegrees              float64 `protobuf:"fixed64,17,opt,name=angle_azimuth_degrees,json=angleAzimuthDegrees,proto3" json:"angle_azimuth_degrees,omitempty"`                                              // Angle azimuth
	AngleGrazingDegrees              float64 `protobuf:"fixed64,18,opt,name=angle_grazing_degrees,json=angleGrazingDegrees,proto3" json:"angle_grazing_degrees,omitempty"`                                              // Angle elevation
	AngleIncidenceDegrees            float64 `protobuf:"fixed64,19,opt,name=angle_incidence_degrees,json=angleIncidenceDegrees,proto3" json:"angle_incidence_degrees,omitempty"`                                        // Angle incidence
	AngleSquintDegrees               float64 `protobuf:"fixed64,20,opt,name=angle_squint_degrees,json=angleSquintDegrees,proto3" json:"angle_squint_degrees,omitempty"`                                                 // Angle squint
	SlantRangeMeters                 float64 `protobuf:"fixed64,21,opt,name=slant_range_meters,json=slantRangeMeters,proto3" json:"slant_range_meters,omitempty"`                                                       // Slant range in meters
	MaxGroundResolutionRangeMeters   float64 `protobuf:"fixed64,22,opt,name=max_ground_resolution_range_meters,json=maxGroundResolutionRangeMeters,proto3" json:"max_ground_resolution_range_meters,omitempty"`         // Maximum ground resolution range in meters
	MaxGroundResolutionAzimuthMeters float64 `protobuf:"fixed64,23,opt,name=max_ground_resolution_azimuth_meters,json=maxGroundResolutionAzimuthMeters,proto3" json:"max_ground_resolution_azimuth_meters,omitempty"`   // Maximum ground resolution azimuth in meters
	Altitude                         float64 `protobuf:"fixed64,24,opt,name=altitude,proto3" json:"altitude,omitempty"`                                                                                                 // altitude of the granule
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UmbraSarGranule) Reset() {
	*x = UmbraSarGranule{}
	mi := &file_datasets_v1_opendata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UmbraSarGranule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmbraSarGranule) ProtoMessage() {}

func (x *UmbraSarGranule) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_opendata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmbraSarGranule.ProtoReflect.Descriptor instead.
func (*UmbraSarGranule) Descriptor() ([]byte, []int) {
	return file_datasets_v1_opendata_proto_rawDescGZIP(), []int{1}
}

func (x *UmbraSarGranule) GetGranuleName() string {
	if x != nil {
		return x.GranuleName
	}
	return ""
}

func (x *UmbraSarGranule) GetProcessingLevel() ProcessingLevel {
	if x != nil {
		return x.ProcessingLevel
	}
	return ProcessingLevel_PROCESSING_LEVEL_UNSPECIFIED
}

func (x *UmbraSarGranule) GetSatellite() int64 {
	if x != nil {
		return x.Satellite
	}
	return 0
}

func (x *UmbraSarGranule) GetFlightDirection() FlightDirection {
	if x != nil {
		return x.FlightDirection
	}
	return FlightDirection_FLIGHT_DIRECTION_UNSPECIFIED
}

func (x *UmbraSarGranule) GetObservationDirection() ObservationDirection {
	if x != nil {
		return x.ObservationDirection
	}
	return ObservationDirection_OBSERVATION_DIRECTION_UNSPECIFIED
}

func (x *UmbraSarGranule) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *UmbraSarGranule) GetCenter() *LatLonAlt {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *UmbraSarGranule) GetGeometry() *GeobufData {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *UmbraSarGranule) GetStorageProvider() OpendataProvider {
	if x != nil {
		return x.StorageProvider
	}
	return OpendataProvider_OPENDATA_PROVIDER_UNSPECIFIED
}

func (x *UmbraSarGranule) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UmbraSarGranule) GetPolarization() Polarization {
	if x != nil {
		return x.Polarization
	}
	return Polarization_POLARIZATION_UNSPECIFIED
}

func (x *UmbraSarGranule) GetAcquisitionMode() AcquisitionMode {
	if x != nil {
		return x.AcquisitionMode
	}
	return AcquisitionMode_ACQUISITION_MODE_UNSPECIFIED
}

func (x *UmbraSarGranule) GetBaseIpr() float64 {
	if x != nil {
		return x.BaseIpr
	}
	return 0
}

func (x *UmbraSarGranule) GetTargetIpr() float64 {
	if x != nil {
		return x.TargetIpr
	}
	return 0
}

func (x *UmbraSarGranule) GetRadarCenterFrequencyHz() float64 {
	if x != nil {
		return x.RadarCenterFrequencyHz
	}
	return 0
}

func (x *UmbraSarGranule) GetTimeOfCenterOfAperturePolynomial() float64 {
	if x != nil {
		return x.TimeOfCenterOfAperturePolynomial
	}
	return 0
}

func (x *UmbraSarGranule) GetAngleAzimuthDegrees() float64 {
	if x != nil {
		return x.AngleAzimuthDegrees
	}
	return 0
}

func (x *UmbraSarGranule) GetAngleGrazingDegrees() float64 {
	if x != nil {
		return x.AngleGrazingDegrees
	}
	return 0
}

func (x *UmbraSarGranule) GetAngleIncidenceDegrees() float64 {
	if x != nil {
		return x.AngleIncidenceDegrees
	}
	return 0
}

func (x *UmbraSarGranule) GetAngleSquintDegrees() float64 {
	if x != nil {
		return x.AngleSquintDegrees
	}
	return 0
}

func (x *UmbraSarGranule) GetSlantRangeMeters() float64 {
	if x != nil {
		return x.SlantRangeMeters
	}
	return 0
}

func (x *UmbraSarGranule) GetMaxGroundResolutionRangeMeters() float64 {
	if x != nil {
		return x.MaxGroundResolutionRangeMeters
	}
	return 0
}

func (x *UmbraSarGranule) GetMaxGroundResolutionAzimuthMeters() float64 {
	if x != nil {
		return x.MaxGroundResolutionAzimuthMeters
	}
	return 0
}

func (x *UmbraSarGranule) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

// CopernicusDataspaceGranule contains metadata for a single granule provided by the Copernicus Dataspace.
// Those are e.g. Sentinel granules, but also some other datasets queryable by the Copernicus Dataspace,
// such as Landsat.
type CopernicusDataspaceGranule struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GranuleName         string                 `protobuf:"bytes,1,opt,name=granule_name,json=granuleName,proto3" json:"granule_name,omitempty"`
	ProcessingLevel     ProcessingLevel        `protobuf:"varint,2,opt,name=processing_level,json=processingLevel,proto3,enum=datasets.v1.ProcessingLevel" json:"processing_level,omitempty"`  // processing level
	Satellite           string                 `protobuf:"bytes,3,opt,name=satellite,proto3" json:"satellite,omitempty"`                                                                       // satellite name ("collection" in the JSON)
	FlightDirection     FlightDirection        `protobuf:"varint,26,opt,name=flight_direction,json=flightDirection,proto3,enum=datasets.v1.FlightDirection" json:"flight_direction,omitempty"` // flight direction of the granule (ASCENDING, DESCENDING)
	ProductType         string                 `protobuf:"bytes,4,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	CopernicusId        *UUID                  `protobuf:"bytes,5,opt,name=copernicus_id,json=copernicusId,proto3" json:"copernicus_id,omitempty"`                          // product id in the copernicus catalog
	Online              bool                   `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`                                                         // status == "ONLINE"
	Platform            string                 `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`                                                      // platform name
	Instrument          string                 `protobuf:"bytes,8,opt,name=instrument,proto3" json:"instrument,omitempty"`                                                  // instrument name
	OrbitNumber         int64                  `protobuf:"varint,9,opt,name=orbit_number,json=orbitNumber,proto3" json:"orbit_number,omitempty"`                            // orbit number
	RelativeOrbitNumber int64                  `protobuf:"varint,10,opt,name=relative_orbit_number,json=relativeOrbitNumber,proto3" json:"relative_orbit_number,omitempty"` // orbit number relative to the start of the repeat cycle
	ProcessingBaseline  float64                `protobuf:"fixed64,11,opt,name=processing_baseline,json=processingBaseline,proto3" json:"processing_baseline,omitempty"`
	Timeliness          string                 `protobuf:"bytes,12,opt,name=timeliness,proto3" json:"timeliness,omitempty"` // timeliness of the product
	// time and location fields
	// start_time is stored as the timestamp in the ulid and returned as DatapointMetadata event_time
	StopTime  *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"` // start time of the granule
	Center    *LatLon                `protobuf:"bytes,14,opt,name=center,proto3" json:"center,omitempty"`                     // center point of the granule
	Geometry  *GeobufData            `protobuf:"bytes,15,opt,name=geometry,proto3" json:"geometry,omitempty"`                 // geometry/footprint of the granule
	Published *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=published,proto3" json:"published,omitempty"`               // the time the granule was published to the catalog
	Updated   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updated,proto3" json:"updated,omitempty"`                   // the time the granule was last updated in the catalog
	// file fields
	StorageProvider OpendataProvider `protobuf:"varint,18,opt,name=storage_provider,json=storageProvider,proto3,enum=datasets.v1.OpendataProvider" json:"storage_provider,omitempty"` // provider of the granule file
	Location        string           `protobuf:"bytes,19,opt,name=location,proto3" json:"location,omitempty"`
	FileSize        int64            `protobuf:"varint,20,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Quicklook       string           `protobuf:"bytes,21,opt,name=quicklook,proto3" json:"quicklook,omitempty"`
	Thumbnail       string           `protobuf:"bytes,22,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	SnowCover       float64          `protobuf:"fixed64,23,opt,name=snow_cover,json=snowCover,proto3" json:"snow_cover,omitempty"`
	CloudCover      float64          `protobuf:"fixed64,24,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	Resolution      int64            `protobuf:"varint,25,opt,name=resolution,proto3" json:"resolution,omitempty"`                                   // 26 is flight_direction
	Polarization    Polarization     `protobuf:"varint,27,opt,name=polarization,proto3,enum=datasets.v1.Polarization" json:"polarization,omitempty"` // Polarization (relevant for Sentinel-1)
	// Acquisition mode, also referred to as sensor mode in the Sentinel-1 documentation
	AcquisitionMode AcquisitionMode `protobuf:"varint,28,opt,name=acquisition_mode,json=acquisitionMode,proto3,enum=datasets.v1.AcquisitionMode" json:"acquisition_mode,omitempty"`
	// Enumeration of swath identifiers applicable to this product (string enumeration, separated by spaces)
	Swath string `protobuf:"bytes,29,opt,name=swath,proto3" json:"swath,omitempty"`
	// The mission take ID of the Sentinel-2 product
	MissionTakeId string `protobuf:"bytes,30,opt,name=mission_take_id,json=missionTakeId,proto3" json:"mission_take_id,omitempty"`
	// Landsat-8 specific fields
	Bands         int64   `protobuf:"varint,31,opt,name=bands,proto3" json:"bands,omitempty"`
	Path          int64   `protobuf:"varint,32,opt,name=path,proto3" json:"path,omitempty"`
	Row           int64   `protobuf:"varint,33,opt,name=row,proto3" json:"row,omitempty"`
	SunAzimuth    float64 `protobuf:"fixed64,34,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	SunElevation  float64 `protobuf:"fixed64,35,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopernicusDataspaceGranule) Reset() {
	*x = CopernicusDataspaceGranule{}
	mi := &file_datasets_v1_opendata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopernicusDataspaceGranule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopernicusDataspaceGranule) ProtoMessage() {}

func (x *CopernicusDataspaceGranule) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_opendata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopernicusDataspaceGranule.ProtoReflect.Descriptor instead.
func (*CopernicusDataspaceGranule) Descriptor() ([]byte, []int) {
	return file_datasets_v1_opendata_proto_rawDescGZIP(), []int{2}
}

func (x *CopernicusDataspaceGranule) GetGranuleName() string {
	if x != nil {
		return x.GranuleName
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetProcessingLevel() ProcessingLevel {
	if x != nil {
		return x.ProcessingLevel
	}
	return ProcessingLevel_PROCESSING_LEVEL_UNSPECIFIED
}

func (x *CopernicusDataspaceGranule) GetSatellite() string {
	if x != nil {
		return x.Satellite
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetFlightDirection() FlightDirection {
	if x != nil {
		return x.FlightDirection
	}
	return FlightDirection_FLIGHT_DIRECTION_UNSPECIFIED
}

func (x *CopernicusDataspaceGranule) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetCopernicusId() *UUID {
	if x != nil {
		return x.CopernicusId
	}
	return nil
}

func (x *CopernicusDataspaceGranule) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *CopernicusDataspaceGranule) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetOrbitNumber() int64 {
	if x != nil {
		return x.OrbitNumber
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetRelativeOrbitNumber() int64 {
	if x != nil {
		return x.RelativeOrbitNumber
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetProcessingBaseline() float64 {
	if x != nil {
		return x.ProcessingBaseline
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetTimeliness() string {
	if x != nil {
		return x.Timeliness
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *CopernicusDataspaceGranule) GetCenter() *LatLon {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *CopernicusDataspaceGranule) GetGeometry() *GeobufData {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *CopernicusDataspaceGranule) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *CopernicusDataspaceGranule) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *CopernicusDataspaceGranule) GetStorageProvider() OpendataProvider {
	if x != nil {
		return x.StorageProvider
	}
	return OpendataProvider_OPENDATA_PROVIDER_UNSPECIFIED
}

func (x *CopernicusDataspaceGranule) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetQuicklook() string {
	if x != nil {
		return x.Quicklook
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetSnowCover() float64 {
	if x != nil {
		return x.SnowCover
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetCloudCover() float64 {
	if x != nil {
		return x.CloudCover
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetResolution() int64 {
	if x != nil {
		return x.Resolution
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetPolarization() Polarization {
	if x != nil {
		return x.Polarization
	}
	return Polarization_POLARIZATION_UNSPECIFIED
}

func (x *CopernicusDataspaceGranule) GetAcquisitionMode() AcquisitionMode {
	if x != nil {
		return x.AcquisitionMode
	}
	return AcquisitionMode_ACQUISITION_MODE_UNSPECIFIED
}

func (x *CopernicusDataspaceGranule) GetSwath() string {
	if x != nil {
		return x.Swath
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetMissionTakeId() string {
	if x != nil {
		return x.MissionTakeId
	}
	return ""
}

func (x *CopernicusDataspaceGranule) GetBands() int64 {
	if x != nil {
		return x.Bands
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetPath() int64 {
	if x != nil {
		return x.Path
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetRow() int64 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetSunAzimuth() float64 {
	if x != nil {
		return x.SunAzimuth
	}
	return 0
}

func (x *CopernicusDataspaceGranule) GetSunElevation() float64 {
	if x != nil {
		return x.SunElevation
	}
	return 0
}

var File_datasets_v1_opendata_proto protoreflect.FileDescriptor

var file_datasets_v1_opendata_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6,
	0x06, 0x0a, 0x0d, 0x41, 0x53, 0x46, 0x53, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x6f,
	0x6f, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70,
	0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x61, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x61, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x61, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xc6, 0x0a, 0x0a, 0x0f, 0x55, 0x6d, 0x62, 0x72,
	0x61, 0x53, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x41, 0x6c, 0x74, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x70, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x49, 0x70, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x72, 0x12, 0x39, 0x0a, 0x19,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x72, 0x61, 0x64, 0x61, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x4f, 0x0a, 0x25, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x7a,
	0x69, 0x6d, 0x75, 0x74, 0x68, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x47, 0x72, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x73, 0x71, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x71, 0x75,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x7a,
	0x69, 0x6d, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x20, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x22, 0xb8, 0x0b, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x65, 0x72, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x65, 0x72, 0x6e, 0x69,
	0x63, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0c, 0x63, 0x6f, 0x70, 0x65, 0x72, 0x6e, 0x69, 0x63, 0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x62,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x6c, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x77, 0x61, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x77, 0x61, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6e, 0x5f, 0x61, 0x7a, 0x69,
	0x6d, 0x75, 0x74, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x75, 0x6e, 0x41,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6e, 0x5f, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73,
	0x75, 0x6e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xaf, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6c,
	0x65, 0x62, 0x6f, 0x78, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_datasets_v1_opendata_proto_rawDescOnce sync.Once
	file_datasets_v1_opendata_proto_rawDescData []byte
)

func file_datasets_v1_opendata_proto_rawDescGZIP() []byte {
	file_datasets_v1_opendata_proto_rawDescOnce.Do(func() {
		file_datasets_v1_opendata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datasets_v1_opendata_proto_rawDesc), len(file_datasets_v1_opendata_proto_rawDesc)))
	})
	return file_datasets_v1_opendata_proto_rawDescData
}

var file_datasets_v1_opendata_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_datasets_v1_opendata_proto_goTypes = []any{
	(*ASFSarGranule)(nil),              // 0: datasets.v1.ASFSarGranule
	(*UmbraSarGranule)(nil),            // 1: datasets.v1.UmbraSarGranule
	(*CopernicusDataspaceGranule)(nil), // 2: datasets.v1.CopernicusDataspaceGranule
	(ProcessingLevel)(0),               // 3: datasets.v1.ProcessingLevel
	(FlightDirection)(0),               // 4: datasets.v1.FlightDirection
	(*timestamppb.Timestamp)(nil),      // 5: google.protobuf.Timestamp
	(*LatLon)(nil),                     // 6: datasets.v1.LatLon
	(*GeobufData)(nil),                 // 7: datasets.v1.GeobufData
	(OpendataProvider)(0),              // 8: datasets.v1.OpendataProvider
	(Polarization)(0),                  // 9: datasets.v1.Polarization
	(ObservationDirection)(0),          // 10: datasets.v1.ObservationDirection
	(*LatLonAlt)(nil),                  // 11: datasets.v1.LatLonAlt
	(AcquisitionMode)(0),               // 12: datasets.v1.AcquisitionMode
	(*UUID)(nil),                       // 13: datasets.v1.UUID
}
var file_datasets_v1_opendata_proto_depIdxs = []int32{
	3,  // 0: datasets.v1.ASFSarGranule.processing_level:type_name -> datasets.v1.ProcessingLevel
	4,  // 1: datasets.v1.ASFSarGranule.flight_direction:type_name -> datasets.v1.FlightDirection
	5,  // 2: datasets.v1.ASFSarGranule.stop_time:type_name -> google.protobuf.Timestamp
	5,  // 3: datasets.v1.ASFSarGranule.processing_time:type_name -> google.protobuf.Timestamp
	6,  // 4: datasets.v1.ASFSarGranule.center:type_name -> datasets.v1.LatLon
	7,  // 5: datasets.v1.ASFSarGranule.geometry:type_name -> datasets.v1.GeobufData
	8,  // 6: datasets.v1.ASFSarGranule.storage_provider:type_name -> datasets.v1.OpendataProvider
	9,  // 7: datasets.v1.ASFSarGranule.polarization:type_name -> datasets.v1.Polarization
	3,  // 8: datasets.v1.UmbraSarGranule.processing_level:type_name -> datasets.v1.ProcessingLevel
	4,  // 9: datasets.v1.UmbraSarGranule.flight_direction:type_name -> datasets.v1.FlightDirection
	10, // 10: datasets.v1.UmbraSarGranule.observation_direction:type_name -> datasets.v1.ObservationDirection
	5,  // 11: datasets.v1.UmbraSarGranule.stop_time:type_name -> google.protobuf.Timestamp
	11, // 12: datasets.v1.UmbraSarGranule.center:type_name -> datasets.v1.LatLonAlt
	7,  // 13: datasets.v1.UmbraSarGranule.geometry:type_name -> datasets.v1.GeobufData
	8,  // 14: datasets.v1.UmbraSarGranule.storage_provider:type_name -> datasets.v1.OpendataProvider
	9,  // 15: datasets.v1.UmbraSarGranule.polarization:type_name -> datasets.v1.Polarization
	12, // 16: datasets.v1.UmbraSarGranule.acquisition_mode:type_name -> datasets.v1.AcquisitionMode
	3,  // 17: datasets.v1.CopernicusDataspaceGranule.processing_level:type_name -> datasets.v1.ProcessingLevel
	4,  // 18: datasets.v1.CopernicusDataspaceGranule.flight_direction:type_name -> datasets.v1.FlightDirection
	13, // 19: datasets.v1.CopernicusDataspaceGranule.copernicus_id:type_name -> datasets.v1.UUID
	5,  // 20: datasets.v1.CopernicusDataspaceGranule.stop_time:type_name -> google.protobuf.Timestamp
	6,  // 21: datasets.v1.CopernicusDataspaceGranule.center:type_name -> datasets.v1.LatLon
	7,  // 22: datasets.v1.CopernicusDataspaceGranule.geometry:type_name -> datasets.v1.GeobufData
	5,  // 23: datasets.v1.CopernicusDataspaceGranule.published:type_name -> google.protobuf.Timestamp
	5,  // 24: datasets.v1.CopernicusDataspaceGranule.updated:type_name -> google.protobuf.Timestamp
	8,  // 25: datasets.v1.CopernicusDataspaceGranule.storage_provider:type_name -> datasets.v1.OpendataProvider
	9,  // 26: datasets.v1.CopernicusDataspaceGranule.polarization:type_name -> datasets.v1.Polarization
	12, // 27: datasets.v1.CopernicusDataspaceGranule.acquisition_mode:type_name -> datasets.v1.AcquisitionMode
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_datasets_v1_opendata_proto_init() }
func file_datasets_v1_opendata_proto_init() {
	if File_datasets_v1_opendata_proto != nil {
		return
	}
	file_datasets_v1_well_known_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datasets_v1_opendata_proto_rawDesc), len(file_datasets_v1_opendata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datasets_v1_opendata_proto_goTypes,
		DependencyIndexes: file_datasets_v1_opendata_proto_depIdxs,
		MessageInfos:      file_datasets_v1_opendata_proto_msgTypes,
	}.Build()
	File_datasets_v1_opendata_proto = out.File
	file_datasets_v1_opendata_proto_goTypes = nil
	file_datasets_v1_opendata_proto_depIdxs = nil
}
