//
//Protobuf definition for the Tilebox datasets API.
//
//Conventions:
//- A dataset is a set of data points of the same type.
//- A single data point (entry) is referred to in all messages as datapoint.
//- Data points for a single dataset are grouped into collections.
//- All requests for fetching data points or a dataset operate only on a specific collection.
//
//- Messages with the prefix Get and suffix Request are used for request parameters.
//- All other messages are used for responses and have no such prefix and Suffix.
//
//- DatapointMetadata represents the metadata of a single data point for all time series datasets.
//
//- A collection is identified by its id. The id is a string and is unique across all datasets.
//- CollectionInfo contains information about the data available in a dataset collection.
//
//- All time fields use the google.protobuf.Timestamp message type.
//
//- When a wrapper message is needed to return a list of data points, the message name is the plural of the data point
//- message name. E.g. UmbraSarGranules contains a list of UmbraSarGranule messages.
//- Typically the wrapper message consists of three fields:
//- A list of data point metadata, which is always called meta. (repeated DatapointMetadata meta = 1;)
//- A list of data points, which is always called data. (repeated <DatapointType> data = 2;)
//- Pagination information, which is always called next_page. (optional Pagination next_page = 3;)
//This field is optional and only present if there are more data points available.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: datasets/v1/core.proto

package datasetsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// General, multi purpose messages
type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	mi := &file_datasets_v1_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{0}
}

func (x *ID) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// A time interval
type TimeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // Start time of the interval.
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // End time of the interval.
	// We use exclusive for start and inclusive for end, because that way when both are false
	// we have a half-open interval [start, end) which is the default behaviour we want to achieve.
	// Flag indicating whether the start time is exclusive. If true, the start time is not included in the interval.
	StartExclusive bool `protobuf:"varint,3,opt,name=start_exclusive,json=startExclusive,proto3" json:"start_exclusive,omitempty"`
	// Flag indicating whether the end time is inclusive. If true, the end time is included in the interval.
	EndInclusive bool `protobuf:"varint,4,opt,name=end_inclusive,json=endInclusive,proto3" json:"end_inclusive,omitempty"`
}

func (x *TimeInterval) Reset() {
	*x = TimeInterval{}
	mi := &file_datasets_v1_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInterval) ProtoMessage() {}

func (x *TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInterval.ProtoReflect.Descriptor instead.
func (*TimeInterval) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{1}
}

func (x *TimeInterval) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeInterval) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimeInterval) GetStartExclusive() bool {
	if x != nil {
		return x.StartExclusive
	}
	return false
}

func (x *TimeInterval) GetEndInclusive() bool {
	if x != nil {
		return x.EndInclusive
	}
	return false
}

// A datapoint interval
type DatapointInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartId string `protobuf:"bytes,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"` // The id of the first data point in the interval.
	EndId   string `protobuf:"bytes,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`       // The id of the last data point in the interval.
	// We use exclusive for start and inclusive for end, because that way when both are false
	// we have a half-open interval [start, end) which is the default behaviour we want to achieve.
	// Flag indicating whether the start id is exclusive.
	// If true, the datapoint with the given start id is not included in the interval.
	StartExclusive bool `protobuf:"varint,3,opt,name=start_exclusive,json=startExclusive,proto3" json:"start_exclusive,omitempty"`
	// Flag indicating whether the end id is inclusive.
	// If true, the datapoint with the given end id is included in the interval.
	EndInclusive bool `protobuf:"varint,4,opt,name=end_inclusive,json=endInclusive,proto3" json:"end_inclusive,omitempty"`
}

func (x *DatapointInterval) Reset() {
	*x = DatapointInterval{}
	mi := &file_datasets_v1_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatapointInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatapointInterval) ProtoMessage() {}

func (x *DatapointInterval) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatapointInterval.ProtoReflect.Descriptor instead.
func (*DatapointInterval) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{2}
}

func (x *DatapointInterval) GetStartId() string {
	if x != nil {
		return x.StartId
	}
	return ""
}

func (x *DatapointInterval) GetEndId() string {
	if x != nil {
		return x.EndId
	}
	return ""
}

func (x *DatapointInterval) GetStartExclusive() bool {
	if x != nil {
		return x.StartExclusive
	}
	return false
}

func (x *DatapointInterval) GetEndInclusive() bool {
	if x != nil {
		return x.EndInclusive
	}
	return false
}

// Pagination information for paginated queries
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of entries to return.
	Limit *int64 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Return entries starting after this entry.
	// This is the id of the last entry returned in the previous page as the next parameter in each paginated query.
	StartingAfter *string `protobuf:"bytes,2,opt,name=starting_after,json=startingAfter,proto3,oneof" json:"starting_after,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_datasets_v1_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{3}
}

func (x *Pagination) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *Pagination) GetStartingAfter() string {
	if x != nil && x.StartingAfter != nil {
		return *x.StartingAfter
	}
	return ""
}

// DatapointMetadata contains the metadata for a single data point.
type DatapointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`             // The time the message was received by the on-board computer.
	IngestionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ingestion_time,json=ingestionTime,proto3" json:"ingestion_time,omitempty"` // The time the message was ingested by Tilebox.
	Id            *string                `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`                                      // The external id of the datapoint.
}

func (x *DatapointMetadata) Reset() {
	*x = DatapointMetadata{}
	mi := &file_datasets_v1_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatapointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatapointMetadata) ProtoMessage() {}

func (x *DatapointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatapointMetadata.ProtoReflect.Descriptor instead.
func (*DatapointMetadata) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{4}
}

func (x *DatapointMetadata) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *DatapointMetadata) GetIngestionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IngestionTime
	}
	return nil
}

func (x *DatapointMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Collection contains basic information about a dataset collection
type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	mi := &file_datasets_v1_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{5}
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CollectionInfo contains information about the data available in a dataset collection
type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection   *Collection   `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Availability *TimeInterval `protobuf:"bytes,2,opt,name=availability,proto3,oneof" json:"availability,omitempty"` // The time interval for which data is available.
	Count        *uint64       `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`              // Number of entries in the dataset.
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	mi := &file_datasets_v1_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{6}
}

func (x *CollectionInfo) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *CollectionInfo) GetAvailability() *TimeInterval {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *CollectionInfo) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Collections contains a list of CollectionInfo messages.
type Collections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CollectionInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Collections) Reset() {
	*x = Collections{}
	mi := &file_datasets_v1_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Collections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collections) ProtoMessage() {}

func (x *Collections) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collections.ProtoReflect.Descriptor instead.
func (*Collections) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{7}
}

func (x *Collections) GetData() []*CollectionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// FieldAnnotation contains additional information about a field in a dataset
type FieldAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ExampleValue string `protobuf:"bytes,2,opt,name=example_value,json=exampleValue,proto3" json:"example_value,omitempty"`
}

func (x *FieldAnnotation) Reset() {
	*x = FieldAnnotation{}
	mi := &file_datasets_v1_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldAnnotation) ProtoMessage() {}

func (x *FieldAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldAnnotation.ProtoReflect.Descriptor instead.
func (*FieldAnnotation) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{8}
}

func (x *FieldAnnotation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FieldAnnotation) GetExampleValue() string {
	if x != nil {
		return x.ExampleValue
	}
	return ""
}

// AnnotatedType describes a message type
type AnnotatedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptorSet    *descriptorpb.FileDescriptorSet `protobuf:"bytes,1,opt,name=descriptor_set,json=descriptorSet,proto3" json:"descriptor_set,omitempty"`
	TypeUrl          string                          `protobuf:"bytes,2,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"` // the url of the type, one of the types defined in the descriptor
	Description      string                          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FieldAnnotations []*FieldAnnotation              `protobuf:"bytes,4,rep,name=field_annotations,json=fieldAnnotations,proto3" json:"field_annotations,omitempty"`
}

func (x *AnnotatedType) Reset() {
	*x = AnnotatedType{}
	mi := &file_datasets_v1_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnnotatedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedType) ProtoMessage() {}

func (x *AnnotatedType) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedType.ProtoReflect.Descriptor instead.
func (*AnnotatedType) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{9}
}

func (x *AnnotatedType) GetDescriptorSet() *descriptorpb.FileDescriptorSet {
	if x != nil {
		return x.DescriptorSet
	}
	return nil
}

func (x *AnnotatedType) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

func (x *AnnotatedType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnnotatedType) GetFieldAnnotations() []*FieldAnnotation {
	if x != nil {
		return x.FieldAnnotations
	}
	return nil
}

// Dataset contains information about a single dataset
type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dataset id
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the dataset group to which this dataset belongs
	GroupId *ID `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// the type of the dataset
	Type *AnnotatedType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// normalized snake case name of the dataset, which can be used as a valid code identifier
	CodeName string `protobuf:"bytes,4,opt,name=code_name,json=codeName,proto3" json:"code_name,omitempty"`
	// display name of the dataset
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// summary of the dataset
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	// optional icon of the dataset
	Icon string `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	// description of the dataset, in markdown format
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// whether the dataset is writable
	Writable bool `protobuf:"varint,9,opt,name=writable,proto3" json:"writable,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_datasets_v1_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{10}
}

func (x *Dataset) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Dataset) GetGroupId() *ID {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *Dataset) GetType() *AnnotatedType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Dataset) GetCodeName() string {
	if x != nil {
		return x.CodeName
	}
	return ""
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Dataset) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Dataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Dataset) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

// DatasetGroup represent a dataset group
type DatasetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group id
	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// optional parent group id
	ParentId *ID `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// normalized snake case name of the dataset group, which can be used as a valid code identifier
	CodeName string `protobuf:"bytes,3,opt,name=code_name,json=codeName,proto3" json:"code_name,omitempty"`
	// display name of the group
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// optional icon of the group
	Icon string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DatasetGroup) Reset() {
	*x = DatasetGroup{}
	mi := &file_datasets_v1_core_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetGroup) ProtoMessage() {}

func (x *DatasetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetGroup.ProtoReflect.Descriptor instead.
func (*DatasetGroup) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{11}
}

func (x *DatasetGroup) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DatasetGroup) GetParentId() *ID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *DatasetGroup) GetCodeName() string {
	if x != nil {
		return x.CodeName
	}
	return ""
}

func (x *DatasetGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetGroup) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// CreateCollectionRequest is used to create a new collection.
type CreateCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *ID    `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"` // The dataset id where the collection should be created.
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // The name of the collection to create.
}

func (x *CreateCollectionRequest) Reset() {
	*x = CreateCollectionRequest{}
	mi := &file_datasets_v1_core_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectionRequest) ProtoMessage() {}

func (x *CreateCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectionRequest.ProtoReflect.Descriptor instead.
func (*CreateCollectionRequest) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCollectionRequest) GetDatasetId() *ID {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *CreateCollectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetCollectionsRequest contains the request parameters
// for retrieving a list of all available collections for a given dataset.
type GetCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId        *ID  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`                       // The dataset id.
	WithAvailability bool `protobuf:"varint,2,opt,name=with_availability,json=withAvailability,proto3" json:"with_availability,omitempty"` // If true, the response will include the availability interval.
	WithCount        bool `protobuf:"varint,3,opt,name=with_count,json=withCount,proto3" json:"with_count,omitempty"`                      // If true, the response will include the number of entries.
}

func (x *GetCollectionsRequest) Reset() {
	*x = GetCollectionsRequest{}
	mi := &file_datasets_v1_core_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsRequest) ProtoMessage() {}

func (x *GetCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{13}
}

func (x *GetCollectionsRequest) GetDatasetId() *ID {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *GetCollectionsRequest) GetWithAvailability() bool {
	if x != nil {
		return x.WithAvailability
	}
	return false
}

func (x *GetCollectionsRequest) GetWithCount() bool {
	if x != nil {
		return x.WithCount
	}
	return false
}

// GetCollectionByNameRequest contains the request parameters for retrieving a single collection by its name.
type GetCollectionByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName   string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`        // The name of the collection retrieve.
	WithAvailability bool   `protobuf:"varint,2,opt,name=with_availability,json=withAvailability,proto3" json:"with_availability,omitempty"` // If true, the response will include the availability interval.
	WithCount        bool   `protobuf:"varint,3,opt,name=with_count,json=withCount,proto3" json:"with_count,omitempty"`                      // If true, the response will include the number of entries.
	DatasetId        *ID    `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`                       // The dataset id.
}

func (x *GetCollectionByNameRequest) Reset() {
	*x = GetCollectionByNameRequest{}
	mi := &file_datasets_v1_core_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCollectionByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionByNameRequest) ProtoMessage() {}

func (x *GetCollectionByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionByNameRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionByNameRequest) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{14}
}

func (x *GetCollectionByNameRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetCollectionByNameRequest) GetWithAvailability() bool {
	if x != nil {
		return x.WithAvailability
	}
	return false
}

func (x *GetCollectionByNameRequest) GetWithCount() bool {
	if x != nil {
		return x.WithCount
	}
	return false
}

func (x *GetCollectionByNameRequest) GetDatasetId() *ID {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

// GetDatasetForIntervalRequest contains the request parameters for retrieving data for a time interval.
type GetDatasetForIntervalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"` // The collection id.
	// Either time interval or datapoint interval must be set, but not both.
	TimeInterval      *TimeInterval      `protobuf:"bytes,2,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`                // The time interval for which data is requested.
	DatapointInterval *DatapointInterval `protobuf:"bytes,6,opt,name=datapoint_interval,json=datapointInterval,proto3" json:"datapoint_interval,omitempty"` // The datapoint interval for which data is requested.
	Page              *Pagination        `protobuf:"bytes,3,opt,name=page,proto3,oneof" json:"page,omitempty"`                                              // The pagination parameters for this request.
	SkipData          bool               `protobuf:"varint,4,opt,name=skip_data,json=skipData,proto3" json:"skip_data,omitempty"`                           // If true, the datapoint data is not returned.
	// If true, the datapoint metadata is not returned.
	// If both skip_data and skip_meta are true,
	// the response will only consist of a list of datapoint ids without any additional data or metadata.
	SkipMeta bool `protobuf:"varint,5,opt,name=skip_meta,json=skipMeta,proto3" json:"skip_meta,omitempty"`
}

func (x *GetDatasetForIntervalRequest) Reset() {
	*x = GetDatasetForIntervalRequest{}
	mi := &file_datasets_v1_core_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatasetForIntervalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetForIntervalRequest) ProtoMessage() {}

func (x *GetDatasetForIntervalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetForIntervalRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetForIntervalRequest) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{15}
}

func (x *GetDatasetForIntervalRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetDatasetForIntervalRequest) GetTimeInterval() *TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *GetDatasetForIntervalRequest) GetDatapointInterval() *DatapointInterval {
	if x != nil {
		return x.DatapointInterval
	}
	return nil
}

func (x *GetDatasetForIntervalRequest) GetPage() *Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetDatasetForIntervalRequest) GetSkipData() bool {
	if x != nil {
		return x.SkipData
	}
	return false
}

func (x *GetDatasetForIntervalRequest) GetSkipMeta() bool {
	if x != nil {
		return x.SkipMeta
	}
	return false
}

// GetDatapointByIdRequest contains the request parameters for retrieving a single data point in a collection by its id.
type GetDatapointByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"` // The collection id.
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                         // The id of the requested data point.
	SkipData     bool   `protobuf:"varint,3,opt,name=skip_data,json=skipData,proto3" json:"skip_data,omitempty"`            // If true, only the datapoint metadata is returned.
}

func (x *GetDatapointByIdRequest) Reset() {
	*x = GetDatapointByIdRequest{}
	mi := &file_datasets_v1_core_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatapointByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatapointByIdRequest) ProtoMessage() {}

func (x *GetDatapointByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatapointByIdRequest.ProtoReflect.Descriptor instead.
func (*GetDatapointByIdRequest) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{16}
}

func (x *GetDatapointByIdRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetDatapointByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDatapointByIdRequest) GetSkipData() bool {
	if x != nil {
		return x.SkipData
	}
	return false
}

// Any is a message that can hold any other message as bytes.
// We don't use google.protobuf.Any because we want the JSON representation of the value field to be bytes.
type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// Must be a valid serialized protocol buffer of the above specified type.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Any) Reset() {
	*x = Any{}
	mi := &file_datasets_v1_core_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{17}
}

func (x *Any) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

func (x *Any) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// RepeatedAny is a message holding a list of messages, that all share the same variable message type.
// It is preferable over a repeated Any field because it avoids repeating the type_url for every single element.
type RepeatedAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// Must be a valid serialized protocol buffer of the above specified type.
	Value [][]byte `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedAny) Reset() {
	*x = RepeatedAny{}
	mi := &file_datasets_v1_core_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedAny) ProtoMessage() {}

func (x *RepeatedAny) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_core_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedAny.ProtoReflect.Descriptor instead.
func (*RepeatedAny) Descriptor() ([]byte, []int) {
	return file_datasets_v1_core_proto_rawDescGZIP(), []int{18}
}

func (x *RepeatedAny) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

func (x *RepeatedAny) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_datasets_v1_core_proto protoreflect.FileDescriptor

var file_datasets_v1_core_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x70, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x11,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x0a, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2, 0x01,
	0x0a, 0x0d, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x49, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x5d, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x6b, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a,
	0x03, 0x41, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xab, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f, 0x78, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62,
	0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datasets_v1_core_proto_rawDescOnce sync.Once
	file_datasets_v1_core_proto_rawDescData = file_datasets_v1_core_proto_rawDesc
)

func file_datasets_v1_core_proto_rawDescGZIP() []byte {
	file_datasets_v1_core_proto_rawDescOnce.Do(func() {
		file_datasets_v1_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_datasets_v1_core_proto_rawDescData)
	})
	return file_datasets_v1_core_proto_rawDescData
}

var file_datasets_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_datasets_v1_core_proto_goTypes = []any{
	(*ID)(nil),                             // 0: datasets.v1.ID
	(*TimeInterval)(nil),                   // 1: datasets.v1.TimeInterval
	(*DatapointInterval)(nil),              // 2: datasets.v1.DatapointInterval
	(*Pagination)(nil),                     // 3: datasets.v1.Pagination
	(*DatapointMetadata)(nil),              // 4: datasets.v1.DatapointMetadata
	(*Collection)(nil),                     // 5: datasets.v1.Collection
	(*CollectionInfo)(nil),                 // 6: datasets.v1.CollectionInfo
	(*Collections)(nil),                    // 7: datasets.v1.Collections
	(*FieldAnnotation)(nil),                // 8: datasets.v1.FieldAnnotation
	(*AnnotatedType)(nil),                  // 9: datasets.v1.AnnotatedType
	(*Dataset)(nil),                        // 10: datasets.v1.Dataset
	(*DatasetGroup)(nil),                   // 11: datasets.v1.DatasetGroup
	(*CreateCollectionRequest)(nil),        // 12: datasets.v1.CreateCollectionRequest
	(*GetCollectionsRequest)(nil),          // 13: datasets.v1.GetCollectionsRequest
	(*GetCollectionByNameRequest)(nil),     // 14: datasets.v1.GetCollectionByNameRequest
	(*GetDatasetForIntervalRequest)(nil),   // 15: datasets.v1.GetDatasetForIntervalRequest
	(*GetDatapointByIdRequest)(nil),        // 16: datasets.v1.GetDatapointByIdRequest
	(*Any)(nil),                            // 17: datasets.v1.Any
	(*RepeatedAny)(nil),                    // 18: datasets.v1.RepeatedAny
	(*timestamppb.Timestamp)(nil),          // 19: google.protobuf.Timestamp
	(*descriptorpb.FileDescriptorSet)(nil), // 20: google.protobuf.FileDescriptorSet
}
var file_datasets_v1_core_proto_depIdxs = []int32{
	19, // 0: datasets.v1.TimeInterval.start_time:type_name -> google.protobuf.Timestamp
	19, // 1: datasets.v1.TimeInterval.end_time:type_name -> google.protobuf.Timestamp
	19, // 2: datasets.v1.DatapointMetadata.event_time:type_name -> google.protobuf.Timestamp
	19, // 3: datasets.v1.DatapointMetadata.ingestion_time:type_name -> google.protobuf.Timestamp
	5,  // 4: datasets.v1.CollectionInfo.collection:type_name -> datasets.v1.Collection
	1,  // 5: datasets.v1.CollectionInfo.availability:type_name -> datasets.v1.TimeInterval
	6,  // 6: datasets.v1.Collections.data:type_name -> datasets.v1.CollectionInfo
	20, // 7: datasets.v1.AnnotatedType.descriptor_set:type_name -> google.protobuf.FileDescriptorSet
	8,  // 8: datasets.v1.AnnotatedType.field_annotations:type_name -> datasets.v1.FieldAnnotation
	0,  // 9: datasets.v1.Dataset.id:type_name -> datasets.v1.ID
	0,  // 10: datasets.v1.Dataset.group_id:type_name -> datasets.v1.ID
	9,  // 11: datasets.v1.Dataset.type:type_name -> datasets.v1.AnnotatedType
	0,  // 12: datasets.v1.DatasetGroup.id:type_name -> datasets.v1.ID
	0,  // 13: datasets.v1.DatasetGroup.parent_id:type_name -> datasets.v1.ID
	0,  // 14: datasets.v1.CreateCollectionRequest.dataset_id:type_name -> datasets.v1.ID
	0,  // 15: datasets.v1.GetCollectionsRequest.dataset_id:type_name -> datasets.v1.ID
	0,  // 16: datasets.v1.GetCollectionByNameRequest.dataset_id:type_name -> datasets.v1.ID
	1,  // 17: datasets.v1.GetDatasetForIntervalRequest.time_interval:type_name -> datasets.v1.TimeInterval
	2,  // 18: datasets.v1.GetDatasetForIntervalRequest.datapoint_interval:type_name -> datasets.v1.DatapointInterval
	3,  // 19: datasets.v1.GetDatasetForIntervalRequest.page:type_name -> datasets.v1.Pagination
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_datasets_v1_core_proto_init() }
func file_datasets_v1_core_proto_init() {
	if File_datasets_v1_core_proto != nil {
		return
	}
	file_datasets_v1_core_proto_msgTypes[3].OneofWrappers = []any{}
	file_datasets_v1_core_proto_msgTypes[4].OneofWrappers = []any{}
	file_datasets_v1_core_proto_msgTypes[6].OneofWrappers = []any{}
	file_datasets_v1_core_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datasets_v1_core_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datasets_v1_core_proto_goTypes,
		DependencyIndexes: file_datasets_v1_core_proto_depIdxs,
		MessageInfos:      file_datasets_v1_core_proto_msgTypes,
	}.Build()
	File_datasets_v1_core_proto = out.File
	file_datasets_v1_core_proto_rawDesc = nil
	file_datasets_v1_core_proto_goTypes = nil
	file_datasets_v1_core_proto_depIdxs = nil
}
