// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: datasets/v1/data_ingestion.proto

package datasetsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Legacy ingest request
// IngestDatapointsRequest is used to ingest one or multiple datapoints into a collection.
type IngestDatapointsRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CollectionId  *ID                    `protobuf:"bytes,1,opt,name=collection_id,json=collectionId"`
	xxx_hidden_Datapoints    *Datapoints            `protobuf:"bytes,2,opt,name=datapoints"`
	xxx_hidden_AllowExisting bool                   `protobuf:"varint,3,opt,name=allow_existing,json=allowExisting"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *IngestDatapointsRequest) Reset() {
	*x = IngestDatapointsRequest{}
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestDatapointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestDatapointsRequest) ProtoMessage() {}

func (x *IngestDatapointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IngestDatapointsRequest) GetCollectionId() *ID {
	if x != nil {
		return x.xxx_hidden_CollectionId
	}
	return nil
}

func (x *IngestDatapointsRequest) GetDatapoints() *Datapoints {
	if x != nil {
		return x.xxx_hidden_Datapoints
	}
	return nil
}

func (x *IngestDatapointsRequest) GetAllowExisting() bool {
	if x != nil {
		return x.xxx_hidden_AllowExisting
	}
	return false
}

func (x *IngestDatapointsRequest) SetCollectionId(v *ID) {
	x.xxx_hidden_CollectionId = v
}

func (x *IngestDatapointsRequest) SetDatapoints(v *Datapoints) {
	x.xxx_hidden_Datapoints = v
}

func (x *IngestDatapointsRequest) SetAllowExisting(v bool) {
	x.xxx_hidden_AllowExisting = v
}

func (x *IngestDatapointsRequest) HasCollectionId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CollectionId != nil
}

func (x *IngestDatapointsRequest) HasDatapoints() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Datapoints != nil
}

func (x *IngestDatapointsRequest) ClearCollectionId() {
	x.xxx_hidden_CollectionId = nil
}

func (x *IngestDatapointsRequest) ClearDatapoints() {
	x.xxx_hidden_Datapoints = nil
}

type IngestDatapointsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CollectionId *ID
	Datapoints   *Datapoints
	// Whether to allow existing datapoints as part of the request. If true, datapoints that already exist will be
	// ignored, and the number of such existing datapoints will be returned in the response. If false, any datapoints
	// that already exist will result in an error. Setting this to true is useful for achieving idempotency (e.g.
	// allowing re-ingestion of datapoints that have already been ingested in the past).
	AllowExisting bool
}

func (b0 IngestDatapointsRequest_builder) Build() *IngestDatapointsRequest {
	m0 := &IngestDatapointsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CollectionId = b.CollectionId
	x.xxx_hidden_Datapoints = b.Datapoints
	x.xxx_hidden_AllowExisting = b.AllowExisting
	return m0
}

// IngestRequest is used to ingest one or multiple datapoints into a collection.
type IngestRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CollectionId  *ID                    `protobuf:"bytes,1,opt,name=collection_id,json=collectionId"`
	xxx_hidden_Values        [][]byte               `protobuf:"bytes,2,rep,name=values"`
	xxx_hidden_AllowExisting bool                   `protobuf:"varint,3,opt,name=allow_existing,json=allowExisting"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IngestRequest) GetCollectionId() *ID {
	if x != nil {
		return x.xxx_hidden_CollectionId
	}
	return nil
}

func (x *IngestRequest) GetValues() [][]byte {
	if x != nil {
		return x.xxx_hidden_Values
	}
	return nil
}

func (x *IngestRequest) GetAllowExisting() bool {
	if x != nil {
		return x.xxx_hidden_AllowExisting
	}
	return false
}

func (x *IngestRequest) SetCollectionId(v *ID) {
	x.xxx_hidden_CollectionId = v
}

func (x *IngestRequest) SetValues(v [][]byte) {
	x.xxx_hidden_Values = v
}

func (x *IngestRequest) SetAllowExisting(v bool) {
	x.xxx_hidden_AllowExisting = v
}

func (x *IngestRequest) HasCollectionId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CollectionId != nil
}

func (x *IngestRequest) ClearCollectionId() {
	x.xxx_hidden_CollectionId = nil
}

type IngestRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CollectionId *ID
	// The datapoints to insert. The values here are encoded protobuf messages. The type of the message is determined
	// by the type of the dataset that the specified collection belongs to.
	Values [][]byte
	// Whether to allow existing datapoints as part of the request. If true, datapoints that already exist will be
	// ignored, and the number of such existing datapoints will be returned in the response. If false, any datapoints
	// that already exist will result in an error. Setting this to true is useful for achieving idempotency (e.g.
	// allowing re-ingestion of datapoints that have already been ingested in the past).
	AllowExisting bool
}

func (b0 IngestRequest_builder) Build() *IngestRequest {
	m0 := &IngestRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CollectionId = b.CollectionId
	x.xxx_hidden_Values = b.Values
	x.xxx_hidden_AllowExisting = b.AllowExisting
	return m0
}

// IngestResponse is the response to a IngestRequest, indicating the number of datapoints that were
// ingested as well as the generated ids for those datapoints.
type IngestResponse struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NumCreated   int64                  `protobuf:"varint,1,opt,name=num_created,json=numCreated"`
	xxx_hidden_NumExisting  int64                  `protobuf:"varint,2,opt,name=num_existing,json=numExisting"`
	xxx_hidden_DatapointIds *[]*ID                 `protobuf:"bytes,3,rep,name=datapoint_ids,json=datapointIds"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IngestResponse) GetNumCreated() int64 {
	if x != nil {
		return x.xxx_hidden_NumCreated
	}
	return 0
}

func (x *IngestResponse) GetNumExisting() int64 {
	if x != nil {
		return x.xxx_hidden_NumExisting
	}
	return 0
}

func (x *IngestResponse) GetDatapointIds() []*ID {
	if x != nil {
		if x.xxx_hidden_DatapointIds != nil {
			return *x.xxx_hidden_DatapointIds
		}
	}
	return nil
}

func (x *IngestResponse) SetNumCreated(v int64) {
	x.xxx_hidden_NumCreated = v
}

func (x *IngestResponse) SetNumExisting(v int64) {
	x.xxx_hidden_NumExisting = v
}

func (x *IngestResponse) SetDatapointIds(v []*ID) {
	x.xxx_hidden_DatapointIds = &v
}

type IngestResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NumCreated   int64
	NumExisting  int64
	DatapointIds []*ID
}

func (b0 IngestResponse_builder) Build() *IngestResponse {
	m0 := &IngestResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NumCreated = b.NumCreated
	x.xxx_hidden_NumExisting = b.NumExisting
	x.xxx_hidden_DatapointIds = &b.DatapointIds
	return m0
}

// DeleteRequest is used to delete multiple datapoints from a collection.
type DeleteRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CollectionId *ID                    `protobuf:"bytes,1,opt,name=collection_id,json=collectionId"`
	xxx_hidden_DatapointIds *[]*ID                 `protobuf:"bytes,2,rep,name=datapoint_ids,json=datapointIds"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteRequest) GetCollectionId() *ID {
	if x != nil {
		return x.xxx_hidden_CollectionId
	}
	return nil
}

func (x *DeleteRequest) GetDatapointIds() []*ID {
	if x != nil {
		if x.xxx_hidden_DatapointIds != nil {
			return *x.xxx_hidden_DatapointIds
		}
	}
	return nil
}

func (x *DeleteRequest) SetCollectionId(v *ID) {
	x.xxx_hidden_CollectionId = v
}

func (x *DeleteRequest) SetDatapointIds(v []*ID) {
	x.xxx_hidden_DatapointIds = &v
}

func (x *DeleteRequest) HasCollectionId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CollectionId != nil
}

func (x *DeleteRequest) ClearCollectionId() {
	x.xxx_hidden_CollectionId = nil
}

type DeleteRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CollectionId *ID
	DatapointIds []*ID
}

func (b0 DeleteRequest_builder) Build() *DeleteRequest {
	m0 := &DeleteRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CollectionId = b.CollectionId
	x.xxx_hidden_DatapointIds = &b.DatapointIds
	return m0
}

// DeleteResponse is used to indicate that multiple datapoints were deleted.
type DeleteResponse struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NumDeleted int64                  `protobuf:"varint,1,opt,name=num_deleted,json=numDeleted"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_data_ingestion_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteResponse) GetNumDeleted() int64 {
	if x != nil {
		return x.xxx_hidden_NumDeleted
	}
	return 0
}

func (x *DeleteResponse) SetNumDeleted(v int64) {
	x.xxx_hidden_NumDeleted = v
}

type DeleteResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NumDeleted int64
}

func (b0 DeleteResponse_builder) Build() *DeleteResponse {
	m0 := &DeleteResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NumDeleted = b.NumDeleted
	return m0
}

var File_datasets_v1_data_ingestion_proto protoreflect.FileDescriptor

const file_datasets_v1_data_ingestion_proto_rawDesc = "" +
	"\n" +
	" datasets/v1/data_ingestion.proto\x12\vdatasets.v1\x1a\x16datasets/v1/core.proto\x1a!google/protobuf/go_features.proto\"\xaf\x01\n" +
	"\x17IngestDatapointsRequest\x124\n" +
	"\rcollection_id\x18\x01 \x01(\v2\x0f.datasets.v1.IDR\fcollectionId\x127\n" +
	"\n" +
	"datapoints\x18\x02 \x01(\v2\x17.datasets.v1.DatapointsR\n" +
	"datapoints\x12%\n" +
	"\x0eallow_existing\x18\x03 \x01(\bR\rallowExisting\"\x84\x01\n" +
	"\rIngestRequest\x124\n" +
	"\rcollection_id\x18\x01 \x01(\v2\x0f.datasets.v1.IDR\fcollectionId\x12\x16\n" +
	"\x06values\x18\x02 \x03(\fR\x06values\x12%\n" +
	"\x0eallow_existing\x18\x03 \x01(\bR\rallowExisting\"\x8a\x01\n" +
	"\x0eIngestResponse\x12\x1f\n" +
	"\vnum_created\x18\x01 \x01(\x03R\n" +
	"numCreated\x12!\n" +
	"\fnum_existing\x18\x02 \x01(\x03R\vnumExisting\x124\n" +
	"\rdatapoint_ids\x18\x03 \x03(\v2\x0f.datasets.v1.IDR\fdatapointIds\"{\n" +
	"\rDeleteRequest\x124\n" +
	"\rcollection_id\x18\x01 \x01(\v2\x0f.datasets.v1.IDR\fcollectionId\x124\n" +
	"\rdatapoint_ids\x18\x02 \x03(\v2\x0f.datasets.v1.IDR\fdatapointIds\"1\n" +
	"\x0eDeleteResponse\x12\x1f\n" +
	"\vnum_deleted\x18\x01 \x01(\x03R\n" +
	"numDeleted2\xa0\x01\n" +
	"\x14DataIngestionService\x12C\n" +
	"\x06Ingest\x12\x1a.datasets.v1.IngestRequest\x1a\x1b.datasets.v1.IngestResponse\"\x00\x12C\n" +
	"\x06Delete\x12\x1a.datasets.v1.DeleteRequest\x1a\x1b.datasets.v1.DeleteResponse\"\x00B\xbe\x01\n" +
	"\x0fcom.datasets.v1B\x12DataIngestionProtoP\x01Z@github.com/tilebox/tilebox-go/protogen/go/datasets/v1;datasetsv1\xa2\x02\x03DXX\xaa\x02\vDatasets.V1\xca\x02\vDatasets\\V1\xe2\x02\x17Datasets\\V1\\GPBMetadata\xea\x02\fDatasets::V1\x92\x03\a\xd2>\x02\x10\x03\b\x02b\beditionsp\xe8\a"

var file_datasets_v1_data_ingestion_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_datasets_v1_data_ingestion_proto_goTypes = []any{
	(*IngestDatapointsRequest)(nil), // 0: datasets.v1.IngestDatapointsRequest
	(*IngestRequest)(nil),           // 1: datasets.v1.IngestRequest
	(*IngestResponse)(nil),          // 2: datasets.v1.IngestResponse
	(*DeleteRequest)(nil),           // 3: datasets.v1.DeleteRequest
	(*DeleteResponse)(nil),          // 4: datasets.v1.DeleteResponse
	(*ID)(nil),                      // 5: datasets.v1.ID
	(*Datapoints)(nil),              // 6: datasets.v1.Datapoints
}
var file_datasets_v1_data_ingestion_proto_depIdxs = []int32{
	5, // 0: datasets.v1.IngestDatapointsRequest.collection_id:type_name -> datasets.v1.ID
	6, // 1: datasets.v1.IngestDatapointsRequest.datapoints:type_name -> datasets.v1.Datapoints
	5, // 2: datasets.v1.IngestRequest.collection_id:type_name -> datasets.v1.ID
	5, // 3: datasets.v1.IngestResponse.datapoint_ids:type_name -> datasets.v1.ID
	5, // 4: datasets.v1.DeleteRequest.collection_id:type_name -> datasets.v1.ID
	5, // 5: datasets.v1.DeleteRequest.datapoint_ids:type_name -> datasets.v1.ID
	1, // 6: datasets.v1.DataIngestionService.Ingest:input_type -> datasets.v1.IngestRequest
	3, // 7: datasets.v1.DataIngestionService.Delete:input_type -> datasets.v1.DeleteRequest
	2, // 8: datasets.v1.DataIngestionService.Ingest:output_type -> datasets.v1.IngestResponse
	4, // 9: datasets.v1.DataIngestionService.Delete:output_type -> datasets.v1.DeleteResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_datasets_v1_data_ingestion_proto_init() }
func file_datasets_v1_data_ingestion_proto_init() {
	if File_datasets_v1_data_ingestion_proto != nil {
		return
	}
	file_datasets_v1_core_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datasets_v1_data_ingestion_proto_rawDesc), len(file_datasets_v1_data_ingestion_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datasets_v1_data_ingestion_proto_goTypes,
		DependencyIndexes: file_datasets_v1_data_ingestion_proto_depIdxs,
		MessageInfos:      file_datasets_v1_data_ingestion_proto_msgTypes,
	}.Build()
	File_datasets_v1_data_ingestion_proto = out.File
	file_datasets_v1_data_ingestion_proto_goTypes = nil
	file_datasets_v1_data_ingestion_proto_depIdxs = nil
}
