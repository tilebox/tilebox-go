// This file contains some well-known types that are available to use for all dataset protobuf messages.
// They are specially handled in our client libraries and converted to the corresponding representations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: datasets/v1/well_known_types.proto

package datasetsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Satellite flight direction
type FlightDirection int32

const (
	FlightDirection_FLIGHT_DIRECTION_UNSPECIFIED FlightDirection = 0
	FlightDirection_FLIGHT_DIRECTION_ASCENDING   FlightDirection = 1
	FlightDirection_FLIGHT_DIRECTION_DESCENDING  FlightDirection = 2
)

// Enum value maps for FlightDirection.
var (
	FlightDirection_name = map[int32]string{
		0: "FLIGHT_DIRECTION_UNSPECIFIED",
		1: "FLIGHT_DIRECTION_ASCENDING",
		2: "FLIGHT_DIRECTION_DESCENDING",
	}
	FlightDirection_value = map[string]int32{
		"FLIGHT_DIRECTION_UNSPECIFIED": 0,
		"FLIGHT_DIRECTION_ASCENDING":   1,
		"FLIGHT_DIRECTION_DESCENDING":  2,
	}
)

func (x FlightDirection) Enum() *FlightDirection {
	p := new(FlightDirection)
	*p = x
	return p
}

func (x FlightDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[0].Descriptor()
}

func (FlightDirection) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[0]
}

func (x FlightDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightDirection.Descriptor instead.
func (FlightDirection) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{0}
}

// Observation direction
type ObservationDirection int32

const (
	ObservationDirection_OBSERVATION_DIRECTION_UNSPECIFIED ObservationDirection = 0
	ObservationDirection_OBSERVATION_DIRECTION_LEFT        ObservationDirection = 1
	ObservationDirection_OBSERVATION_DIRECTION_RIGHT       ObservationDirection = 2
)

// Enum value maps for ObservationDirection.
var (
	ObservationDirection_name = map[int32]string{
		0: "OBSERVATION_DIRECTION_UNSPECIFIED",
		1: "OBSERVATION_DIRECTION_LEFT",
		2: "OBSERVATION_DIRECTION_RIGHT",
	}
	ObservationDirection_value = map[string]int32{
		"OBSERVATION_DIRECTION_UNSPECIFIED": 0,
		"OBSERVATION_DIRECTION_LEFT":        1,
		"OBSERVATION_DIRECTION_RIGHT":       2,
	}
)

func (x ObservationDirection) Enum() *ObservationDirection {
	p := new(ObservationDirection)
	*p = x
	return p
}

func (x ObservationDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[1].Descriptor()
}

func (ObservationDirection) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[1]
}

func (x ObservationDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationDirection.Descriptor instead.
func (ObservationDirection) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{1}
}

// The open data provider.
type OpendataProvider int32

const (
	OpendataProvider_OPENDATA_PROVIDER_UNSPECIFIED          OpendataProvider = 0
	OpendataProvider_OPENDATA_PROVIDER_ASF                  OpendataProvider = 1 // Alaska Satellite Facility
	OpendataProvider_OPENDATA_PROVIDER_COPERNICUS_DATASPACE OpendataProvider = 2 // Copernicus Dataspace
	OpendataProvider_OPENDATA_PROVIDER_UMBRA                OpendataProvider = 3 // Umbra Space
)

// Enum value maps for OpendataProvider.
var (
	OpendataProvider_name = map[int32]string{
		0: "OPENDATA_PROVIDER_UNSPECIFIED",
		1: "OPENDATA_PROVIDER_ASF",
		2: "OPENDATA_PROVIDER_COPERNICUS_DATASPACE",
		3: "OPENDATA_PROVIDER_UMBRA",
	}
	OpendataProvider_value = map[string]int32{
		"OPENDATA_PROVIDER_UNSPECIFIED":          0,
		"OPENDATA_PROVIDER_ASF":                  1,
		"OPENDATA_PROVIDER_COPERNICUS_DATASPACE": 2,
		"OPENDATA_PROVIDER_UMBRA":                3,
	}
)

func (x OpendataProvider) Enum() *OpendataProvider {
	p := new(OpendataProvider)
	*p = x
	return p
}

func (x OpendataProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpendataProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[2].Descriptor()
}

func (OpendataProvider) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[2]
}

func (x OpendataProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpendataProvider.Descriptor instead.
func (OpendataProvider) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{2}
}

// https://www.earthdata.nasa.gov/engage/open-data-services-and-software/data-information-policy/data-levels
type ProcessingLevel int32

const (
	ProcessingLevel_PROCESSING_LEVEL_UNSPECIFIED    ProcessingLevel = 0
	ProcessingLevel_PROCESSING_LEVEL_L0             ProcessingLevel = 12 // Raw data
	ProcessingLevel_PROCESSING_LEVEL_L1             ProcessingLevel = 10
	ProcessingLevel_PROCESSING_LEVEL_L1A            ProcessingLevel = 1
	ProcessingLevel_PROCESSING_LEVEL_L1B            ProcessingLevel = 2
	ProcessingLevel_PROCESSING_LEVEL_L1C            ProcessingLevel = 3
	ProcessingLevel_PROCESSING_LEVEL_L2             ProcessingLevel = 4
	ProcessingLevel_PROCESSING_LEVEL_L2A            ProcessingLevel = 5
	ProcessingLevel_PROCESSING_LEVEL_L2B            ProcessingLevel = 6
	ProcessingLevel_PROCESSING_LEVEL_L3             ProcessingLevel = 7
	ProcessingLevel_PROCESSING_LEVEL_L3A            ProcessingLevel = 8
	ProcessingLevel_PROCESSING_LEVEL_L4             ProcessingLevel = 9
	ProcessingLevel_PROCESSING_LEVEL_NOT_APPLICABLE ProcessingLevel = 11
)

// Enum value maps for ProcessingLevel.
var (
	ProcessingLevel_name = map[int32]string{
		0:  "PROCESSING_LEVEL_UNSPECIFIED",
		12: "PROCESSING_LEVEL_L0",
		10: "PROCESSING_LEVEL_L1",
		1:  "PROCESSING_LEVEL_L1A",
		2:  "PROCESSING_LEVEL_L1B",
		3:  "PROCESSING_LEVEL_L1C",
		4:  "PROCESSING_LEVEL_L2",
		5:  "PROCESSING_LEVEL_L2A",
		6:  "PROCESSING_LEVEL_L2B",
		7:  "PROCESSING_LEVEL_L3",
		8:  "PROCESSING_LEVEL_L3A",
		9:  "PROCESSING_LEVEL_L4",
		11: "PROCESSING_LEVEL_NOT_APPLICABLE",
	}
	ProcessingLevel_value = map[string]int32{
		"PROCESSING_LEVEL_UNSPECIFIED":    0,
		"PROCESSING_LEVEL_L0":             12,
		"PROCESSING_LEVEL_L1":             10,
		"PROCESSING_LEVEL_L1A":            1,
		"PROCESSING_LEVEL_L1B":            2,
		"PROCESSING_LEVEL_L1C":            3,
		"PROCESSING_LEVEL_L2":             4,
		"PROCESSING_LEVEL_L2A":            5,
		"PROCESSING_LEVEL_L2B":            6,
		"PROCESSING_LEVEL_L3":             7,
		"PROCESSING_LEVEL_L3A":            8,
		"PROCESSING_LEVEL_L4":             9,
		"PROCESSING_LEVEL_NOT_APPLICABLE": 11,
	}
)

func (x ProcessingLevel) Enum() *ProcessingLevel {
	p := new(ProcessingLevel)
	*p = x
	return p
}

func (x ProcessingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[3].Descriptor()
}

func (ProcessingLevel) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[3]
}

func (x ProcessingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessingLevel.Descriptor instead.
func (ProcessingLevel) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{3}
}

// Polarization of the radar signal.
type Polarization int32

const (
	// Horizontal transmit, Horizontal receive
	Polarization_POLARIZATION_UNSPECIFIED Polarization = 0
	Polarization_POLARIZATION_HH          Polarization = 1
	Polarization_POLARIZATION_HV          Polarization = 2  // Horizontal transmit, Vertical receive
	Polarization_POLARIZATION_VH          Polarization = 3  // Vertical transmit, Horizontal receive
	Polarization_POLARIZATION_VV          Polarization = 4  // Vertical transmit, Vertical receive
	Polarization_POLARIZATION_DUAL_HH     Polarization = 5  // HH+HH
	Polarization_POLARIZATION_DUAL_HV     Polarization = 6  // HV+HV
	Polarization_POLARIZATION_DUAL_VH     Polarization = 7  // VH+VH
	Polarization_POLARIZATION_DUAL_VV     Polarization = 8  // VV+VV
	Polarization_POLARIZATION_HH_HV       Polarization = 9  // HH+HV
	Polarization_POLARIZATION_VV_VH       Polarization = 10 // VV+VH
)

// Enum value maps for Polarization.
var (
	Polarization_name = map[int32]string{
		0:  "POLARIZATION_UNSPECIFIED",
		1:  "POLARIZATION_HH",
		2:  "POLARIZATION_HV",
		3:  "POLARIZATION_VH",
		4:  "POLARIZATION_VV",
		5:  "POLARIZATION_DUAL_HH",
		6:  "POLARIZATION_DUAL_HV",
		7:  "POLARIZATION_DUAL_VH",
		8:  "POLARIZATION_DUAL_VV",
		9:  "POLARIZATION_HH_HV",
		10: "POLARIZATION_VV_VH",
	}
	Polarization_value = map[string]int32{
		"POLARIZATION_UNSPECIFIED": 0,
		"POLARIZATION_HH":          1,
		"POLARIZATION_HV":          2,
		"POLARIZATION_VH":          3,
		"POLARIZATION_VV":          4,
		"POLARIZATION_DUAL_HH":     5,
		"POLARIZATION_DUAL_HV":     6,
		"POLARIZATION_DUAL_VH":     7,
		"POLARIZATION_DUAL_VV":     8,
		"POLARIZATION_HH_HV":       9,
		"POLARIZATION_VV_VH":       10,
	}
)

func (x Polarization) Enum() *Polarization {
	p := new(Polarization)
	*p = x
	return p
}

func (x Polarization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Polarization) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[4].Descriptor()
}

func (Polarization) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[4]
}

func (x Polarization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Polarization.Descriptor instead.
func (Polarization) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{4}
}

// Sentinel-1 SAR (beam mode):
// https://sentinels.copernicus.eu/web/sentinel/technical-guides/sentinel-1-sar/sar-instrument/acquisition-modes
type AcquisitionMode int32

const (
	AcquisitionMode_ACQUISITION_MODE_UNSPECIFIED AcquisitionMode = 0 // In case it is not set for a dataset
	// used by Sentinel-1 SAR:
	AcquisitionMode_ACQUISITION_MODE_SM AcquisitionMode = 1 // Strip Map
	AcquisitionMode_ACQUISITION_MODE_EW AcquisitionMode = 2 // Extra Wide Swath
	AcquisitionMode_ACQUISITION_MODE_IW AcquisitionMode = 3 // Interferometric Wide Swath
	AcquisitionMode_ACQUISITION_MODE_WV AcquisitionMode = 4 // Wave
	// used by Umbra SAR:
	AcquisitionMode_ACQUISITION_MODE_SPOTLIGHT AcquisitionMode = 10 // Spotlight
	// used by Sentinel 2 MSI:
	AcquisitionMode_ACQUISITION_MODE_NOBS AcquisitionMode = 20 // Nominal Observation
	AcquisitionMode_ACQUISITION_MODE_EOBS AcquisitionMode = 21 // Extended Observation
	AcquisitionMode_ACQUISITION_MODE_DASC AcquisitionMode = 22 // Dark Signal Calibration
	AcquisitionMode_ACQUISITION_MODE_ABSR AcquisitionMode = 23 // Absolute Radiometry Calibration
	AcquisitionMode_ACQUISITION_MODE_VIC  AcquisitionMode = 24 // Vicarious Calibration
	AcquisitionMode_ACQUISITION_MODE_RAW  AcquisitionMode = 25 // Raw Measurement
	AcquisitionMode_ACQUISITION_MODE_TST  AcquisitionMode = 26 // Test Mode
)

// Enum value maps for AcquisitionMode.
var (
	AcquisitionMode_name = map[int32]string{
		0:  "ACQUISITION_MODE_UNSPECIFIED",
		1:  "ACQUISITION_MODE_SM",
		2:  "ACQUISITION_MODE_EW",
		3:  "ACQUISITION_MODE_IW",
		4:  "ACQUISITION_MODE_WV",
		10: "ACQUISITION_MODE_SPOTLIGHT",
		20: "ACQUISITION_MODE_NOBS",
		21: "ACQUISITION_MODE_EOBS",
		22: "ACQUISITION_MODE_DASC",
		23: "ACQUISITION_MODE_ABSR",
		24: "ACQUISITION_MODE_VIC",
		25: "ACQUISITION_MODE_RAW",
		26: "ACQUISITION_MODE_TST",
	}
	AcquisitionMode_value = map[string]int32{
		"ACQUISITION_MODE_UNSPECIFIED": 0,
		"ACQUISITION_MODE_SM":          1,
		"ACQUISITION_MODE_EW":          2,
		"ACQUISITION_MODE_IW":          3,
		"ACQUISITION_MODE_WV":          4,
		"ACQUISITION_MODE_SPOTLIGHT":   10,
		"ACQUISITION_MODE_NOBS":        20,
		"ACQUISITION_MODE_EOBS":        21,
		"ACQUISITION_MODE_DASC":        22,
		"ACQUISITION_MODE_ABSR":        23,
		"ACQUISITION_MODE_VIC":         24,
		"ACQUISITION_MODE_RAW":         25,
		"ACQUISITION_MODE_TST":         26,
	}
)

func (x AcquisitionMode) Enum() *AcquisitionMode {
	p := new(AcquisitionMode)
	*p = x
	return p
}

func (x AcquisitionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquisitionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[5].Descriptor()
}

func (AcquisitionMode) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[5]
}

func (x AcquisitionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquisitionMode.Descriptor instead.
func (AcquisitionMode) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{5}
}

// Type of geometry
type GeobufData_Geometry_Type int32

const (
	GeobufData_Geometry_TYPE_EMPTY              GeobufData_Geometry_Type = 0 // protolint:disable:this ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
	GeobufData_Geometry_TYPE_POINT              GeobufData_Geometry_Type = 1
	GeobufData_Geometry_TYPE_MULTIPOINT         GeobufData_Geometry_Type = 2
	GeobufData_Geometry_TYPE_LINESTRING         GeobufData_Geometry_Type = 3
	GeobufData_Geometry_TYPE_MULTILINESTRING    GeobufData_Geometry_Type = 4
	GeobufData_Geometry_TYPE_POLYGON            GeobufData_Geometry_Type = 5
	GeobufData_Geometry_TYPE_MULTIPOLYGON       GeobufData_Geometry_Type = 6
	GeobufData_Geometry_TYPE_GEOMETRYCOLLECTION GeobufData_Geometry_Type = 7
)

// Enum value maps for GeobufData_Geometry_Type.
var (
	GeobufData_Geometry_Type_name = map[int32]string{
		0: "TYPE_EMPTY",
		1: "TYPE_POINT",
		2: "TYPE_MULTIPOINT",
		3: "TYPE_LINESTRING",
		4: "TYPE_MULTILINESTRING",
		5: "TYPE_POLYGON",
		6: "TYPE_MULTIPOLYGON",
		7: "TYPE_GEOMETRYCOLLECTION",
	}
	GeobufData_Geometry_Type_value = map[string]int32{
		"TYPE_EMPTY":              0,
		"TYPE_POINT":              1,
		"TYPE_MULTIPOINT":         2,
		"TYPE_LINESTRING":         3,
		"TYPE_MULTILINESTRING":    4,
		"TYPE_POLYGON":            5,
		"TYPE_MULTIPOLYGON":       6,
		"TYPE_GEOMETRYCOLLECTION": 7,
	}
)

func (x GeobufData_Geometry_Type) Enum() *GeobufData_Geometry_Type {
	p := new(GeobufData_Geometry_Type)
	*p = x
	return p
}

func (x GeobufData_Geometry_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeobufData_Geometry_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_v1_well_known_types_proto_enumTypes[6].Descriptor()
}

func (GeobufData_Geometry_Type) Type() protoreflect.EnumType {
	return &file_datasets_v1_well_known_types_proto_enumTypes[6]
}

func (x GeobufData_Geometry_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeobufData_Geometry_Type.Descriptor instead.
func (GeobufData_Geometry_Type) EnumDescriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{6, 1, 0}
}

// Bytes field (in message)
type UUID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UUID) Reset() {
	*x = UUID{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// A 3D vector
type Vec3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float64                `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vec3) Reset() {
	*x = Vec3{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vec3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3) ProtoMessage() {}

func (x *Vec3) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3.ProtoReflect.Descriptor instead.
func (*Vec3) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{1}
}

func (x *Vec3) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vec3) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vec3) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// A quaternion
type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Q1            float64                `protobuf:"fixed64,1,opt,name=q1,proto3" json:"q1,omitempty"`
	Q2            float64                `protobuf:"fixed64,2,opt,name=q2,proto3" json:"q2,omitempty"`
	Q3            float64                `protobuf:"fixed64,3,opt,name=q3,proto3" json:"q3,omitempty"`
	Q4            float64                `protobuf:"fixed64,4,opt,name=q4,proto3" json:"q4,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{2}
}

func (x *Quaternion) GetQ1() float64 {
	if x != nil {
		return x.Q1
	}
	return 0
}

func (x *Quaternion) GetQ2() float64 {
	if x != nil {
		return x.Q2
	}
	return 0
}

func (x *Quaternion) GetQ3() float64 {
	if x != nil {
		return x.Q3
	}
	return 0
}

func (x *Quaternion) GetQ4() float64 {
	if x != nil {
		return x.Q4
	}
	return 0
}

// LatLon is a pair of latitude and longitude values representing a point on the Earth's surface
type LatLon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatLon) Reset() {
	*x = LatLon{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatLon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLon) ProtoMessage() {}

func (x *LatLon) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLon.ProtoReflect.Descriptor instead.
func (*LatLon) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{3}
}

func (x *LatLon) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatLon) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// LatLonAlt is a pair of latitude, longitude and altitude values representing a point on the Earth's surface
// While we could also use a Vec3 for this, we use a separate message to make the intent of the data clearer.
type LatLonAlt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude      float64                `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatLonAlt) Reset() {
	*x = LatLonAlt{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatLonAlt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLonAlt) ProtoMessage() {}

func (x *LatLonAlt) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLonAlt.ProtoReflect.Descriptor instead.
func (*LatLonAlt) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{4}
}

func (x *LatLonAlt) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatLonAlt) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LatLonAlt) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

// Geometry is of a particular type, e.g. POINT, POLYGON, MULTIPOLYGON, encoded in a binary format
type Geometry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wkb           []byte                 `protobuf:"bytes,1,opt,name=wkb,proto3" json:"wkb,omitempty"` // well-known binary representation of a geometry
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Geometry) Reset() {
	*x = Geometry{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Geometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geometry) ProtoMessage() {}

func (x *Geometry) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geometry.ProtoReflect.Descriptor instead.
func (*Geometry) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{5}
}

func (x *Geometry) GetWkb() []byte {
	if x != nil {
		return x.Wkb
	}
	return nil
}

// GeobufData is a protobuf schema for encoding GeoJSON-like data in a more compact binary format.
// It's a super type for one of FeatureCollection, Feature, or Geometry.
// Taken from https://github.com/mscno/go-geobuf/blob/master/geobufpb/geobuf.proto
type GeobufData struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Keys       []string               `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`              // global arrays of unique keys
	Dimensions uint32                 `protobuf:"varint,2,opt,name=dimensions,proto3" json:"dimensions,omitempty"` // max coordinate dimensions, default 2
	Precision  uint32                 `protobuf:"varint,3,opt,name=precision,proto3" json:"precision,omitempty"`   // number of digits after decimal point for coordinates, default 6
	// Types that are valid to be assigned to DataType:
	//
	//	*GeobufData_FeatureCollection_
	//	*GeobufData_Feature_
	//	*GeobufData_Geometry_
	DataType      isGeobufData_DataType `protobuf_oneof:"data_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeobufData) Reset() {
	*x = GeobufData{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeobufData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeobufData) ProtoMessage() {}

func (x *GeobufData) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeobufData.ProtoReflect.Descriptor instead.
func (*GeobufData) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{6}
}

func (x *GeobufData) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GeobufData) GetDimensions() uint32 {
	if x != nil {
		return x.Dimensions
	}
	return 0
}

func (x *GeobufData) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *GeobufData) GetDataType() isGeobufData_DataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *GeobufData) GetFeatureCollection() *GeobufData_FeatureCollection {
	if x != nil {
		if x, ok := x.DataType.(*GeobufData_FeatureCollection_); ok {
			return x.FeatureCollection
		}
	}
	return nil
}

func (x *GeobufData) GetFeature() *GeobufData_Feature {
	if x != nil {
		if x, ok := x.DataType.(*GeobufData_Feature_); ok {
			return x.Feature
		}
	}
	return nil
}

func (x *GeobufData) GetGeometry() *GeobufData_Geometry {
	if x != nil {
		if x, ok := x.DataType.(*GeobufData_Geometry_); ok {
			return x.Geometry
		}
	}
	return nil
}

type isGeobufData_DataType interface {
	isGeobufData_DataType()
}

type GeobufData_FeatureCollection_ struct {
	FeatureCollection *GeobufData_FeatureCollection `protobuf:"bytes,4,opt,name=feature_collection,json=featureCollection,proto3,oneof"`
}

type GeobufData_Feature_ struct {
	Feature *GeobufData_Feature `protobuf:"bytes,5,opt,name=feature,proto3,oneof"`
}

type GeobufData_Geometry_ struct {
	Geometry *GeobufData_Geometry `protobuf:"bytes,6,opt,name=geometry,proto3,oneof"`
}

func (*GeobufData_FeatureCollection_) isGeobufData_DataType() {}

func (*GeobufData_Feature_) isGeobufData_DataType() {}

func (*GeobufData_Geometry_) isGeobufData_DataType() {}

// A feature object
type GeobufData_Feature struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Geometry *GeobufData_Geometry   `protobuf:"bytes,1,opt,name=geometry,proto3" json:"geometry,omitempty"`
	// Types that are valid to be assigned to IdType:
	//
	//	*GeobufData_Feature_Id
	//	*GeobufData_Feature_IntId
	IdType           isGeobufData_Feature_IdType `protobuf_oneof:"id_type"`
	Values           []*GeobufData_Value         `protobuf:"bytes,13,rep,name=values,proto3" json:"values,omitempty"`                                                     // unique values
	Properties       []uint32                    `protobuf:"varint,14,rep,packed,name=properties,proto3" json:"properties,omitempty"`                                     // pairs of key/value indexes
	CustomProperties []uint32                    `protobuf:"varint,15,rep,packed,name=custom_properties,json=customProperties,proto3" json:"custom_properties,omitempty"` // arbitrary properties
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GeobufData_Feature) Reset() {
	*x = GeobufData_Feature{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeobufData_Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeobufData_Feature) ProtoMessage() {}

func (x *GeobufData_Feature) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeobufData_Feature.ProtoReflect.Descriptor instead.
func (*GeobufData_Feature) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GeobufData_Feature) GetGeometry() *GeobufData_Geometry {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *GeobufData_Feature) GetIdType() isGeobufData_Feature_IdType {
	if x != nil {
		return x.IdType
	}
	return nil
}

func (x *GeobufData_Feature) GetId() string {
	if x != nil {
		if x, ok := x.IdType.(*GeobufData_Feature_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *GeobufData_Feature) GetIntId() int64 {
	if x != nil {
		if x, ok := x.IdType.(*GeobufData_Feature_IntId); ok {
			return x.IntId
		}
	}
	return 0
}

func (x *GeobufData_Feature) GetValues() []*GeobufData_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GeobufData_Feature) GetProperties() []uint32 {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GeobufData_Feature) GetCustomProperties() []uint32 {
	if x != nil {
		return x.CustomProperties
	}
	return nil
}

type isGeobufData_Feature_IdType interface {
	isGeobufData_Feature_IdType()
}

type GeobufData_Feature_Id struct {
	Id string `protobuf:"bytes,11,opt,name=id,proto3,oneof"`
}

type GeobufData_Feature_IntId struct {
	IntId int64 `protobuf:"zigzag64,12,opt,name=int_id,json=intId,proto3,oneof"`
}

func (*GeobufData_Feature_Id) isGeobufData_Feature_IdType() {}

func (*GeobufData_Feature_IntId) isGeobufData_Feature_IdType() {}

// A geometry object
type GeobufData_Geometry struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	Type             GeobufData_Geometry_Type `protobuf:"varint,1,opt,name=type,proto3,enum=datasets.v1.GeobufData_Geometry_Type" json:"type,omitempty"`
	Lengths          []uint32                 `protobuf:"varint,2,rep,packed,name=lengths,proto3" json:"lengths,omitempty"` // coordinate structure in lengths
	Coords           []int64                  `protobuf:"zigzag64,3,rep,packed,name=coords,proto3" json:"coords,omitempty"` // delta-encoded integer values
	Geometries       []*GeobufData_Geometry   `protobuf:"bytes,4,rep,name=geometries,proto3" json:"geometries,omitempty"`
	Values           []*GeobufData_Value      `protobuf:"bytes,13,rep,name=values,proto3" json:"values,omitempty"`
	CustomProperties []uint32                 `protobuf:"varint,15,rep,packed,name=custom_properties,json=customProperties,proto3" json:"custom_properties,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GeobufData_Geometry) Reset() {
	*x = GeobufData_Geometry{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeobufData_Geometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeobufData_Geometry) ProtoMessage() {}

func (x *GeobufData_Geometry) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeobufData_Geometry.ProtoReflect.Descriptor instead.
func (*GeobufData_Geometry) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{6, 1}
}

func (x *GeobufData_Geometry) GetType() GeobufData_Geometry_Type {
	if x != nil {
		return x.Type
	}
	return GeobufData_Geometry_TYPE_EMPTY
}

func (x *GeobufData_Geometry) GetLengths() []uint32 {
	if x != nil {
		return x.Lengths
	}
	return nil
}

func (x *GeobufData_Geometry) GetCoords() []int64 {
	if x != nil {
		return x.Coords
	}
	return nil
}

func (x *GeobufData_Geometry) GetGeometries() []*GeobufData_Geometry {
	if x != nil {
		return x.Geometries
	}
	return nil
}

func (x *GeobufData_Geometry) GetValues() []*GeobufData_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GeobufData_Geometry) GetCustomProperties() []uint32 {
	if x != nil {
		return x.CustomProperties
	}
	return nil
}

// A collection of features
type GeobufData_FeatureCollection struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Features         []*GeobufData_Feature  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	Values           []*GeobufData_Value    `protobuf:"bytes,13,rep,name=values,proto3" json:"values,omitempty"`
	CustomProperties []uint32               `protobuf:"varint,15,rep,packed,name=custom_properties,json=customProperties,proto3" json:"custom_properties,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GeobufData_FeatureCollection) Reset() {
	*x = GeobufData_FeatureCollection{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeobufData_FeatureCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeobufData_FeatureCollection) ProtoMessage() {}

func (x *GeobufData_FeatureCollection) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeobufData_FeatureCollection.ProtoReflect.Descriptor instead.
func (*GeobufData_FeatureCollection) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{6, 2}
}

func (x *GeobufData_FeatureCollection) GetFeatures() []*GeobufData_Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GeobufData_FeatureCollection) GetValues() []*GeobufData_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GeobufData_FeatureCollection) GetCustomProperties() []uint32 {
	if x != nil {
		return x.CustomProperties
	}
	return nil
}

// The value of a key
type GeobufData_Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ValueType:
	//
	//	*GeobufData_Value_StringValue
	//	*GeobufData_Value_DoubleValue
	//	*GeobufData_Value_PosIntValue
	//	*GeobufData_Value_NegIntValue
	//	*GeobufData_Value_BoolValue
	//	*GeobufData_Value_JsonValue
	ValueType     isGeobufData_Value_ValueType `protobuf_oneof:"value_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeobufData_Value) Reset() {
	*x = GeobufData_Value{}
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeobufData_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeobufData_Value) ProtoMessage() {}

func (x *GeobufData_Value) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_v1_well_known_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeobufData_Value.ProtoReflect.Descriptor instead.
func (*GeobufData_Value) Descriptor() ([]byte, []int) {
	return file_datasets_v1_well_known_types_proto_rawDescGZIP(), []int{6, 3}
}

func (x *GeobufData_Value) GetValueType() isGeobufData_Value_ValueType {
	if x != nil {
		return x.ValueType
	}
	return nil
}

func (x *GeobufData_Value) GetStringValue() string {
	if x != nil {
		if x, ok := x.ValueType.(*GeobufData_Value_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *GeobufData_Value) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.ValueType.(*GeobufData_Value_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *GeobufData_Value) GetPosIntValue() uint64 {
	if x != nil {
		if x, ok := x.ValueType.(*GeobufData_Value_PosIntValue); ok {
			return x.PosIntValue
		}
	}
	return 0
}

func (x *GeobufData_Value) GetNegIntValue() uint64 {
	if x != nil {
		if x, ok := x.ValueType.(*GeobufData_Value_NegIntValue); ok {
			return x.NegIntValue
		}
	}
	return 0
}

func (x *GeobufData_Value) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.ValueType.(*GeobufData_Value_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *GeobufData_Value) GetJsonValue() []byte {
	if x != nil {
		if x, ok := x.ValueType.(*GeobufData_Value_JsonValue); ok {
			return x.JsonValue
		}
	}
	return nil
}

type isGeobufData_Value_ValueType interface {
	isGeobufData_Value_ValueType()
}

type GeobufData_Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type GeobufData_Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type GeobufData_Value_PosIntValue struct {
	PosIntValue uint64 `protobuf:"varint,3,opt,name=pos_int_value,json=posIntValue,proto3,oneof"`
}

type GeobufData_Value_NegIntValue struct {
	NegIntValue uint64 `protobuf:"varint,4,opt,name=neg_int_value,json=negIntValue,proto3,oneof"`
}

type GeobufData_Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type GeobufData_Value_JsonValue struct {
	JsonValue []byte `protobuf:"bytes,6,opt,name=json_value,json=jsonValue,proto3,oneof"`
}

func (*GeobufData_Value_StringValue) isGeobufData_Value_ValueType() {}

func (*GeobufData_Value_DoubleValue) isGeobufData_Value_ValueType() {}

func (*GeobufData_Value_PosIntValue) isGeobufData_Value_ValueType() {}

func (*GeobufData_Value_NegIntValue) isGeobufData_Value_ValueType() {}

func (*GeobufData_Value_BoolValue) isGeobufData_Value_ValueType() {}

func (*GeobufData_Value_JsonValue) isGeobufData_Value_ValueType() {}

var File_datasets_v1_well_known_types_proto protoreflect.FileDescriptor

var file_datasets_v1_well_known_types_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65,
	0x6c, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x30,
	0x0a, 0x04, 0x56, 0x65, 0x63, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a,
	0x22, 0x4c, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x71, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x71, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x71, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x33, 0x12, 0x0e,
	0x0a, 0x02, 0x71, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x71, 0x34, 0x22, 0x42,
	0x0a, 0x06, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0x61, 0x0a, 0x09, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x41, 0x6c, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x1c, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x6b, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x77, 0x6b, 0x62, 0x22, 0xc2, 0x0b, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x81, 0x02,
	0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x62, 0x75, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xd0, 0x03, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x62, 0x75,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x12, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x62,
	0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xb0, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4f,
	0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x1a, 0xb4, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x62, 0x75,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x49, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b,
	0x6e, 0x65, 0x67, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x74, 0x0a, 0x0f, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x7e,
	0x0a, 0x14, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x2a, 0x99,
	0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x46, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x50, 0x45, 0x52, 0x4e, 0x49, 0x43, 0x55,
	0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x55, 0x4d, 0x42, 0x52, 0x41, 0x10, 0x03, 0x2a, 0xf1, 0x02, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x30, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x31,
	0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x31, 0x41, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4c, 0x31, 0x42, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x31, 0x43, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x32, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x32,
	0x41, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x32, 0x42, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4c, 0x33, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x33, 0x41, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x34, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x2a, 0x98,
	0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x48,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x56, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x4c, 0x41, 0x52,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x48, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x56, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x48, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x41, 0x4c,
	0x5f, 0x48, 0x56, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x48, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x56, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c,
	0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x48, 0x5f, 0x48, 0x56, 0x10,
	0x09, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x56, 0x5f, 0x56, 0x48, 0x10, 0x0a, 0x2a, 0xf1, 0x02, 0x0a, 0x0f, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x51, 0x55,
	0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x57, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x57, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43,
	0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57,
	0x56, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x42, 0x53, 0x10, 0x14, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x4f, 0x42, 0x53, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x51,
	0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41,
	0x53, 0x43, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x52, 0x10, 0x17, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x43, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x51,
	0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41,
	0x57, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x53, 0x54, 0x10, 0x1a, 0x42, 0xb5, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x13, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x6f, 0x78, 0x2f, 0x74, 0x69, 0x6c,
	0x65, 0x62, 0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58,
	0xaa, 0x02, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_datasets_v1_well_known_types_proto_rawDescOnce sync.Once
	file_datasets_v1_well_known_types_proto_rawDescData []byte
)

func file_datasets_v1_well_known_types_proto_rawDescGZIP() []byte {
	file_datasets_v1_well_known_types_proto_rawDescOnce.Do(func() {
		file_datasets_v1_well_known_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datasets_v1_well_known_types_proto_rawDesc), len(file_datasets_v1_well_known_types_proto_rawDesc)))
	})
	return file_datasets_v1_well_known_types_proto_rawDescData
}

var file_datasets_v1_well_known_types_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_datasets_v1_well_known_types_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_datasets_v1_well_known_types_proto_goTypes = []any{
	(FlightDirection)(0),                 // 0: datasets.v1.FlightDirection
	(ObservationDirection)(0),            // 1: datasets.v1.ObservationDirection
	(OpendataProvider)(0),                // 2: datasets.v1.OpendataProvider
	(ProcessingLevel)(0),                 // 3: datasets.v1.ProcessingLevel
	(Polarization)(0),                    // 4: datasets.v1.Polarization
	(AcquisitionMode)(0),                 // 5: datasets.v1.AcquisitionMode
	(GeobufData_Geometry_Type)(0),        // 6: datasets.v1.GeobufData.Geometry.Type
	(*UUID)(nil),                         // 7: datasets.v1.UUID
	(*Vec3)(nil),                         // 8: datasets.v1.Vec3
	(*Quaternion)(nil),                   // 9: datasets.v1.Quaternion
	(*LatLon)(nil),                       // 10: datasets.v1.LatLon
	(*LatLonAlt)(nil),                    // 11: datasets.v1.LatLonAlt
	(*Geometry)(nil),                     // 12: datasets.v1.Geometry
	(*GeobufData)(nil),                   // 13: datasets.v1.GeobufData
	(*GeobufData_Feature)(nil),           // 14: datasets.v1.GeobufData.Feature
	(*GeobufData_Geometry)(nil),          // 15: datasets.v1.GeobufData.Geometry
	(*GeobufData_FeatureCollection)(nil), // 16: datasets.v1.GeobufData.FeatureCollection
	(*GeobufData_Value)(nil),             // 17: datasets.v1.GeobufData.Value
}
var file_datasets_v1_well_known_types_proto_depIdxs = []int32{
	16, // 0: datasets.v1.GeobufData.feature_collection:type_name -> datasets.v1.GeobufData.FeatureCollection
	14, // 1: datasets.v1.GeobufData.feature:type_name -> datasets.v1.GeobufData.Feature
	15, // 2: datasets.v1.GeobufData.geometry:type_name -> datasets.v1.GeobufData.Geometry
	15, // 3: datasets.v1.GeobufData.Feature.geometry:type_name -> datasets.v1.GeobufData.Geometry
	17, // 4: datasets.v1.GeobufData.Feature.values:type_name -> datasets.v1.GeobufData.Value
	6,  // 5: datasets.v1.GeobufData.Geometry.type:type_name -> datasets.v1.GeobufData.Geometry.Type
	15, // 6: datasets.v1.GeobufData.Geometry.geometries:type_name -> datasets.v1.GeobufData.Geometry
	17, // 7: datasets.v1.GeobufData.Geometry.values:type_name -> datasets.v1.GeobufData.Value
	14, // 8: datasets.v1.GeobufData.FeatureCollection.features:type_name -> datasets.v1.GeobufData.Feature
	17, // 9: datasets.v1.GeobufData.FeatureCollection.values:type_name -> datasets.v1.GeobufData.Value
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_datasets_v1_well_known_types_proto_init() }
func file_datasets_v1_well_known_types_proto_init() {
	if File_datasets_v1_well_known_types_proto != nil {
		return
	}
	file_datasets_v1_well_known_types_proto_msgTypes[6].OneofWrappers = []any{
		(*GeobufData_FeatureCollection_)(nil),
		(*GeobufData_Feature_)(nil),
		(*GeobufData_Geometry_)(nil),
	}
	file_datasets_v1_well_known_types_proto_msgTypes[7].OneofWrappers = []any{
		(*GeobufData_Feature_Id)(nil),
		(*GeobufData_Feature_IntId)(nil),
	}
	file_datasets_v1_well_known_types_proto_msgTypes[10].OneofWrappers = []any{
		(*GeobufData_Value_StringValue)(nil),
		(*GeobufData_Value_DoubleValue)(nil),
		(*GeobufData_Value_PosIntValue)(nil),
		(*GeobufData_Value_NegIntValue)(nil),
		(*GeobufData_Value_BoolValue)(nil),
		(*GeobufData_Value_JsonValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datasets_v1_well_known_types_proto_rawDesc), len(file_datasets_v1_well_known_types_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datasets_v1_well_known_types_proto_goTypes,
		DependencyIndexes: file_datasets_v1_well_known_types_proto_depIdxs,
		EnumInfos:         file_datasets_v1_well_known_types_proto_enumTypes,
		MessageInfos:      file_datasets_v1_well_known_types_proto_msgTypes,
	}.Build()
	File_datasets_v1_well_known_types_proto = out.File
	file_datasets_v1_well_known_types_proto_goTypes = nil
	file_datasets_v1_well_known_types_proto_depIdxs = nil
}
