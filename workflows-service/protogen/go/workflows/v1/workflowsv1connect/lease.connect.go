// The internal lease service.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflows/v1/lease.proto

package workflowsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/workflows-service/protogen/go/workflows/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LeaseServiceName is the fully-qualified name of the LeaseService service.
	LeaseServiceName = "workflows.v1.LeaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LeaseServiceTransferTaskLeaseProcedure is the fully-qualified name of the LeaseService's
	// TransferTaskLease RPC.
	LeaseServiceTransferTaskLeaseProcedure = "/workflows.v1.LeaseService/TransferTaskLease"
	// LeaseServiceVacuumLeasesProcedure is the fully-qualified name of the LeaseService's VacuumLeases
	// RPC.
	LeaseServiceVacuumLeasesProcedure = "/workflows.v1.LeaseService/VacuumLeases"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	leaseServiceServiceDescriptor                 = v1.File_workflows_v1_lease_proto.Services().ByName("LeaseService")
	leaseServiceTransferTaskLeaseMethodDescriptor = leaseServiceServiceDescriptor.Methods().ByName("TransferTaskLease")
	leaseServiceVacuumLeasesMethodDescriptor      = leaseServiceServiceDescriptor.Methods().ByName("VacuumLeases")
)

// LeaseServiceClient is a client for the workflows.v1.LeaseService service.
type LeaseServiceClient interface {
	// TransferTaskLease is called by the lease service on shutdown, to transfer leases to another task server.
	TransferTaskLease(context.Context, *connect.Request[v1.TransferTaskLeaseRequest]) (*connect.Response[v1.TransferTaskLeaseResponse], error)
	// VacuumLeases is called by a cron job to clean up expired leases.
	// It handles those tasks where a task runner and an instance of the worklows-api both go down without a proper shutdown.
	VacuumLeases(context.Context, *connect.Request[v1.VacuumLeasesRequest]) (*connect.Response[v1.VacuumLeasesResponse], error)
}

// NewLeaseServiceClient constructs a client for the workflows.v1.LeaseService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLeaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LeaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &leaseServiceClient{
		transferTaskLease: connect.NewClient[v1.TransferTaskLeaseRequest, v1.TransferTaskLeaseResponse](
			httpClient,
			baseURL+LeaseServiceTransferTaskLeaseProcedure,
			connect.WithSchema(leaseServiceTransferTaskLeaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		vacuumLeases: connect.NewClient[v1.VacuumLeasesRequest, v1.VacuumLeasesResponse](
			httpClient,
			baseURL+LeaseServiceVacuumLeasesProcedure,
			connect.WithSchema(leaseServiceVacuumLeasesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// leaseServiceClient implements LeaseServiceClient.
type leaseServiceClient struct {
	transferTaskLease *connect.Client[v1.TransferTaskLeaseRequest, v1.TransferTaskLeaseResponse]
	vacuumLeases      *connect.Client[v1.VacuumLeasesRequest, v1.VacuumLeasesResponse]
}

// TransferTaskLease calls workflows.v1.LeaseService.TransferTaskLease.
func (c *leaseServiceClient) TransferTaskLease(ctx context.Context, req *connect.Request[v1.TransferTaskLeaseRequest]) (*connect.Response[v1.TransferTaskLeaseResponse], error) {
	return c.transferTaskLease.CallUnary(ctx, req)
}

// VacuumLeases calls workflows.v1.LeaseService.VacuumLeases.
func (c *leaseServiceClient) VacuumLeases(ctx context.Context, req *connect.Request[v1.VacuumLeasesRequest]) (*connect.Response[v1.VacuumLeasesResponse], error) {
	return c.vacuumLeases.CallUnary(ctx, req)
}

// LeaseServiceHandler is an implementation of the workflows.v1.LeaseService service.
type LeaseServiceHandler interface {
	// TransferTaskLease is called by the lease service on shutdown, to transfer leases to another task server.
	TransferTaskLease(context.Context, *connect.Request[v1.TransferTaskLeaseRequest]) (*connect.Response[v1.TransferTaskLeaseResponse], error)
	// VacuumLeases is called by a cron job to clean up expired leases.
	// It handles those tasks where a task runner and an instance of the worklows-api both go down without a proper shutdown.
	VacuumLeases(context.Context, *connect.Request[v1.VacuumLeasesRequest]) (*connect.Response[v1.VacuumLeasesResponse], error)
}

// NewLeaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLeaseServiceHandler(svc LeaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	leaseServiceTransferTaskLeaseHandler := connect.NewUnaryHandler(
		LeaseServiceTransferTaskLeaseProcedure,
		svc.TransferTaskLease,
		connect.WithSchema(leaseServiceTransferTaskLeaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	leaseServiceVacuumLeasesHandler := connect.NewUnaryHandler(
		LeaseServiceVacuumLeasesProcedure,
		svc.VacuumLeases,
		connect.WithSchema(leaseServiceVacuumLeasesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/workflows.v1.LeaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LeaseServiceTransferTaskLeaseProcedure:
			leaseServiceTransferTaskLeaseHandler.ServeHTTP(w, r)
		case LeaseServiceVacuumLeasesProcedure:
			leaseServiceVacuumLeasesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLeaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLeaseServiceHandler struct{}

func (UnimplementedLeaseServiceHandler) TransferTaskLease(context.Context, *connect.Request[v1.TransferTaskLeaseRequest]) (*connect.Response[v1.TransferTaskLeaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.LeaseService.TransferTaskLease is not implemented"))
}

func (UnimplementedLeaseServiceHandler) VacuumLeases(context.Context, *connect.Request[v1.VacuumLeasesRequest]) (*connect.Response[v1.VacuumLeasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.LeaseService.VacuumLeases is not implemented"))
}
