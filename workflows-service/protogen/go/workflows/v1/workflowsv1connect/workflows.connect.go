// The externally facing API allowing users to interact with workflows.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflows/v1/workflows.proto

package workflowsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tilebox/tilebox-go/workflows-service/protogen/go/workflows/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkflowsServiceName is the fully-qualified name of the WorkflowsService service.
	WorkflowsServiceName = "workflows.v1.WorkflowsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkflowsServiceCreateClusterProcedure is the fully-qualified name of the WorkflowsService's
	// CreateCluster RPC.
	WorkflowsServiceCreateClusterProcedure = "/workflows.v1.WorkflowsService/CreateCluster"
	// WorkflowsServiceGetClusterProcedure is the fully-qualified name of the WorkflowsService's
	// GetCluster RPC.
	WorkflowsServiceGetClusterProcedure = "/workflows.v1.WorkflowsService/GetCluster"
	// WorkflowsServiceDeleteClusterProcedure is the fully-qualified name of the WorkflowsService's
	// DeleteCluster RPC.
	WorkflowsServiceDeleteClusterProcedure = "/workflows.v1.WorkflowsService/DeleteCluster"
	// WorkflowsServiceListClustersProcedure is the fully-qualified name of the WorkflowsService's
	// ListClusters RPC.
	WorkflowsServiceListClustersProcedure = "/workflows.v1.WorkflowsService/ListClusters"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	workflowsServiceServiceDescriptor             = v1.File_workflows_v1_workflows_proto.Services().ByName("WorkflowsService")
	workflowsServiceCreateClusterMethodDescriptor = workflowsServiceServiceDescriptor.Methods().ByName("CreateCluster")
	workflowsServiceGetClusterMethodDescriptor    = workflowsServiceServiceDescriptor.Methods().ByName("GetCluster")
	workflowsServiceDeleteClusterMethodDescriptor = workflowsServiceServiceDescriptor.Methods().ByName("DeleteCluster")
	workflowsServiceListClustersMethodDescriptor  = workflowsServiceServiceDescriptor.Methods().ByName("ListClusters")
)

// WorkflowsServiceClient is a client for the workflows.v1.WorkflowsService service.
type WorkflowsServiceClient interface {
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.Cluster], error)
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.Cluster], error)
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
}

// NewWorkflowsServiceClient constructs a client for the workflows.v1.WorkflowsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkflowsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkflowsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workflowsServiceClient{
		createCluster: connect.NewClient[v1.CreateClusterRequest, v1.Cluster](
			httpClient,
			baseURL+WorkflowsServiceCreateClusterProcedure,
			connect.WithSchema(workflowsServiceCreateClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.Cluster](
			httpClient,
			baseURL+WorkflowsServiceGetClusterProcedure,
			connect.WithSchema(workflowsServiceGetClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+WorkflowsServiceDeleteClusterProcedure,
			connect.WithSchema(workflowsServiceDeleteClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+WorkflowsServiceListClustersProcedure,
			connect.WithSchema(workflowsServiceListClustersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// workflowsServiceClient implements WorkflowsServiceClient.
type workflowsServiceClient struct {
	createCluster *connect.Client[v1.CreateClusterRequest, v1.Cluster]
	getCluster    *connect.Client[v1.GetClusterRequest, v1.Cluster]
	deleteCluster *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	listClusters  *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
}

// CreateCluster calls workflows.v1.WorkflowsService.CreateCluster.
func (c *workflowsServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.Cluster], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// GetCluster calls workflows.v1.WorkflowsService.GetCluster.
func (c *workflowsServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.Cluster], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// DeleteCluster calls workflows.v1.WorkflowsService.DeleteCluster.
func (c *workflowsServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// ListClusters calls workflows.v1.WorkflowsService.ListClusters.
func (c *workflowsServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// WorkflowsServiceHandler is an implementation of the workflows.v1.WorkflowsService service.
type WorkflowsServiceHandler interface {
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.Cluster], error)
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.Cluster], error)
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
}

// NewWorkflowsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkflowsServiceHandler(svc WorkflowsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workflowsServiceCreateClusterHandler := connect.NewUnaryHandler(
		WorkflowsServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(workflowsServiceCreateClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workflowsServiceGetClusterHandler := connect.NewUnaryHandler(
		WorkflowsServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(workflowsServiceGetClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workflowsServiceDeleteClusterHandler := connect.NewUnaryHandler(
		WorkflowsServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		connect.WithSchema(workflowsServiceDeleteClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workflowsServiceListClustersHandler := connect.NewUnaryHandler(
		WorkflowsServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(workflowsServiceListClustersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/workflows.v1.WorkflowsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkflowsServiceCreateClusterProcedure:
			workflowsServiceCreateClusterHandler.ServeHTTP(w, r)
		case WorkflowsServiceGetClusterProcedure:
			workflowsServiceGetClusterHandler.ServeHTTP(w, r)
		case WorkflowsServiceDeleteClusterProcedure:
			workflowsServiceDeleteClusterHandler.ServeHTTP(w, r)
		case WorkflowsServiceListClustersProcedure:
			workflowsServiceListClustersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkflowsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkflowsServiceHandler struct{}

func (UnimplementedWorkflowsServiceHandler) CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.Cluster], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.WorkflowsService.CreateCluster is not implemented"))
}

func (UnimplementedWorkflowsServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.Cluster], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.WorkflowsService.GetCluster is not implemented"))
}

func (UnimplementedWorkflowsServiceHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.WorkflowsService.DeleteCluster is not implemented"))
}

func (UnimplementedWorkflowsServiceHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflows.v1.WorkflowsService.ListClusters is not implemented"))
}
