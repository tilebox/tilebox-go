// The internal lease service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workflows/v1/lease.proto

package workflowsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeaseService_TransferTaskLease_FullMethodName = "/workflows.v1.LeaseService/TransferTaskLease"
	LeaseService_VacuumLeases_FullMethodName      = "/workflows.v1.LeaseService/VacuumLeases"
)

// LeaseServiceClient is the client API for LeaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaseServiceClient interface {
	// TransferTaskLease is called by the lease service on shutdown, to transfer leases to another task server.
	TransferTaskLease(ctx context.Context, in *TransferTaskLeaseRequest, opts ...grpc.CallOption) (*TransferTaskLeaseResponse, error)
	// VacuumLeases is called by a cron job to clean up expired leases.
	// It handles those tasks where a task runner and an instance of the worklows-api both go down without a proper shutdown.
	VacuumLeases(ctx context.Context, in *VacuumLeasesRequest, opts ...grpc.CallOption) (*VacuumLeasesResponse, error)
}

type leaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseServiceClient(cc grpc.ClientConnInterface) LeaseServiceClient {
	return &leaseServiceClient{cc}
}

func (c *leaseServiceClient) TransferTaskLease(ctx context.Context, in *TransferTaskLeaseRequest, opts ...grpc.CallOption) (*TransferTaskLeaseResponse, error) {
	out := new(TransferTaskLeaseResponse)
	err := c.cc.Invoke(ctx, LeaseService_TransferTaskLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) VacuumLeases(ctx context.Context, in *VacuumLeasesRequest, opts ...grpc.CallOption) (*VacuumLeasesResponse, error) {
	out := new(VacuumLeasesResponse)
	err := c.cc.Invoke(ctx, LeaseService_VacuumLeases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseServiceServer is the server API for LeaseService service.
// All implementations must embed UnimplementedLeaseServiceServer
// for forward compatibility
type LeaseServiceServer interface {
	// TransferTaskLease is called by the lease service on shutdown, to transfer leases to another task server.
	TransferTaskLease(context.Context, *TransferTaskLeaseRequest) (*TransferTaskLeaseResponse, error)
	// VacuumLeases is called by a cron job to clean up expired leases.
	// It handles those tasks where a task runner and an instance of the worklows-api both go down without a proper shutdown.
	VacuumLeases(context.Context, *VacuumLeasesRequest) (*VacuumLeasesResponse, error)
	mustEmbedUnimplementedLeaseServiceServer()
}

// UnimplementedLeaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaseServiceServer struct {
}

func (UnimplementedLeaseServiceServer) TransferTaskLease(context.Context, *TransferTaskLeaseRequest) (*TransferTaskLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTaskLease not implemented")
}
func (UnimplementedLeaseServiceServer) VacuumLeases(context.Context, *VacuumLeasesRequest) (*VacuumLeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VacuumLeases not implemented")
}
func (UnimplementedLeaseServiceServer) mustEmbedUnimplementedLeaseServiceServer() {}

// UnsafeLeaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseServiceServer will
// result in compilation errors.
type UnsafeLeaseServiceServer interface {
	mustEmbedUnimplementedLeaseServiceServer()
}

func RegisterLeaseServiceServer(s grpc.ServiceRegistrar, srv LeaseServiceServer) {
	s.RegisterService(&LeaseService_ServiceDesc, srv)
}

func _LeaseService_TransferTaskLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTaskLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).TransferTaskLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseService_TransferTaskLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).TransferTaskLease(ctx, req.(*TransferTaskLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_VacuumLeases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacuumLeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).VacuumLeases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaseService_VacuumLeases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).VacuumLeases(ctx, req.(*VacuumLeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseService_ServiceDesc is the grpc.ServiceDesc for LeaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflows.v1.LeaseService",
	HandlerType: (*LeaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferTaskLease",
			Handler:    _LeaseService_TransferTaskLease_Handler,
		},
		{
			MethodName: "VacuumLeases",
			Handler:    _LeaseService_VacuumLeases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows/v1/lease.proto",
}
